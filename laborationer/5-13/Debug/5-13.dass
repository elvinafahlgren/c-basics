
Debug/5-13:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 *
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f9f9 	bl	200003fa <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
#define STK_LOAD 	((volatile unsigned int *)(0xE000E014))
#define STK_VAL 	((volatile unsigned int *)(0xE000E018))
#define SIMULATOR 

void delay_250ns( void )
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    /* SystemCoreClock = 168000000 */
    *STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ( (168/4) -1 );
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;  //sätter enable och clksource
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    // börjar räkna
    while( (*STK_CTRL & 0x10000 )== 0 );    //vänta till countflag=1
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
    *STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_micro>:

void delay_micro(unsigned int us)
{
20000054:	b580      	push	{r7, lr}
20000056:	b082      	sub	sp, #8
20000058:	af00      	add	r7, sp, #0
2000005a:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    us = us / 1000;
2000005c:	687b      	ldr	r3, [r7, #4]
2000005e:	22fa      	movs	r2, #250	; 0xfa
20000060:	0091      	lsls	r1, r2, #2
20000062:	0018      	movs	r0, r3
20000064:	f000 f9ea 	bl	2000043c <__udivsi3>
20000068:	0003      	movs	r3, r0
2000006a:	607b      	str	r3, [r7, #4]
    us++;
2000006c:	687b      	ldr	r3, [r7, #4]
2000006e:	3301      	adds	r3, #1
20000070:	607b      	str	r3, [r7, #4]
#endif
    while( us > 0 )
20000072:	e00a      	b.n	2000008a <delay_micro+0x36>
    {
        delay_250ns();
20000074:	f7ff ffcc 	bl	20000010 <delay_250ns>
        delay_250ns();
20000078:	f7ff ffca 	bl	20000010 <delay_250ns>
        delay_250ns();
2000007c:	f7ff ffc8 	bl	20000010 <delay_250ns>
        delay_250ns();
20000080:	f7ff ffc6 	bl	20000010 <delay_250ns>
        us--;
20000084:	687b      	ldr	r3, [r7, #4]
20000086:	3b01      	subs	r3, #1
20000088:	607b      	str	r3, [r7, #4]
    while( us > 0 )
2000008a:	687b      	ldr	r3, [r7, #4]
2000008c:	2b00      	cmp	r3, #0
2000008e:	d1f1      	bne.n	20000074 <delay_micro+0x20>
    }
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	46bd      	mov	sp, r7
20000096:	b002      	add	sp, #8
20000098:	bd80      	pop	{r7, pc}

2000009a <delay_milli>:

void delay_milli(unsigned int ms)
{
2000009a:	b580      	push	{r7, lr}
2000009c:	b082      	sub	sp, #8
2000009e:	af00      	add	r7, sp, #0
200000a0:	6078      	str	r0, [r7, #4]
#ifdef  SIMULATOR
    ms = ms / 1000;
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	22fa      	movs	r2, #250	; 0xfa
200000a6:	0091      	lsls	r1, r2, #2
200000a8:	0018      	movs	r0, r3
200000aa:	f000 f9c7 	bl	2000043c <__udivsi3>
200000ae:	0003      	movs	r3, r0
200000b0:	607b      	str	r3, [r7, #4]
    ms++;
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	3301      	adds	r3, #1
200000b6:	607b      	str	r3, [r7, #4]
#endif
    while(ms > 0)
200000b8:	e007      	b.n	200000ca <delay_milli+0x30>
    {
        delay_micro(1000);
200000ba:	23fa      	movs	r3, #250	; 0xfa
200000bc:	009b      	lsls	r3, r3, #2
200000be:	0018      	movs	r0, r3
200000c0:	f7ff ffc8 	bl	20000054 <delay_micro>
        ms--;
200000c4:	687b      	ldr	r3, [r7, #4]
200000c6:	3b01      	subs	r3, #1
200000c8:	607b      	str	r3, [r7, #4]
    while(ms > 0)
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	2b00      	cmp	r3, #0
200000ce:	d1f4      	bne.n	200000ba <delay_milli+0x20>
    }
}
200000d0:	46c0      	nop			; (mov r8, r8)
200000d2:	46c0      	nop			; (mov r8, r8)
200000d4:	46bd      	mov	sp, r7
200000d6:	b002      	add	sp, #8
200000d8:	bd80      	pop	{r7, pc}

200000da <graphic_initalize>:
__attribute__((naked))
void graphic_initalize(void)
{
200000da:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile (" .HWORD 0xDFF0\n");
	__asm volatile (" BX LR\n");
}
200000de:	46c0      	nop			; (mov r8, r8)

200000e0 <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void)
{
200000e0:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile (" .HWORD 0xDFF1\n");
	__asm volatile (" BX LR\n");
}
200000e4:	46c0      	nop			; (mov r8, r8)

200000e6 <graphic_pixel_set>:


__attribute__((naked))
void graphic_pixel_set( int x, int y)
{
200000e6:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile (" .HWORD 0xDFF2\n");
	__asm volatile (" BX LR\n");
}
200000ea:	46c0      	nop			; (mov r8, r8)

200000ec <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear( int x, int y)
{
200000ec:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile (" .HWORD 0xDFF3\n");
	__asm volatile (" BX LR\n");
}
200000f0:	46c0      	nop			; (mov r8, r8)

200000f2 <swap>:
	char x,y;
	
} RECT, *PRECT;

void swap(int *a, int *b)
{
200000f2:	b580      	push	{r7, lr}
200000f4:	b084      	sub	sp, #16
200000f6:	af00      	add	r7, sp, #0
200000f8:	6078      	str	r0, [r7, #4]
200000fa:	6039      	str	r1, [r7, #0]
	int temp;
	temp = *a;
200000fc:	687b      	ldr	r3, [r7, #4]
200000fe:	681b      	ldr	r3, [r3, #0]
20000100:	60fb      	str	r3, [r7, #12]
	*a = *b;
20000102:	683b      	ldr	r3, [r7, #0]
20000104:	681a      	ldr	r2, [r3, #0]
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	601a      	str	r2, [r3, #0]
	*b = temp;
2000010a:	683b      	ldr	r3, [r7, #0]
2000010c:	68fa      	ldr	r2, [r7, #12]
2000010e:	601a      	str	r2, [r3, #0]
	return;
20000110:	46c0      	nop			; (mov r8, r8)
}
20000112:	46bd      	mov	sp, r7
20000114:	b004      	add	sp, #16
20000116:	bd80      	pop	{r7, pc}

20000118 <draw_line>:


int draw_line( PLINE l )
{
20000118:	b5b0      	push	{r4, r5, r7, lr}
2000011a:	b090      	sub	sp, #64	; 0x40
2000011c:	af00      	add	r7, sp, #0
2000011e:	6078      	str	r0, [r7, #4]
	
	POINT start = l->p0;
20000120:	2420      	movs	r4, #32
20000122:	193a      	adds	r2, r7, r4
20000124:	687b      	ldr	r3, [r7, #4]
20000126:	0010      	movs	r0, r2
20000128:	0019      	movs	r1, r3
2000012a:	2302      	movs	r3, #2
2000012c:	001a      	movs	r2, r3
2000012e:	f000 fa11 	bl	20000554 <memcpy>
	POINT end = l->p1;
20000132:	251c      	movs	r5, #28
20000134:	1979      	adds	r1, r7, r5
20000136:	687b      	ldr	r3, [r7, #4]
20000138:	2202      	movs	r2, #2
2000013a:	0008      	movs	r0, r1
2000013c:	189b      	adds	r3, r3, r2
2000013e:	2202      	movs	r2, #2
20000140:	0019      	movs	r1, r3
20000142:	f000 fa07 	bl	20000554 <memcpy>
	
	int x0 = start.x;
20000146:	0022      	movs	r2, r4
20000148:	18bb      	adds	r3, r7, r2
2000014a:	781b      	ldrb	r3, [r3, #0]
2000014c:	61bb      	str	r3, [r7, #24]
	int x1 = end.x;
2000014e:	0029      	movs	r1, r5
20000150:	187b      	adds	r3, r7, r1
20000152:	781b      	ldrb	r3, [r3, #0]
20000154:	617b      	str	r3, [r7, #20]
	int y0 = start.y;
20000156:	18bb      	adds	r3, r7, r2
20000158:	785b      	ldrb	r3, [r3, #1]
2000015a:	613b      	str	r3, [r7, #16]
	int y1 = end.y;
2000015c:	187b      	adds	r3, r7, r1
2000015e:	785b      	ldrb	r3, [r3, #1]
20000160:	60fb      	str	r3, [r7, #12]
	
	int steep;
	
	if(abs(y1 - y0) > abs(x1 - x0))
20000162:	68fa      	ldr	r2, [r7, #12]
20000164:	693b      	ldr	r3, [r7, #16]
20000166:	1ad3      	subs	r3, r2, r3
20000168:	17d9      	asrs	r1, r3, #31
2000016a:	185a      	adds	r2, r3, r1
2000016c:	404a      	eors	r2, r1
2000016e:	6979      	ldr	r1, [r7, #20]
20000170:	69bb      	ldr	r3, [r7, #24]
20000172:	1acb      	subs	r3, r1, r3
20000174:	17d9      	asrs	r1, r3, #31
20000176:	185b      	adds	r3, r3, r1
20000178:	404b      	eors	r3, r1
2000017a:	429a      	cmp	r2, r3
2000017c:	dd02      	ble.n	20000184 <draw_line+0x6c>
		steep = 1;
2000017e:	2301      	movs	r3, #1
20000180:	63fb      	str	r3, [r7, #60]	; 0x3c
20000182:	e001      	b.n	20000188 <draw_line+0x70>
	else
		steep = 0;
20000184:	2300      	movs	r3, #0
20000186:	63fb      	str	r3, [r7, #60]	; 0x3c
	
	if(steep)
20000188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
2000018a:	2b00      	cmp	r3, #0
2000018c:	d00f      	beq.n	200001ae <draw_line+0x96>
	{
		swap(&x0, &y0);
2000018e:	2310      	movs	r3, #16
20000190:	18fa      	adds	r2, r7, r3
20000192:	2318      	movs	r3, #24
20000194:	18fb      	adds	r3, r7, r3
20000196:	0011      	movs	r1, r2
20000198:	0018      	movs	r0, r3
2000019a:	f7ff ffaa 	bl	200000f2 <swap>
		swap(&x1, &y1);
2000019e:	230c      	movs	r3, #12
200001a0:	18fa      	adds	r2, r7, r3
200001a2:	2314      	movs	r3, #20
200001a4:	18fb      	adds	r3, r7, r3
200001a6:	0011      	movs	r1, r2
200001a8:	0018      	movs	r0, r3
200001aa:	f7ff ffa2 	bl	200000f2 <swap>
	}
	
	if(x0 > x1)
200001ae:	69ba      	ldr	r2, [r7, #24]
200001b0:	697b      	ldr	r3, [r7, #20]
200001b2:	429a      	cmp	r2, r3
200001b4:	dd0f      	ble.n	200001d6 <draw_line+0xbe>
	{
		swap(&x0, &x1);
200001b6:	2314      	movs	r3, #20
200001b8:	18fa      	adds	r2, r7, r3
200001ba:	2318      	movs	r3, #24
200001bc:	18fb      	adds	r3, r7, r3
200001be:	0011      	movs	r1, r2
200001c0:	0018      	movs	r0, r3
200001c2:	f7ff ff96 	bl	200000f2 <swap>
		swap(&y0, &y1);
200001c6:	230c      	movs	r3, #12
200001c8:	18fa      	adds	r2, r7, r3
200001ca:	2310      	movs	r3, #16
200001cc:	18fb      	adds	r3, r7, r3
200001ce:	0011      	movs	r1, r2
200001d0:	0018      	movs	r0, r3
200001d2:	f7ff ff8e 	bl	200000f2 <swap>
	}
	
	int error = 0;
200001d6:	2300      	movs	r3, #0
200001d8:	63bb      	str	r3, [r7, #56]	; 0x38
	int ystep;
	int y = y0;
200001da:	693b      	ldr	r3, [r7, #16]
200001dc:	633b      	str	r3, [r7, #48]	; 0x30
	int deltax = x1 - x0;
200001de:	697a      	ldr	r2, [r7, #20]
200001e0:	69bb      	ldr	r3, [r7, #24]
200001e2:	1ad3      	subs	r3, r2, r3
200001e4:	62bb      	str	r3, [r7, #40]	; 0x28
	int deltay = abs(y1 - y0);
200001e6:	68fa      	ldr	r2, [r7, #12]
200001e8:	693b      	ldr	r3, [r7, #16]
200001ea:	1ad3      	subs	r3, r2, r3
200001ec:	17da      	asrs	r2, r3, #31
200001ee:	189b      	adds	r3, r3, r2
200001f0:	4053      	eors	r3, r2
200001f2:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(y0 < y1)
200001f4:	693a      	ldr	r2, [r7, #16]
200001f6:	68fb      	ldr	r3, [r7, #12]
200001f8:	429a      	cmp	r2, r3
200001fa:	da02      	bge.n	20000202 <draw_line+0xea>
		ystep = 1;
200001fc:	2301      	movs	r3, #1
200001fe:	637b      	str	r3, [r7, #52]	; 0x34
20000200:	e002      	b.n	20000208 <draw_line+0xf0>
	else
		ystep = -1;
20000202:	2301      	movs	r3, #1
20000204:	425b      	negs	r3, r3
20000206:	637b      	str	r3, [r7, #52]	; 0x34
	
	for(int x = x0; x < x1; x++)
20000208:	69bb      	ldr	r3, [r7, #24]
2000020a:	62fb      	str	r3, [r7, #44]	; 0x2c
2000020c:	e023      	b.n	20000256 <draw_line+0x13e>
	{
		if(steep)
2000020e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000210:	2b00      	cmp	r3, #0
20000212:	d006      	beq.n	20000222 <draw_line+0x10a>
			graphic_pixel_set(y,x);
20000214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000218:	0011      	movs	r1, r2
2000021a:	0018      	movs	r0, r3
2000021c:	f7ff ff63 	bl	200000e6 <graphic_pixel_set>
20000220:	e005      	b.n	2000022e <draw_line+0x116>
		else
			graphic_pixel_set(x,y);
20000222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20000224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000226:	0011      	movs	r1, r2
20000228:	0018      	movs	r0, r3
2000022a:	f7ff ff5c 	bl	200000e6 <graphic_pixel_set>
			
		error = error + deltay;
2000022e:	6bba      	ldr	r2, [r7, #56]	; 0x38
20000230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000232:	18d3      	adds	r3, r2, r3
20000234:	63bb      	str	r3, [r7, #56]	; 0x38
		
		if(2 * error >= deltax)
20000236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000238:	005b      	lsls	r3, r3, #1
2000023a:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000023c:	429a      	cmp	r2, r3
2000023e:	dc07      	bgt.n	20000250 <draw_line+0x138>
		{
			y = y + ystep;
20000240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20000242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000244:	18d3      	adds	r3, r2, r3
20000246:	633b      	str	r3, [r7, #48]	; 0x30
			error = error - deltax;
20000248:	6bba      	ldr	r2, [r7, #56]	; 0x38
2000024a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000024c:	1ad3      	subs	r3, r2, r3
2000024e:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int x = x0; x < x1; x++)
20000250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000252:	3301      	adds	r3, #1
20000254:	62fb      	str	r3, [r7, #44]	; 0x2c
20000256:	697b      	ldr	r3, [r7, #20]
20000258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000025a:	429a      	cmp	r2, r3
2000025c:	dbd7      	blt.n	2000020e <draw_line+0xf6>
		}
	}
	
}
2000025e:	46c0      	nop			; (mov r8, r8)
20000260:	0018      	movs	r0, r3
20000262:	46bd      	mov	sp, r7
20000264:	b010      	add	sp, #64	; 0x40
20000266:	bdb0      	pop	{r4, r5, r7, pc}

20000268 <draw_rect>:

int draw_rect( PRECT r )
{
20000268:	b5f0      	push	{r4, r5, r6, r7, lr}
2000026a:	b089      	sub	sp, #36	; 0x24
2000026c:	af00      	add	r7, sp, #0
2000026e:	6078      	str	r0, [r7, #4]
	POINT start = r->p;
20000270:	2418      	movs	r4, #24
20000272:	193a      	adds	r2, r7, r4
20000274:	687b      	ldr	r3, [r7, #4]
20000276:	0010      	movs	r0, r2
20000278:	0019      	movs	r1, r3
2000027a:	2302      	movs	r3, #2
2000027c:	001a      	movs	r2, r3
2000027e:	f000 f969 	bl	20000554 <memcpy>
	char dx = r->x;
20000282:	231f      	movs	r3, #31
20000284:	18fb      	adds	r3, r7, r3
20000286:	687a      	ldr	r2, [r7, #4]
20000288:	7892      	ldrb	r2, [r2, #2]
2000028a:	701a      	strb	r2, [r3, #0]
	char dy = r->y;
2000028c:	211e      	movs	r1, #30
2000028e:	187b      	adds	r3, r7, r1
20000290:	687a      	ldr	r2, [r7, #4]
20000292:	78d2      	ldrb	r2, [r2, #3]
20000294:	701a      	strb	r2, [r3, #0]
	
	//linje1
	char x0 = start.x;
20000296:	201d      	movs	r0, #29
20000298:	183b      	adds	r3, r7, r0
2000029a:	193a      	adds	r2, r7, r4
2000029c:	7812      	ldrb	r2, [r2, #0]
2000029e:	701a      	strb	r2, [r3, #0]
	char y0 = start.y;
200002a0:	251c      	movs	r5, #28
200002a2:	197b      	adds	r3, r7, r5
200002a4:	193a      	adds	r2, r7, r4
200002a6:	7852      	ldrb	r2, [r2, #1]
200002a8:	701a      	strb	r2, [r3, #0]
	char x1 = start.x + dx;
200002aa:	193b      	adds	r3, r7, r4
200002ac:	7819      	ldrb	r1, [r3, #0]
200002ae:	261b      	movs	r6, #27
200002b0:	19bb      	adds	r3, r7, r6
200002b2:	221f      	movs	r2, #31
200002b4:	18ba      	adds	r2, r7, r2
200002b6:	7812      	ldrb	r2, [r2, #0]
200002b8:	188a      	adds	r2, r1, r2
200002ba:	701a      	strb	r2, [r3, #0]
	char y1 = start.y;	
200002bc:	211a      	movs	r1, #26
200002be:	187b      	adds	r3, r7, r1
200002c0:	193a      	adds	r2, r7, r4
200002c2:	7852      	ldrb	r2, [r2, #1]
200002c4:	701a      	strb	r2, [r3, #0]
	LINE line1 = {x0,y0, x1,y1};
200002c6:	2314      	movs	r3, #20
200002c8:	18fb      	adds	r3, r7, r3
200002ca:	183a      	adds	r2, r7, r0
200002cc:	7812      	ldrb	r2, [r2, #0]
200002ce:	701a      	strb	r2, [r3, #0]
200002d0:	2314      	movs	r3, #20
200002d2:	0018      	movs	r0, r3
200002d4:	18fb      	adds	r3, r7, r3
200002d6:	197a      	adds	r2, r7, r5
200002d8:	7812      	ldrb	r2, [r2, #0]
200002da:	705a      	strb	r2, [r3, #1]
200002dc:	0003      	movs	r3, r0
200002de:	0018      	movs	r0, r3
200002e0:	18fb      	adds	r3, r7, r3
200002e2:	19ba      	adds	r2, r7, r6
200002e4:	7812      	ldrb	r2, [r2, #0]
200002e6:	709a      	strb	r2, [r3, #2]
200002e8:	0003      	movs	r3, r0
200002ea:	0018      	movs	r0, r3
200002ec:	18fb      	adds	r3, r7, r3
200002ee:	187a      	adds	r2, r7, r1
200002f0:	7812      	ldrb	r2, [r2, #0]
200002f2:	70da      	strb	r2, [r3, #3]
	draw_line(&line1);
200002f4:	0002      	movs	r2, r0
200002f6:	18bb      	adds	r3, r7, r2
200002f8:	0018      	movs	r0, r3
200002fa:	f7ff ff0d 	bl	20000118 <draw_line>
	
	//linje2
	x1 = start.x;
200002fe:	19bb      	adds	r3, r7, r6
20000300:	193a      	adds	r2, r7, r4
20000302:	7812      	ldrb	r2, [r2, #0]
20000304:	701a      	strb	r2, [r3, #0]
	y1 = start.y + dy;
20000306:	193b      	adds	r3, r7, r4
20000308:	7859      	ldrb	r1, [r3, #1]
2000030a:	231a      	movs	r3, #26
2000030c:	18fb      	adds	r3, r7, r3
2000030e:	221e      	movs	r2, #30
20000310:	18ba      	adds	r2, r7, r2
20000312:	7812      	ldrb	r2, [r2, #0]
20000314:	188a      	adds	r2, r1, r2
20000316:	701a      	strb	r2, [r3, #0]
	LINE line2 = {x0,y0, x1,y1};
20000318:	2210      	movs	r2, #16
2000031a:	0011      	movs	r1, r2
2000031c:	18bb      	adds	r3, r7, r2
2000031e:	201d      	movs	r0, #29
20000320:	183a      	adds	r2, r7, r0
20000322:	7812      	ldrb	r2, [r2, #0]
20000324:	701a      	strb	r2, [r3, #0]
20000326:	187b      	adds	r3, r7, r1
20000328:	197a      	adds	r2, r7, r5
2000032a:	7812      	ldrb	r2, [r2, #0]
2000032c:	705a      	strb	r2, [r3, #1]
2000032e:	187b      	adds	r3, r7, r1
20000330:	19ba      	adds	r2, r7, r6
20000332:	7812      	ldrb	r2, [r2, #0]
20000334:	709a      	strb	r2, [r3, #2]
20000336:	000a      	movs	r2, r1
20000338:	0010      	movs	r0, r2
2000033a:	18bb      	adds	r3, r7, r2
2000033c:	211a      	movs	r1, #26
2000033e:	187a      	adds	r2, r7, r1
20000340:	7812      	ldrb	r2, [r2, #0]
20000342:	70da      	strb	r2, [r3, #3]
	draw_line(&line2);
20000344:	0002      	movs	r2, r0
20000346:	18bb      	adds	r3, r7, r2
20000348:	0018      	movs	r0, r3
2000034a:	f7ff fee5 	bl	20000118 <draw_line>
	
	//linje3
	y0 = start.y + dy;
2000034e:	193b      	adds	r3, r7, r4
20000350:	7859      	ldrb	r1, [r3, #1]
20000352:	197b      	adds	r3, r7, r5
20000354:	221e      	movs	r2, #30
20000356:	18ba      	adds	r2, r7, r2
20000358:	7812      	ldrb	r2, [r2, #0]
2000035a:	188a      	adds	r2, r1, r2
2000035c:	701a      	strb	r2, [r3, #0]
	x1 = start.x + dx;
2000035e:	193b      	adds	r3, r7, r4
20000360:	7819      	ldrb	r1, [r3, #0]
20000362:	19bb      	adds	r3, r7, r6
20000364:	221f      	movs	r2, #31
20000366:	18ba      	adds	r2, r7, r2
20000368:	7812      	ldrb	r2, [r2, #0]
2000036a:	188a      	adds	r2, r1, r2
2000036c:	701a      	strb	r2, [r3, #0]
	LINE line3 = {x0,y0, x1,y1};
2000036e:	220c      	movs	r2, #12
20000370:	0011      	movs	r1, r2
20000372:	18bb      	adds	r3, r7, r2
20000374:	201d      	movs	r0, #29
20000376:	183a      	adds	r2, r7, r0
20000378:	7812      	ldrb	r2, [r2, #0]
2000037a:	701a      	strb	r2, [r3, #0]
2000037c:	187b      	adds	r3, r7, r1
2000037e:	197a      	adds	r2, r7, r5
20000380:	7812      	ldrb	r2, [r2, #0]
20000382:	705a      	strb	r2, [r3, #1]
20000384:	000a      	movs	r2, r1
20000386:	0011      	movs	r1, r2
20000388:	18bb      	adds	r3, r7, r2
2000038a:	19ba      	adds	r2, r7, r6
2000038c:	7812      	ldrb	r2, [r2, #0]
2000038e:	709a      	strb	r2, [r3, #2]
20000390:	000a      	movs	r2, r1
20000392:	0010      	movs	r0, r2
20000394:	18bb      	adds	r3, r7, r2
20000396:	211a      	movs	r1, #26
20000398:	187a      	adds	r2, r7, r1
2000039a:	7812      	ldrb	r2, [r2, #0]
2000039c:	70da      	strb	r2, [r3, #3]
	draw_line(&line3);
2000039e:	0002      	movs	r2, r0
200003a0:	18bb      	adds	r3, r7, r2
200003a2:	0018      	movs	r0, r3
200003a4:	f7ff feb8 	bl	20000118 <draw_line>
	
	//linje4
	x0 = start.x + dx;
200003a8:	193b      	adds	r3, r7, r4
200003aa:	7819      	ldrb	r1, [r3, #0]
200003ac:	201d      	movs	r0, #29
200003ae:	183b      	adds	r3, r7, r0
200003b0:	221f      	movs	r2, #31
200003b2:	18ba      	adds	r2, r7, r2
200003b4:	7812      	ldrb	r2, [r2, #0]
200003b6:	188a      	adds	r2, r1, r2
200003b8:	701a      	strb	r2, [r3, #0]
	y0 = start.y;
200003ba:	197b      	adds	r3, r7, r5
200003bc:	193a      	adds	r2, r7, r4
200003be:	7852      	ldrb	r2, [r2, #1]
200003c0:	701a      	strb	r2, [r3, #0]
	LINE line4 = {x0,y0, x1,y1};
200003c2:	2408      	movs	r4, #8
200003c4:	193b      	adds	r3, r7, r4
200003c6:	183a      	adds	r2, r7, r0
200003c8:	7812      	ldrb	r2, [r2, #0]
200003ca:	701a      	strb	r2, [r3, #0]
200003cc:	0020      	movs	r0, r4
200003ce:	183b      	adds	r3, r7, r0
200003d0:	197a      	adds	r2, r7, r5
200003d2:	7812      	ldrb	r2, [r2, #0]
200003d4:	705a      	strb	r2, [r3, #1]
200003d6:	183b      	adds	r3, r7, r0
200003d8:	19ba      	adds	r2, r7, r6
200003da:	7812      	ldrb	r2, [r2, #0]
200003dc:	709a      	strb	r2, [r3, #2]
200003de:	183b      	adds	r3, r7, r0
200003e0:	211a      	movs	r1, #26
200003e2:	187a      	adds	r2, r7, r1
200003e4:	7812      	ldrb	r2, [r2, #0]
200003e6:	70da      	strb	r2, [r3, #3]
	draw_line(&line4);
200003e8:	183b      	adds	r3, r7, r0
200003ea:	0018      	movs	r0, r3
200003ec:	f7ff fe94 	bl	20000118 <draw_line>
	

}
200003f0:	46c0      	nop			; (mov r8, r8)
200003f2:	0018      	movs	r0, r3
200003f4:	46bd      	mov	sp, r7
200003f6:	b009      	add	sp, #36	; 0x24
200003f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

200003fa <main>:
{60,35, 10,10},
{70,10, 5,5},
}; 

void main(void)
{
200003fa:	b580      	push	{r7, lr}
200003fc:	b082      	sub	sp, #8
200003fe:	af00      	add	r7, sp, #0
	graphic_initalize();
20000400:	f7ff fe6b 	bl	200000da <graphic_initalize>
	graphic_clear_screen();
20000404:	f7ff fe6c 	bl	200000e0 <graphic_clear_screen>

	while( 1 )
	{
		for( int i = 0; i< sizeof(rectangles)/sizeof( RECT ); i++)
20000408:	2300      	movs	r3, #0
2000040a:	607b      	str	r3, [r7, #4]
2000040c:	e00e      	b.n	2000042c <main+0x32>
		{
			draw_rect( &rectangles[i] );
2000040e:	687b      	ldr	r3, [r7, #4]
20000410:	009a      	lsls	r2, r3, #2
20000412:	4b09      	ldr	r3, [pc, #36]	; (20000438 <main+0x3e>)
20000414:	18d3      	adds	r3, r2, r3
20000416:	0018      	movs	r0, r3
20000418:	f7ff ff26 	bl	20000268 <draw_rect>
			delay_milli( 500 );
2000041c:	23fa      	movs	r3, #250	; 0xfa
2000041e:	005b      	lsls	r3, r3, #1
20000420:	0018      	movs	r0, r3
20000422:	f7ff fe3a 	bl	2000009a <delay_milli>
		for( int i = 0; i< sizeof(rectangles)/sizeof( RECT ); i++)
20000426:	687b      	ldr	r3, [r7, #4]
20000428:	3301      	adds	r3, #1
2000042a:	607b      	str	r3, [r7, #4]
2000042c:	687b      	ldr	r3, [r7, #4]
2000042e:	2b04      	cmp	r3, #4
20000430:	d9ed      	bls.n	2000040e <main+0x14>
		}
			graphic_clear_screen(); 
20000432:	f7ff fe55 	bl	200000e0 <graphic_clear_screen>
		for( int i = 0; i< sizeof(rectangles)/sizeof( RECT ); i++)
20000436:	e7e7      	b.n	20000408 <main+0xe>
20000438:	20000568 	andcs	r0, r0, r8, ror #10

2000043c <__udivsi3>:
2000043c:	2200      	movs	r2, #0
2000043e:	0843      	lsrs	r3, r0, #1
20000440:	428b      	cmp	r3, r1
20000442:	d374      	bcc.n	2000052e <__udivsi3+0xf2>
20000444:	0903      	lsrs	r3, r0, #4
20000446:	428b      	cmp	r3, r1
20000448:	d35f      	bcc.n	2000050a <__udivsi3+0xce>
2000044a:	0a03      	lsrs	r3, r0, #8
2000044c:	428b      	cmp	r3, r1
2000044e:	d344      	bcc.n	200004da <__udivsi3+0x9e>
20000450:	0b03      	lsrs	r3, r0, #12
20000452:	428b      	cmp	r3, r1
20000454:	d328      	bcc.n	200004a8 <__udivsi3+0x6c>
20000456:	0c03      	lsrs	r3, r0, #16
20000458:	428b      	cmp	r3, r1
2000045a:	d30d      	bcc.n	20000478 <__udivsi3+0x3c>
2000045c:	22ff      	movs	r2, #255	; 0xff
2000045e:	0209      	lsls	r1, r1, #8
20000460:	ba12      	rev	r2, r2
20000462:	0c03      	lsrs	r3, r0, #16
20000464:	428b      	cmp	r3, r1
20000466:	d302      	bcc.n	2000046e <__udivsi3+0x32>
20000468:	1212      	asrs	r2, r2, #8
2000046a:	0209      	lsls	r1, r1, #8
2000046c:	d065      	beq.n	2000053a <__udivsi3+0xfe>
2000046e:	0b03      	lsrs	r3, r0, #12
20000470:	428b      	cmp	r3, r1
20000472:	d319      	bcc.n	200004a8 <__udivsi3+0x6c>
20000474:	e000      	b.n	20000478 <__udivsi3+0x3c>
20000476:	0a09      	lsrs	r1, r1, #8
20000478:	0bc3      	lsrs	r3, r0, #15
2000047a:	428b      	cmp	r3, r1
2000047c:	d301      	bcc.n	20000482 <__udivsi3+0x46>
2000047e:	03cb      	lsls	r3, r1, #15
20000480:	1ac0      	subs	r0, r0, r3
20000482:	4152      	adcs	r2, r2
20000484:	0b83      	lsrs	r3, r0, #14
20000486:	428b      	cmp	r3, r1
20000488:	d301      	bcc.n	2000048e <__udivsi3+0x52>
2000048a:	038b      	lsls	r3, r1, #14
2000048c:	1ac0      	subs	r0, r0, r3
2000048e:	4152      	adcs	r2, r2
20000490:	0b43      	lsrs	r3, r0, #13
20000492:	428b      	cmp	r3, r1
20000494:	d301      	bcc.n	2000049a <__udivsi3+0x5e>
20000496:	034b      	lsls	r3, r1, #13
20000498:	1ac0      	subs	r0, r0, r3
2000049a:	4152      	adcs	r2, r2
2000049c:	0b03      	lsrs	r3, r0, #12
2000049e:	428b      	cmp	r3, r1
200004a0:	d301      	bcc.n	200004a6 <__udivsi3+0x6a>
200004a2:	030b      	lsls	r3, r1, #12
200004a4:	1ac0      	subs	r0, r0, r3
200004a6:	4152      	adcs	r2, r2
200004a8:	0ac3      	lsrs	r3, r0, #11
200004aa:	428b      	cmp	r3, r1
200004ac:	d301      	bcc.n	200004b2 <__udivsi3+0x76>
200004ae:	02cb      	lsls	r3, r1, #11
200004b0:	1ac0      	subs	r0, r0, r3
200004b2:	4152      	adcs	r2, r2
200004b4:	0a83      	lsrs	r3, r0, #10
200004b6:	428b      	cmp	r3, r1
200004b8:	d301      	bcc.n	200004be <__udivsi3+0x82>
200004ba:	028b      	lsls	r3, r1, #10
200004bc:	1ac0      	subs	r0, r0, r3
200004be:	4152      	adcs	r2, r2
200004c0:	0a43      	lsrs	r3, r0, #9
200004c2:	428b      	cmp	r3, r1
200004c4:	d301      	bcc.n	200004ca <__udivsi3+0x8e>
200004c6:	024b      	lsls	r3, r1, #9
200004c8:	1ac0      	subs	r0, r0, r3
200004ca:	4152      	adcs	r2, r2
200004cc:	0a03      	lsrs	r3, r0, #8
200004ce:	428b      	cmp	r3, r1
200004d0:	d301      	bcc.n	200004d6 <__udivsi3+0x9a>
200004d2:	020b      	lsls	r3, r1, #8
200004d4:	1ac0      	subs	r0, r0, r3
200004d6:	4152      	adcs	r2, r2
200004d8:	d2cd      	bcs.n	20000476 <__udivsi3+0x3a>
200004da:	09c3      	lsrs	r3, r0, #7
200004dc:	428b      	cmp	r3, r1
200004de:	d301      	bcc.n	200004e4 <__udivsi3+0xa8>
200004e0:	01cb      	lsls	r3, r1, #7
200004e2:	1ac0      	subs	r0, r0, r3
200004e4:	4152      	adcs	r2, r2
200004e6:	0983      	lsrs	r3, r0, #6
200004e8:	428b      	cmp	r3, r1
200004ea:	d301      	bcc.n	200004f0 <__udivsi3+0xb4>
200004ec:	018b      	lsls	r3, r1, #6
200004ee:	1ac0      	subs	r0, r0, r3
200004f0:	4152      	adcs	r2, r2
200004f2:	0943      	lsrs	r3, r0, #5
200004f4:	428b      	cmp	r3, r1
200004f6:	d301      	bcc.n	200004fc <__udivsi3+0xc0>
200004f8:	014b      	lsls	r3, r1, #5
200004fa:	1ac0      	subs	r0, r0, r3
200004fc:	4152      	adcs	r2, r2
200004fe:	0903      	lsrs	r3, r0, #4
20000500:	428b      	cmp	r3, r1
20000502:	d301      	bcc.n	20000508 <__udivsi3+0xcc>
20000504:	010b      	lsls	r3, r1, #4
20000506:	1ac0      	subs	r0, r0, r3
20000508:	4152      	adcs	r2, r2
2000050a:	08c3      	lsrs	r3, r0, #3
2000050c:	428b      	cmp	r3, r1
2000050e:	d301      	bcc.n	20000514 <__udivsi3+0xd8>
20000510:	00cb      	lsls	r3, r1, #3
20000512:	1ac0      	subs	r0, r0, r3
20000514:	4152      	adcs	r2, r2
20000516:	0883      	lsrs	r3, r0, #2
20000518:	428b      	cmp	r3, r1
2000051a:	d301      	bcc.n	20000520 <__udivsi3+0xe4>
2000051c:	008b      	lsls	r3, r1, #2
2000051e:	1ac0      	subs	r0, r0, r3
20000520:	4152      	adcs	r2, r2
20000522:	0843      	lsrs	r3, r0, #1
20000524:	428b      	cmp	r3, r1
20000526:	d301      	bcc.n	2000052c <__udivsi3+0xf0>
20000528:	004b      	lsls	r3, r1, #1
2000052a:	1ac0      	subs	r0, r0, r3
2000052c:	4152      	adcs	r2, r2
2000052e:	1a41      	subs	r1, r0, r1
20000530:	d200      	bcs.n	20000534 <__udivsi3+0xf8>
20000532:	4601      	mov	r1, r0
20000534:	4152      	adcs	r2, r2
20000536:	4610      	mov	r0, r2
20000538:	4770      	bx	lr
2000053a:	e7ff      	b.n	2000053c <__udivsi3+0x100>
2000053c:	b501      	push	{r0, lr}
2000053e:	2000      	movs	r0, #0
20000540:	f000 f806 	bl	20000550 <__aeabi_idiv0>
20000544:	bd02      	pop	{r1, pc}
20000546:	46c0      	nop			; (mov r8, r8)

20000548 <__aeabi_uidivmod>:
20000548:	2900      	cmp	r1, #0
2000054a:	d0f7      	beq.n	2000053c <__udivsi3+0x100>
2000054c:	e776      	b.n	2000043c <__udivsi3>
2000054e:	4770      	bx	lr

20000550 <__aeabi_idiv0>:
20000550:	4770      	bx	lr
20000552:	46c0      	nop			; (mov r8, r8)

20000554 <memcpy>:
20000554:	2300      	movs	r3, #0
20000556:	b510      	push	{r4, lr}
20000558:	429a      	cmp	r2, r3
2000055a:	d100      	bne.n	2000055e <memcpy+0xa>
2000055c:	bd10      	pop	{r4, pc}
2000055e:	5ccc      	ldrb	r4, [r1, r3]
20000560:	54c4      	strb	r4, [r0, r3]
20000562:	3301      	adds	r3, #1
20000564:	e7f8      	b.n	20000558 <memcpy+0x4>
	...

20000568 <rectangles>:
20000568:	0a140a0a 	beq	20502d98 <rectangles+0x502830>
2000056c:	140a1919 	strne	r1, [sl], #-2329	; 0xfffff6e7
20000570:	14461e28 	strbne	r1, [r6], #-3624	; 0xfffff1d8
20000574:	0a0a233c 	beq	2028926c <rectangles+0x288d04>
20000578:	05050a46 	streq	r0, [r5, #-2630]	; 0xfffff5ba

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000454 	andeq	r0, r0, r4, asr r4
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000000e0 	andeq	r0, r0, r0, ror #1
  10:	0000000c 	andeq	r0, r0, ip
  14:	0000b000 	andeq	fp, r0, r0
	...
  24:	01020200 	mrseq	r0, R10_usr
  28:	00450958 	subeq	r0, r5, r8, asr r9
  2c:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
  30:	075a0100 	ldrbeq	r0, [sl, -r0, lsl #2]
  34:	00000045 	andeq	r0, r0, r5, asr #32
  38:	00790300 	rsbseq	r0, r9, r0, lsl #6
  3c:	45095a01 	strmi	r5, [r9, #-2561]	; 0xfffff5ff
  40:	01000000 	mrseq	r0, (UNDEF: 0)
  44:	08010400 	stmdaeq	r1, {sl}
  48:	000000c9 	andeq	r0, r0, r9, asr #1
  4c:	00006005 	andeq	r6, r0, r5
  50:	035b0100 	cmpeq	fp, #0, 2
  54:	00000025 	andeq	r0, r0, r5, lsr #32
  58:	5d010402 	cfstrspl	mvf0, [r1, #-8]
  5c:	00007a09 	andeq	r7, r0, r9, lsl #20
  60:	30700300 	rsbscc	r0, r0, r0, lsl #6
  64:	085f0100 	ldmdaeq	pc, {r8}^	; <UNPREDICTABLE>
  68:	0000004c 	andeq	r0, r0, ip, asr #32
  6c:	31700300 	cmncc	r0, r0, lsl #6
  70:	08600100 	stmdaeq	r0!, {r8}^
  74:	0000004c 	andeq	r0, r0, ip, asr #32
  78:	ab050002 	blge	140088 <startup-0x1febff78>
  7c:	01000000 	mrseq	r0, (UNDEF: 0)
  80:	00580362 	subseq	r0, r8, r2, ror #6
  84:	aa050000 	bge	14008c <startup-0x1febff74>
  88:	01000000 	mrseq	r0, (UNDEF: 0)
  8c:	00920a62 	addseq	r0, r2, r2, ror #20
  90:	04060000 	streq	r0, [r6], #-0
  94:	00000058 	andeq	r0, r0, r8, asr r0
  98:	64010402 	strvs	r0, [r1], #-1026	; 0xfffffbfe
  9c:	0000c309 	andeq	ip, r0, r9, lsl #6
  a0:	00700300 	rsbseq	r0, r0, r0, lsl #6
  a4:	4c086601 	stcmi	6, cr6, [r8], {1}
  a8:	00000000 	andeq	r0, r0, r0
  ac:	01007803 	tsteq	r0, r3, lsl #16
  b0:	00450767 	subeq	r0, r5, r7, ror #14
  b4:	03020000 	movweq	r0, #8192	; 0x2000
  b8:	67010079 	smlsdxvs	r1, r9, r0, r0
  bc:	00004509 	andeq	r4, r0, r9, lsl #10
  c0:	05000300 	streq	r0, [r0, #-768]	; 0xfffffd00
  c4:	0000017d 	andeq	r0, r0, sp, ror r1
  c8:	98036901 	stmdals	r3, {r0, r8, fp, sp, lr}
  cc:	05000000 	streq	r0, [r0, #-0]
  d0:	0000017c 	andeq	r0, r0, ip, ror r1
  d4:	db0a6901 	blle	29a4e0 <startup-0x1fd65b20>
  d8:	06000000 	streq	r0, [r0], -r0
  dc:	00009804 	andeq	r9, r0, r4, lsl #16
  e0:	00c30700 	sbceq	r0, r3, r0, lsl #14
  e4:	00f10000 	rscseq	r0, r1, r0
  e8:	f1080000 	cpsie	
  ec:	04000000 	streq	r0, [r0], #-0
  f0:	07040400 	streq	r0, [r4, -r0, lsl #8]
  f4:	00000048 	andeq	r0, r0, r8, asr #32
  f8:	00005509 	andeq	r5, r0, r9, lsl #10
  fc:	06d30100 	ldrbeq	r0, [r3], r0, lsl #2
 100:	000000e1 	andeq	r0, r0, r1, ror #1
 104:	05680305 	strbeq	r0, [r8, #-773]!	; 0xfffffcfb
 108:	9b0a2000 	blls	288110 <startup-0x1fd77ef0>
 10c:	01000000 	mrseq	r0, (UNDEF: 0)
 110:	03fa06db 	mvnseq	r0, #229638144	; 0xdb00000
 114:	00422000 	subeq	r2, r2, r0
 118:	9c010000 	stcls	0, cr0, [r1], {-0}
 11c:	00000138 	andeq	r0, r0, r8, lsr r1
 120:	0004080b 	andeq	r0, r4, fp, lsl #16
 124:	00002a20 	andeq	r2, r0, r0, lsr #20
 128:	00690c00 	rsbeq	r0, r9, r0, lsl #24
 12c:	380ce201 	stmdacc	ip, {r0, r9, sp, lr, pc}
 130:	02000001 	andeq	r0, r0, #1
 134:	00007491 	muleq	r0, r1, r4
 138:	6905040d 	stmdbvs	r5, {r0, r2, r3, sl}
 13c:	0e00746e 	cdpeq	4, 0, cr7, cr0, cr14, {3}
 140:	00000172 	andeq	r0, r0, r2, ror r1
 144:	3805b001 	stmdacc	r5, {r0, ip, sp, pc}
 148:	68000001 	stmdavs	r0, {r0}
 14c:	92200002 	eorls	r0, r0, #2
 150:	01000001 	tsteq	r0, r1
 154:	0002069c 	muleq	r2, ip, r6
 158:	00720f00 	rsbseq	r0, r2, r0, lsl #30
 15c:	cf16b001 	svcgt	0x0016b001
 160:	02000000 	andeq	r0, r0, #0
 164:	3d104c91 	ldccc	12, cr4, [r0, #-580]	; 0xfffffdbc
 168:	01000000 	mrseq	r0, (UNDEF: 0)
 16c:	004c08b2 	strheq	r0, [ip], #-130	; 0xffffff7e
 170:	91020000 	mrsls	r0, (UNDEF: 2)
 174:	78640c60 	stmdavc	r4!, {r5, r6, sl, fp}^
 178:	07b30100 	ldreq	r0, [r3, r0, lsl #2]!
 17c:	00000045 	andeq	r0, r0, r5, asr #32
 180:	0c679102 	stfeqp	f1, [r7], #-8
 184:	01007964 	tsteq	r0, r4, ror #18
 188:	004507b4 	strheq	r0, [r5], #-116	; 0xffffff8c
 18c:	91020000 	mrsls	r0, (UNDEF: 2)
 190:	30780c66 	rsbscc	r0, r8, r6, ror #24
 194:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
 198:	00000045 	andeq	r0, r0, r5, asr #32
 19c:	0c659102 	stfeqp	f1, [r5], #-8
 1a0:	01003079 	tsteq	r0, r9, ror r0
 1a4:	004507b8 	strheq	r0, [r5], #-120	; 0xffffff88
 1a8:	91020000 	mrsls	r0, (UNDEF: 2)
 1ac:	31780c64 	cmncc	r8, r4, ror #24
 1b0:	07b90100 	ldreq	r0, [r9, r0, lsl #2]!
 1b4:	00000045 	andeq	r0, r0, r5, asr #32
 1b8:	0c639102 	stfeqp	f1, [r3], #-8
 1bc:	01003179 	tsteq	r0, r9, ror r1
 1c0:	004507ba 	strheq	r0, [r5], #-122	; 0xffffff86
 1c4:	91020000 	mrsls	r0, (UNDEF: 2)
 1c8:	00721062 	rsbseq	r1, r2, r2, rrx
 1cc:	bb010000 	bllt	401d4 <startup-0x1ffbfe2c>
 1d0:	00007a07 	andeq	r7, r0, r7, lsl #20
 1d4:	5c910200 	lfmpl	f0, 4, [r1], {0}
 1d8:	00006610 	andeq	r6, r0, r0, lsl r6
 1dc:	07c10100 	strbeq	r0, [r1, r0, lsl #2]
 1e0:	0000007a 	andeq	r0, r0, sl, ror r0
 1e4:	10589102 	subsne	r9, r8, r2, lsl #2
 1e8:	0000006c 	andeq	r0, r0, ip, rrx
 1ec:	7a07c701 	bvc	1f1df8 <startup-0x1fe0e208>
 1f0:	02000000 	andeq	r0, r0, #0
 1f4:	7d105491 	cfldrsvc	mvf5, [r0, #-580]	; 0xfffffdbc
 1f8:	01000000 	mrseq	r0, (UNDEF: 0)
 1fc:	007a07cd 	rsbseq	r0, sl, sp, asr #15
 200:	91020000 	mrsls	r0, (UNDEF: 2)
 204:	a00e0050 	andge	r0, lr, r0, asr r0
 208:	01000000 	mrseq	r0, (UNDEF: 0)
 20c:	01380575 	teqeq	r8, r5, ror r5
 210:	01180000 	tsteq	r8, r0
 214:	01502000 	cmpeq	r0, r0
 218:	9c010000 	stcls	0, cr0, [r1], {-0}
 21c:	00000321 	andeq	r0, r0, r1, lsr #6
 220:	01006c0f 	tsteq	r0, pc, lsl #24
 224:	00861675 	addeq	r1, r6, r5, ror r6
 228:	91030000 	mrsls	r0, (UNDEF: 3)
 22c:	3d107fb4 	ldccc	15, cr7, [r0, #-720]	; 0xfffffd30
 230:	01000000 	mrseq	r0, (UNDEF: 0)
 234:	004c0878 	subeq	r0, ip, r8, ror r8
 238:	91020000 	mrsls	r0, (UNDEF: 2)
 23c:	6e650c50 	mcrvs	12, 3, r0, cr5, cr0, {2}
 240:	79010064 	stmdbvc	r1, {r2, r5, r6}
 244:	00004c08 	andeq	r4, r0, r8, lsl #24
 248:	4c910200 	lfmmi	f0, 4, [r1], {0}
 24c:	0030780c 	eorseq	r7, r0, ip, lsl #16
 250:	38067b01 	stmdacc	r6, {r0, r8, r9, fp, ip, sp, lr}
 254:	02000001 	andeq	r0, r0, #1
 258:	780c4891 	stmdavc	ip, {r0, r4, r7, fp, lr}
 25c:	7c010031 	stcvc	0, cr0, [r1], {49}	; 0x31
 260:	00013806 	andeq	r3, r1, r6, lsl #16
 264:	44910200 	ldrmi	r0, [r1], #512	; 0x200
 268:	0030790c 	eorseq	r7, r0, ip, lsl #18
 26c:	38067d01 	stmdacc	r6, {r0, r8, sl, fp, ip, sp, lr}
 270:	02000001 	andeq	r0, r0, #1
 274:	790c4091 	stmdbvc	ip, {r0, r4, r7, lr}
 278:	7e010031 	mcrvc	0, 0, r0, cr1, cr1, {1}
 27c:	00013806 	andeq	r3, r1, r6, lsl #16
 280:	bc910300 	ldclt	3, cr0, [r1], {0}
 284:	00ce107f 	sbceq	r1, lr, pc, ror r0
 288:	80010000 	andhi	r0, r1, r0
 28c:	00013806 	andeq	r3, r1, r6, lsl #16
 290:	6c910200 	lfmvs	f0, 4, [r1], {0}
 294:	00008310 	andeq	r8, r0, r0, lsl r3
 298:	06930100 	ldreq	r0, [r3], r0, lsl #2
 29c:	00000138 	andeq	r0, r0, r8, lsr r1
 2a0:	10689102 	rsbne	r9, r8, r2, lsl #2
 2a4:	00000023 	andeq	r0, r0, r3, lsr #32
 2a8:	38069401 	stmdacc	r6, {r0, sl, ip, pc}
 2ac:	02000001 	andeq	r0, r0, #1
 2b0:	790c6491 	stmdbvc	ip, {r0, r4, r7, sl, sp, lr}
 2b4:	06950100 	ldreq	r0, [r5], r0, lsl #2
 2b8:	00000138 	andeq	r0, r0, r8, lsr r1
 2bc:	10609102 	rsbne	r9, r0, r2, lsl #2
 2c0:	0000015c 	andeq	r0, r0, ip, asr r1
 2c4:	38069601 	stmdacc	r6, {r0, r9, sl, ip, pc}
 2c8:	02000001 	andeq	r0, r0, #1
 2cc:	63105891 	tstvs	r0, #9502720	; 0x910000
 2d0:	01000001 	tsteq	r0, r1
 2d4:	01380697 	teqeq	r8, r7	; <illegal shifter operand>
 2d8:	91020000 	mrsls	r0, (UNDEF: 2)
 2dc:	62611154 	rsbvs	r1, r1, #84, 2
 2e0:	00020073 	andeq	r0, r2, r3, ror r0
 2e4:	00000138 	andeq	r0, r0, r8, lsr r1
 2e8:	000002ee 	andeq	r0, r0, lr, ror #5
 2ec:	62130012 	andsvs	r0, r3, #18
 2f0:	26200001 	strtcs	r0, [r0], -r1
 2f4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 2f8:	14000003 	strne	r0, [r0], #-3
 2fc:	00736261 	rsbseq	r6, r3, r1, ror #4
 300:	01380002 	teqeq	r8, r2
 304:	00120000 	andseq	r0, r2, r0
 308:	02080b00 	andeq	r0, r8, #0, 22
 30c:	00562000 	subseq	r2, r6, r0
 310:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
 314:	0a9e0100 	beq	fe78071c <rectangles+0xde7801b4>
 318:	00000138 	andeq	r0, r0, r8, lsr r1
 31c:	005c9102 	subseq	r9, ip, r2, lsl #2
 320:	00431500 	subeq	r1, r3, r0, lsl #10
 324:	6b010000 	blvs	4032c <startup-0x1ffbfcd4>
 328:	0000f206 	andeq	pc, r0, r6, lsl #4
 32c:	00002620 	andeq	r2, r0, r0, lsr #12
 330:	619c0100 	orrsvs	r0, ip, r0, lsl #2
 334:	0f000003 	svceq	0x00000003
 338:	6b010061 	blvs	404c4 <startup-0x1ffbfb3c>
 33c:	00036110 	andeq	r6, r3, r0, lsl r1
 340:	6c910200 	lfmvs	f0, 4, [r1], {0}
 344:	0100620f 	tsteq	r0, pc, lsl #4
 348:	0361186b 	cmneq	r1, #7012352	; 0x6b0000
 34c:	91020000 	mrsls	r0, (UNDEF: 2)
 350:	00781068 	rsbseq	r1, r8, r8, rrx
 354:	6d010000 	stcvs	0, cr0, [r1, #-0]
 358:	00013806 	andeq	r3, r1, r6, lsl #16
 35c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 360:	38040600 	stmdacc	r4, {r9, sl}
 364:	15000001 	strne	r0, [r0, #-1]
 368:	00000029 	andeq	r0, r0, r9, lsr #32
 36c:	ec065201 	sfm	f5, 4, [r6], {1}
 370:	06200000 	strteq	r0, [r0], -r0
 374:	01000000 	mrseq	r0, (UNDEF: 0)
 378:	0003969c 	muleq	r3, ip, r6
 37c:	00780f00 	rsbseq	r0, r8, r0, lsl #30
 380:	381f5201 	ldmdacc	pc, {r0, r9, ip, lr}	; <UNPREDICTABLE>
 384:	01000001 	tsteq	r0, r1
 388:	00790f50 	rsbseq	r0, r9, r0, asr pc
 38c:	38265201 	stmdacc	r6!, {r0, r9, ip, lr}
 390:	01000001 	tsteq	r0, r1
 394:	89150051 	ldmdbhi	r5, {r0, r4, r6}
 398:	01000000 	mrseq	r0, (UNDEF: 0)
 39c:	00e6064b 	rsceq	r0, r6, fp, asr #12
 3a0:	00062000 	andeq	r2, r6, r0
 3a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 3a8:	000003c5 	andeq	r0, r0, r5, asr #7
 3ac:	0100780f 	tsteq	r0, pc, lsl #16
 3b0:	01381d4b 	teqeq	r8, fp, asr #26
 3b4:	50010000 	andpl	r0, r1, r0
 3b8:	0100790f 	tsteq	r0, pc, lsl #18
 3bc:	0138244b 	teqeq	r8, fp, asr #8
 3c0:	51010000 	mrspl	r0, (UNDEF: 1)
 3c4:	018e1600 	orreq	r1, lr, r0, lsl #12
 3c8:	43010000 	movwmi	r0, #4096	; 0x1000
 3cc:	0000e006 	andeq	lr, r0, r6
 3d0:	00000620 	andeq	r0, r0, r0, lsr #12
 3d4:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 3d8:	000001af 	andeq	r0, r0, pc, lsr #3
 3dc:	da063c01 	ble	18f3e8 <startup-0x1fe70c18>
 3e0:	06200000 	strteq	r0, [r0], -r0
 3e4:	01000000 	mrseq	r0, (UNDEF: 0)
 3e8:	01820a9c 			; <UNDEFINED> instruction: 0x01820a9c
 3ec:	2f010000 	svccs	0x00010000
 3f0:	00009a06 	andeq	r9, r0, r6, lsl #20
 3f4:	00004020 	andeq	r4, r0, r0, lsr #32
 3f8:	0e9c0100 	fmleqe	f0, f4, f0
 3fc:	0f000004 	svceq	0x00000004
 400:	0100736d 	tsteq	r0, sp, ror #6
 404:	00f11f2f 	rscseq	r1, r1, pc, lsr #30
 408:	91020000 	mrsls	r0, (UNDEF: 2)
 40c:	a30a0074 	movwge	r0, #41076	; 0xa074
 410:	01000001 	tsteq	r0, r1
 414:	0054061f 	subseq	r0, r4, pc, lsl r6
 418:	00462000 	subeq	r2, r6, r0
 41c:	9c010000 	stcls	0, cr0, [r1], {-0}
 420:	00000433 	andeq	r0, r0, r3, lsr r4
 424:	0073750f 	rsbseq	r7, r3, pc, lsl #10
 428:	f11f1f01 			; <UNDEFINED> instruction: 0xf11f1f01
 42c:	02000000 	andeq	r0, r0, #0
 430:	16007491 			; <UNDEFINED> instruction: 0x16007491
 434:	000000d4 	ldrdeq	r0, [r0], -r4
 438:	10061301 	andne	r1, r6, r1, lsl #6
 43c:	44200000 	strtmi	r0, [r0], #-0
 440:	01000000 	mrseq	r0, (UNDEF: 0)
 444:	016a169c 			; <UNDEFINED> instruction: 0x016a169c
 448:	06010000 	streq	r0, [r1], -r0
 44c:	00000006 	andeq	r0, r0, r6
 450:	00000c20 	andeq	r0, r0, r0, lsr #24
 454:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0113 	bleq	2c0468 <startup-0x1fd3fb98>
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13010b39 	movwne	r0, #6969	; 0x1b39
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a080300 	bcc	200c2c <startup-0x1fdff3d4>
  28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  30:	0400000b 	streq	r0, [r0], #-11
  34:	0b0b0024 	bleq	2c00cc <startup-0x1fd3ff34>
  38:	0e030b3e 	vmoveq.16	d3[0], r0
  3c:	16050000 	strne	r0, [r5], -r0
  40:	3a0e0300 	bcc	380c48 <startup-0x1fc7f3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	0013490b 	andseq	r4, r3, fp, lsl #18
  4c:	000f0600 	andeq	r0, pc, r0, lsl #12
  50:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  54:	01070000 	mrseq	r0, (UNDEF: 7)
  58:	01134901 	tsteq	r3, r1, lsl #18
  5c:	08000013 	stmdaeq	r0, {r0, r1, r4}
  60:	13490021 	movtne	r0, #36897	; 0x9021
  64:	00000b2f 	andeq	r0, r0, pc, lsr #22
  68:	03003409 	movweq	r3, #1033	; 0x409
  6c:	3b0b3a0e 	blcc	2ce8ac <startup-0x1fd31754>
  70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  74:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  78:	0a000018 	beq	e0 <startup-0x1fffff20>
  7c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  80:	0b3a0e03 	bleq	e83894 <startup-0x1f17c76c>
  84:	0b390b3b 	bleq	e42d78 <startup-0x1f1bd288>
  88:	01111927 	tsteq	r1, r7, lsr #18
  8c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  90:	01194296 			; <UNDEFINED> instruction: 0x01194296
  94:	0b000013 	bleq	e8 <startup-0x1fffff18>
  98:	0111010b 	tsteq	r1, fp, lsl #2
  9c:	00000612 	andeq	r0, r0, r2, lsl r6
  a0:	0300340c 	movweq	r3, #1036	; 0x40c
  a4:	3b0b3a08 	blcc	2ce8cc <startup-0x1fd31734>
  a8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  ac:	00180213 	andseq	r0, r8, r3, lsl r2
  b0:	00240d00 	eoreq	r0, r4, r0, lsl #26
  b4:	0b3e0b0b 	bleq	f82ce8 <startup-0x1f07d318>
  b8:	00000803 	andeq	r0, r0, r3, lsl #16
  bc:	3f012e0e 	svccc	0x00012e0e
  c0:	3a0e0319 	bcc	380d2c <startup-0x1fc7f2d4>
  c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  cc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  d0:	96184006 	ldrls	r4, [r8], -r6
  d4:	13011942 	movwne	r1, #6466	; 0x1942
  d8:	050f0000 	streq	r0, [pc, #-0]	; e0 <startup-0x1fffff20>
  dc:	3a080300 	bcc	200ce4 <startup-0x1fdff31c>
  e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  e8:	10000018 	andne	r0, r0, r8, lsl r0
  ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  f0:	0b3b0b3a 	bleq	ec2de0 <startup-0x1f13d220>
  f4:	13490b39 	movtne	r0, #39737	; 0x9b39
  f8:	00001802 	andeq	r1, r0, r2, lsl #16
  fc:	3f012e11 	svccc	0x00012e11
 100:	3a080319 	bcc	200d6c <startup-0x1fdff294>
 104:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 108:	01193c13 	tsteq	r9, r3, lsl ip
 10c:	12000013 	andne	r0, r0, #19
 110:	00000018 	andeq	r0, r0, r8, lsl r0
 114:	11010b13 	tstne	r1, r3, lsl fp
 118:	01061201 	tsteq	r6, r1, lsl #4
 11c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 120:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 124:	0b3a0803 	bleq	e82138 <startup-0x1f17dec8>
 128:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 12c:	0000193c 	andeq	r1, r0, ip, lsr r9
 130:	3f012e15 	svccc	0x00012e15
 134:	3a0e0319 	bcc	380da0 <startup-0x1fc7f260>
 138:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 13c:	1119270b 	tstne	r9, fp, lsl #14
 140:	40061201 	andmi	r1, r6, r1, lsl #4
 144:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 148:	00001301 	andeq	r1, r0, r1, lsl #6
 14c:	3f002e16 	svccc	0x00002e16
 150:	3a0e0319 	bcc	380dbc <startup-0x1fc7f244>
 154:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 158:	1119270b 	tstne	r9, fp, lsl #14
 15c:	40061201 	andmi	r1, r6, r1, lsl #4
 160:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 164:	Address 0x00000164 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000042c 	andeq	r0, r0, ip, lsr #8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000043c 	andcs	r0, r0, ip, lsr r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000225 	andeq	r0, r0, r5, lsr #4
   4:	00470003 	subeq	r0, r7, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	44010000 	strmi	r0, [r1], #-0
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	616c2f70 	smcvs	49904	; 0xc2f0
  24:	61726f62 	cmnvs	r2, r2, ror #30
  28:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  2c:	352f7265 	strcc	r7, [pc, #-613]!	; fffffdcf <rectangles+0xdffff867>
  30:	0033312d 	eorseq	r3, r3, sp, lsr #2
  34:	61747300 	cmnvs	r4, r0, lsl #6
  38:	70757472 	rsbsvc	r7, r5, r2, ror r4
  3c:	0100632e 	tsteq	r0, lr, lsr #6
  40:	623c0000 	eorsvs	r0, ip, #0
  44:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
  48:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
  4c:	00000000 	andeq	r0, r0, r0
  50:	00010500 	andeq	r0, r1, r0, lsl #10
  54:	00000205 	andeq	r0, r0, r5, lsl #4
  58:	13182000 	tstne	r8, #0
  5c:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  60:	01000302 	tsteq	r0, r2, lsl #6
  64:	00010501 	andeq	r0, r1, r1, lsl #10
  68:	00100205 	andseq	r0, r0, r5, lsl #4
  6c:	13032000 	movwne	r2, #12288	; 0x3000
  70:	30050501 	andcc	r0, r5, r1, lsl #10
  74:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
  78:	0f052f05 	svceq	0x00052f05
  7c:	2f050520 	svccs	0x00050520
  80:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
  84:	0f052f05 	svceq	0x00052f05
  88:	300a0520 	andcc	r0, sl, r0, lsr #10
  8c:	02000d05 	andeq	r0, r0, #320	; 0x140
  90:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
  94:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
  98:	0a052e01 	beq	14b8a4 <startup-0x1feb475c>
  9c:	01040200 	mrseq	r0, R12_usr
  a0:	2105053c 	tstcs	r5, ip, lsr r5
  a4:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
  a8:	05a12f01 	streq	r2, [r1, #3841]!	; 0xf01
  ac:	07054c08 	streq	r4, [r5, -r8, lsl #24]
  b0:	3e0a0583 	cfsh32cc	mvfx0, mvfx10, #-61
  b4:	2f220905 	svccs	0x00220905
  b8:	0b052f2f 	bleq	14bd7c <startup-0x1feb4284>
  bc:	030a052f 	movweq	r0, #42287	; 0xa52f
  c0:	01053c7a 	tsteq	r5, sl, ror ip
  c4:	08055b44 	stmdaeq	r5, {r2, r6, r8, r9, fp, ip, lr}
  c8:	8307054c 	movwhi	r0, #30028	; 0x754c
  cc:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
  d0:	0b052209 	bleq	1488fc <startup-0x1feb7704>
  d4:	390a0559 	stmdbcc	sl, {r0, r3, r4, r6, r8, sl}
  d8:	5b410105 	blpl	10404f4 <startup-0x1efbfb0c>
  dc:	13210205 			; <UNDEFINED> instruction: 0x13210205
  e0:	24210105 	strtcs	r0, [r1], #-261	; 0xfffffefb
  e4:	13210205 			; <UNDEFINED> instruction: 0x13210205
  e8:	25210105 	strcs	r0, [r1, #-261]!	; 0xfffffefb
  ec:	13210205 			; <UNDEFINED> instruction: 0x13210205
  f0:	24210105 	strtcs	r0, [r1], #-261	; 0xfffffefb
  f4:	13210205 			; <UNDEFINED> instruction: 0x13210205
  f8:	03210105 			; <UNDEFINED> instruction: 0x03210105
  fc:	07052016 	smladeq	r5, r6, r0, r2
 100:	05053d5a 	streq	r3, [r5, #-3418]	; 0xfffff2a6
 104:	02052f2e 	andeq	r2, r5, #46, 30	; 0xb8
 108:	2101053d 	tstcs	r1, sp, lsr r5
 10c:	4c080540 	cfstr32mi	mvfx0, [r8], {64}	; 0x40
 110:	a0100591 	mulsge	r0, r1, r5
 114:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
 118:	0605210e 	streq	r2, [r5], -lr, lsl #2
 11c:	2110053c 	tstcs	r0, ip, lsr r5
 120:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 124:	0605210e 	streq	r2, [r5], -lr, lsl #2
 128:	240c052e 	strcs	r0, [ip], #-1326	; 0xfffffad2
 12c:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 130:	14053c1b 	strne	r3, [r5], #-3099	; 0xfffff3e5
 134:	3c04053c 	cfstr32cc	mvfx0, [r4], {60}	; 0x3c
 138:	3e2f0905 	vmulcc.f16	s0, s30, s10	; <UNPREDICTABLE>
 13c:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
 140:	05833e03 	streq	r3, [r3, #3587]	; 0xe03
 144:	04058508 	streq	r8, [r5], #-1288	; 0xfffffaf8
 148:	3003052e 	andcc	r0, r3, lr, lsr #10
 14c:	85060583 	strhi	r0, [r6, #-1411]	; 0xfffffa7d
 150:	2f120530 	svccs	0x00120530
 154:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 158:	06052f16 			; <UNDEFINED> instruction: 0x06052f16
 15c:	4c08053c 	cfstr32mi	mvfx0, [r8], {60}	; 0x3c
 160:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
 164:	053e2f09 	ldreq	r2, [lr, #-3849]!	; 0xfffff0f7
 168:	02053e0a 	andeq	r3, r5, #10, 28	; 0xa0
 16c:	2205052e 	andcs	r0, r5, #192937984	; 0xb800000
 170:	763d0405 	ldrtvc	r0, [sp], -r5, lsl #8
 174:	05680905 	strbeq	r0, [r8, #-2309]!	; 0xfffff6fb
 178:	05054c08 	streq	r4, [r5, #-3080]	; 0xfffff3f8
 17c:	3e06052e 	cfsh32cc	mvfx0, mvfx6, #30
 180:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 184:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 188:	4a740302 	bmi	1d00d98 <startup-0x1e2ff268>
 18c:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 190:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 194:	04020002 	streq	r0, [r2], #-2
 198:	01052001 	tsteq	r5, r1
 19c:	5b3c1003 	blpl	f041b0 <startup-0x1f0fbe50>
 1a0:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
 1a4:	5b599107 	blpl	16645c8 <startup-0x1e99ba38>
 1a8:	59110559 	ldmdbpl	r1, {r0, r3, r4, r6, r8, sl}
 1ac:	752e0705 	strvc	r0, [lr, #-1797]!	; 0xfffff8fb
 1b0:	08020559 	stmdaeq	r2, {r0, r3, r4, r6, r8, sl}
 1b4:	5b050567 	blpl	141758 <startup-0x1febe8a8>
 1b8:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 1bc:	07052e05 	streq	r2, [r5, -r5, lsl #28]
 1c0:	08020575 	stmdaeq	r2, {r0, r2, r4, r5, r6, r8, sl}
 1c4:	5b0c0559 	blpl	301730 <startup-0x1fcfe8d0>
 1c8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 1cc:	0505670c 	streq	r6, [r5, #-1804]	; 0xfffff8f4
 1d0:	6707052e 	strvs	r0, [r7, -lr, lsr #10]
 1d4:	75080205 	strvc	r0, [r8, #-517]	; 0xfffffdfb
 1d8:	055b0c05 	ldrbeq	r0, [fp, #-3077]	; 0xfffff3fb
 1dc:	05752e05 	ldrbeq	r2, [r5, #-3589]!	; 0xfffff1fb
 1e0:	02054b07 	andeq	r4, r5, #7168	; 0x1c00
 1e4:	01052f08 	tsteq	r5, r8, lsl #30
 1e8:	580b034d 	stmdapl	fp, {r0, r2, r3, r6, r8, r9}
 1ec:	2f3d0205 	svccs	0x003d0205
 1f0:	05320c05 	ldreq	r0, [r2, #-3077]!	; 0xfffff3fb
 1f4:	0f052e03 	svceq	0x00052e03
 1f8:	03040200 	movweq	r0, #16896	; 0x4200
 1fc:	00040522 	andeq	r0, r4, r2, lsr #10
 200:	4a030402 	bmi	c1210 <startup-0x1ff3edf0>
 204:	03040200 	movweq	r0, #16896	; 0x4200
 208:	003a053d 	eorseq	r0, sl, sp, lsr r5
 20c:	55030402 	strpl	r0, [r3, #-1026]	; 0xfffffbfe
 210:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 214:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 218:	04020003 	streq	r0, [r2], #-3
 21c:	04052001 	streq	r2, [r5], #-1
 220:	29030533 	stmdbcs	r3, {r0, r1, r4, r5, r8, sl}
 224:	01000302 	tsteq	r0, r2, lsl #6
 228:	Address 0x00000228 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6d2f3a44 	vstmdbvs	pc!, {s6-s73}
   4:	6c2f706f 	stcvs	0, cr7, [pc], #-444	; fffffe50 <rectangles+0xdffff8e8>
   8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
   c:	6f697461 	svcvs	0x00697461
  10:	2f72656e 	svccs	0x0072656e
  14:	33312d35 	teqcc	r1, #3392	; 0xd40
  18:	6174732f 	cmnvs	r4, pc, lsr #6
  1c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  20:	7900632e 	stmdbvc	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
  24:	70657473 	rsbvc	r7, r5, r3, ror r4
  28:	61726700 	cmnvs	r2, r0, lsl #14
  2c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  30:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
  34:	635f6c65 	cmpvs	pc, #25856	; 0x6500
  38:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  3c:	61747300 	cmnvs	r4, r0, lsl #6
  40:	73007472 	movwvc	r7, #1138	; 0x472
  44:	00706177 	rsbseq	r6, r0, r7, ror r1
  48:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  4c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  50:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  54:	63657200 	cmnvs	r5, #0, 4
  58:	676e6174 			; <UNDEFINED> instruction: 0x676e6174
  5c:	0073656c 	rsbseq	r6, r3, ip, ror #10
  60:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
  64:	696c0054 	stmdbvs	ip!, {r2, r4, r6}^
  68:	0032656e 	eorseq	r6, r2, lr, ror #10
  6c:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
  70:	696c0033 	stmdbvs	ip!, {r0, r1, r4, r5}^
  74:	0031656e 	eorseq	r6, r1, lr, ror #10
  78:	706d6574 	rsbvc	r6, sp, r4, ror r5
  7c:	6e696c00 	cdpvs	12, 6, cr6, cr9, cr0, {0}
  80:	65003465 	strvs	r3, [r0, #-1125]	; 0xfffffb9b
  84:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
  88:	61726700 	cmnvs	r2, r0, lsl #14
  8c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  90:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
  94:	735f6c65 	cmpvc	pc, #25856	; 0x6500
  98:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
  9c:	006e6961 	rsbeq	r6, lr, r1, ror #18
  a0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  a4:	6e696c5f 	mcrvs	12, 3, r6, cr9, cr15, {2}
  a8:	4c500065 	mrrcmi	0, 6, r0, r0, cr5	; <UNPREDICTABLE>
  ac:	00454e49 	subeq	r4, r5, r9, asr #28
  b0:	6d5c3a44 	vldrvs	s7, [ip, #-272]	; 0xfffffef0
  b4:	6c5c706f 	mrrcvs	0, 6, r7, ip, cr15
  b8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  bc:	6f697461 	svcvs	0x00697461
  c0:	5c72656e 	cfldr64pl	mvdx6, [r2], #-440	; 0xfffffe48
  c4:	33312d35 	teqcc	r1, #3392	; 0xd40
  c8:	61686300 	cmnvs	r8, r0, lsl #6
  cc:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
  d0:	00706565 	rsbseq	r6, r0, r5, ror #10
  d4:	616c6564 	cmnvs	ip, r4, ror #10
  d8:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
  dc:	00736e30 	rsbseq	r6, r3, r0, lsr lr
  e0:	20554e47 	subscs	r4, r5, r7, asr #28
  e4:	20393943 	eorscs	r3, r9, r3, asr #18
  e8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
  ec:	30322031 	eorscc	r2, r2, r1, lsr r0
  f0:	30313931 	eorscc	r3, r1, r1, lsr r9
  f4:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
  f8:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  fc:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 100:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 104:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
 108:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
 10c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 110:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 114:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 118:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 11c:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
 120:	205d3939 	subscs	r3, sp, r9, lsr r9
 124:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 128:	20626d75 	rsbcs	r6, r2, r5, ror sp
 12c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 130:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 134:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 138:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 13c:	616d2d20 	cmnvs	sp, r0, lsr #26
 140:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 144:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 148:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 14c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 150:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 154:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 158:	00393963 	eorseq	r3, r9, r3, ror #18
 15c:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
 160:	64007861 	strvs	r7, [r0], #-2145	; 0xfffff79f
 164:	61746c65 	cmnvs	r4, r5, ror #24
 168:	74730079 	ldrbtvc	r0, [r3], #-121	; 0xffffff87
 16c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 170:	72640070 	rsbvc	r0, r4, #112	; 0x70
 174:	725f7761 	subsvc	r7, pc, #25427968	; 0x1840000
 178:	00746365 	rsbseq	r6, r4, r5, ror #6
 17c:	43455250 	movtmi	r5, #21072	; 0x5250
 180:	65640054 	strbvs	r0, [r4, #-84]!	; 0xffffffac
 184:	5f79616c 	svcpl	0x0079616c
 188:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 18c:	72670069 	rsbvc	r0, r7, #105	; 0x69
 190:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 194:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 198:	5f726165 	svcpl	0x00726165
 19c:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 1a0:	64006e65 	strvs	r6, [r0], #-3685	; 0xfffff19b
 1a4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1a8:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 1ac:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
 1b0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1b4:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 1b8:	6174696e 	cmnvs	r4, lr, ror #18
 1bc:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	00000046 	andeq	r0, r0, r6, asr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	2000009a 	mulcs	r0, sl, r0
  68:	00000040 	andeq	r0, r0, r0, asr #32
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	0000000c 	andeq	r0, r0, ip
  80:	00000000 	andeq	r0, r0, r0
  84:	200000da 	ldrdcs	r0, [r0], -sl
  88:	00000006 	andeq	r0, r0, r6
  8c:	0000000c 	andeq	r0, r0, ip
  90:	00000000 	andeq	r0, r0, r0
  94:	200000e0 	andcs	r0, r0, r0, ror #1
  98:	00000006 	andeq	r0, r0, r6
  9c:	0000000c 	andeq	r0, r0, ip
  a0:	00000000 	andeq	r0, r0, r0
  a4:	200000e6 	andcs	r0, r0, r6, ror #1
  a8:	00000006 	andeq	r0, r0, r6
  ac:	0000000c 	andeq	r0, r0, ip
  b0:	00000000 	andeq	r0, r0, r0
  b4:	200000ec 	andcs	r0, r0, ip, ror #1
  b8:	00000006 	andeq	r0, r0, r6
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	200000f2 	strdcs	r0, [r0], -r2
  c8:	00000026 	andeq	r0, r0, r6, lsr #32
  cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d0:	41018e02 	tstmi	r1, r2, lsl #28
  d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d8:	00000007 	andeq	r0, r0, r7
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	00000000 	andeq	r0, r0, r0
  e4:	20000118 	andcs	r0, r0, r8, lsl r1
  e8:	00000150 	andeq	r0, r0, r0, asr r1
  ec:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  f0:	87038504 	strhi	r8, [r3, -r4, lsl #10]
  f4:	41018e02 	tstmi	r1, r2, lsl #28
  f8:	0d41500e 	stcleq	0, cr5, [r1, #-56]	; 0xffffffc8
  fc:	00000007 	andeq	r0, r0, r7
 100:	00000020 	andeq	r0, r0, r0, lsr #32
 104:	00000000 	andeq	r0, r0, r0
 108:	20000268 	andcs	r0, r0, r8, ror #4
 10c:	00000192 	muleq	r0, r2, r1
 110:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 114:	86048505 	strhi	r8, [r4], -r5, lsl #10
 118:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 11c:	380e4101 	stmdacc	lr, {r0, r8, lr}
 120:	00070d41 	andeq	r0, r7, r1, asr #26
 124:	0000001c 	andeq	r0, r0, ip, lsl r0
 128:	00000000 	andeq	r0, r0, r0
 12c:	200003fa 	strdcs	r0, [r0], -sl
 130:	00000042 	andeq	r0, r0, r2, asr #32
 134:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 138:	41018e02 	tstmi	r1, r2, lsl #28
 13c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 140:	00000007 	andeq	r0, r0, r7
 144:	0000000c 	andeq	r0, r0, ip
 148:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 14c:	7c010001 	stcvc	0, cr0, [r1], {1}
 150:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 154:	0000000c 	andeq	r0, r0, ip
 158:	00000144 	andeq	r0, r0, r4, asr #2
 15c:	2000043d 	andcs	r0, r0, sp, lsr r4
 160:	0000010a 	andeq	r0, r0, sl, lsl #2
 164:	0000000c 	andeq	r0, r0, ip
 168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 16c:	7c020001 	stcvc	0, cr0, [r2], {1}
 170:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 174:	00000014 	andeq	r0, r0, r4, lsl r0
 178:	00000164 	andeq	r0, r0, r4, ror #2
 17c:	20000554 	andcs	r0, r0, r4, asr r5
 180:	00000012 	andeq	r0, r0, r2, lsl r0
 184:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 188:	00018e02 	andeq	r8, r1, r2, lsl #28
