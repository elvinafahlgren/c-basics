
Debug/200821_uppg2_keypad:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 *
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f970 	bl	200002e8 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <app_init>:
#define GPIO_D_ODR_LOW 		((volatile unsigned char *) (PORT_D_BASE + 0x14)) 
#define GPIO_D_ODR_HIGH 	((volatile unsigned char *) (PORT_D_BASE + 0x15))


void app_init(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    * GPIO_D_MODER |= 0x55005555;  		// GPIO_D_MODER initieras
20000014:	4b11      	ldr	r3, [pc, #68]	; (2000005c <app_init+0x4c>)
20000016:	681a      	ldr	r2, [r3, #0]
20000018:	4b10      	ldr	r3, [pc, #64]	; (2000005c <app_init+0x4c>)
2000001a:	4911      	ldr	r1, [pc, #68]	; (20000060 <app_init+0x50>)
2000001c:	430a      	orrs	r2, r1
2000001e:	601a      	str	r2, [r3, #0]
    * GPIO_D_OTYPER &= 0x00FF;       	// GPIO_D_OTYPER nollställs & initieras
20000020:	4b10      	ldr	r3, [pc, #64]	; (20000064 <app_init+0x54>)
20000022:	881b      	ldrh	r3, [r3, #0]
20000024:	b29b      	uxth	r3, r3
20000026:	4a0f      	ldr	r2, [pc, #60]	; (20000064 <app_init+0x54>)
20000028:	21ff      	movs	r1, #255	; 0xff
2000002a:	400b      	ands	r3, r1
2000002c:	b29b      	uxth	r3, r3
2000002e:	8013      	strh	r3, [r2, #0]
    
    * GPIO_D_PUPDR &= 0x0000FFFF;       // GPIO_D_PUPDR nollställs
20000030:	4b0d      	ldr	r3, [pc, #52]	; (20000068 <app_init+0x58>)
20000032:	681a      	ldr	r2, [r3, #0]
20000034:	4b0c      	ldr	r3, [pc, #48]	; (20000068 <app_init+0x58>)
20000036:	0412      	lsls	r2, r2, #16
20000038:	0c12      	lsrs	r2, r2, #16
2000003a:	601a      	str	r2, [r3, #0]
    * GPIO_D_PUPDR |= 0x00AA0000;       // GPIO_D_PUPDR initieras
2000003c:	4b0a      	ldr	r3, [pc, #40]	; (20000068 <app_init+0x58>)
2000003e:	681a      	ldr	r2, [r3, #0]
20000040:	4b09      	ldr	r3, [pc, #36]	; (20000068 <app_init+0x58>)
20000042:	21aa      	movs	r1, #170	; 0xaa
20000044:	0409      	lsls	r1, r1, #16
20000046:	430a      	orrs	r2, r1
20000048:	601a      	str	r2, [r3, #0]

    /* Nollställ output */
	* GPIO_D_ODR_HIGH = 0x0;
2000004a:	4b08      	ldr	r3, [pc, #32]	; (2000006c <app_init+0x5c>)
2000004c:	2200      	movs	r2, #0
2000004e:	701a      	strb	r2, [r3, #0]
	* GPIO_D_ODR_LOW = 0x0;
20000050:	4b07      	ldr	r3, [pc, #28]	; (20000070 <app_init+0x60>)
20000052:	2200      	movs	r2, #0
20000054:	701a      	strb	r2, [r3, #0]
}
20000056:	46c0      	nop			; (mov r8, r8)
20000058:	46bd      	mov	sp, r7
2000005a:	bd80      	pop	{r7, pc}
2000005c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000060:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000064:	40020c04 	andmi	r0, r2, r4, lsl #24
20000068:	40020c0c 	andmi	r0, r2, ip, lsl #24
2000006c:	40020c15 	andmi	r0, r2, r5, lsl ip
20000070:	40020c14 	andmi	r0, r2, r4, lsl ip

20000074 <ActivateRow>:

void ActivateRow(unsigned int row){
20000074:	b580      	push	{r7, lr}
20000076:	b082      	sub	sp, #8
20000078:	af00      	add	r7, sp, #0
2000007a:	6078      	str	r0, [r7, #4]
    switch (row) {
2000007c:	687b      	ldr	r3, [r7, #4]
2000007e:	2b04      	cmp	r3, #4
20000080:	d01b      	beq.n	200000ba <ActivateRow+0x46>
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	2b04      	cmp	r3, #4
20000086:	d81c      	bhi.n	200000c2 <ActivateRow+0x4e>
20000088:	687b      	ldr	r3, [r7, #4]
2000008a:	2b03      	cmp	r3, #3
2000008c:	d011      	beq.n	200000b2 <ActivateRow+0x3e>
2000008e:	687b      	ldr	r3, [r7, #4]
20000090:	2b03      	cmp	r3, #3
20000092:	d816      	bhi.n	200000c2 <ActivateRow+0x4e>
20000094:	687b      	ldr	r3, [r7, #4]
20000096:	2b01      	cmp	r3, #1
20000098:	d003      	beq.n	200000a2 <ActivateRow+0x2e>
2000009a:	687b      	ldr	r3, [r7, #4]
2000009c:	2b02      	cmp	r3, #2
2000009e:	d004      	beq.n	200000aa <ActivateRow+0x36>
200000a0:	e00f      	b.n	200000c2 <ActivateRow+0x4e>
        case 1: * GPIO_D_ODR_HIGH = 0x10; break;
200000a2:	4b0c      	ldr	r3, [pc, #48]	; (200000d4 <ActivateRow+0x60>)
200000a4:	2210      	movs	r2, #16
200000a6:	701a      	strb	r2, [r3, #0]
200000a8:	e00f      	b.n	200000ca <ActivateRow+0x56>
        case 2: * GPIO_D_ODR_HIGH = 0x20; break;
200000aa:	4b0a      	ldr	r3, [pc, #40]	; (200000d4 <ActivateRow+0x60>)
200000ac:	2220      	movs	r2, #32
200000ae:	701a      	strb	r2, [r3, #0]
200000b0:	e00b      	b.n	200000ca <ActivateRow+0x56>
        case 3: * GPIO_D_ODR_HIGH = 0x40; break;
200000b2:	4b08      	ldr	r3, [pc, #32]	; (200000d4 <ActivateRow+0x60>)
200000b4:	2240      	movs	r2, #64	; 0x40
200000b6:	701a      	strb	r2, [r3, #0]
200000b8:	e007      	b.n	200000ca <ActivateRow+0x56>
        case 4: * GPIO_D_ODR_HIGH = 0x80; break;
200000ba:	4b06      	ldr	r3, [pc, #24]	; (200000d4 <ActivateRow+0x60>)
200000bc:	2280      	movs	r2, #128	; 0x80
200000be:	701a      	strb	r2, [r3, #0]
200000c0:	e003      	b.n	200000ca <ActivateRow+0x56>
        default: *GPIO_D_ODR_HIGH = 0;
200000c2:	4b04      	ldr	r3, [pc, #16]	; (200000d4 <ActivateRow+0x60>)
200000c4:	2200      	movs	r2, #0
200000c6:	701a      	strb	r2, [r3, #0]
    }
}  
200000c8:	46c0      	nop			; (mov r8, r8)
200000ca:	46c0      	nop			; (mov r8, r8)
200000cc:	46bd      	mov	sp, r7
200000ce:	b002      	add	sp, #8
200000d0:	bd80      	pop	{r7, pc}
200000d2:	46c0      	nop			; (mov r8, r8)
200000d4:	40020c15 	andmi	r0, r2, r5, lsl ip

200000d8 <ReadColumn>:

int ReadColumn(void){
200000d8:	b580      	push	{r7, lr}
200000da:	b082      	sub	sp, #8
200000dc:	af00      	add	r7, sp, #0
    unsigned char c;
    c = * GPIO_D_IDR_HIGH;
200000de:	4a12      	ldr	r2, [pc, #72]	; (20000128 <ReadColumn+0x50>)
200000e0:	1dfb      	adds	r3, r7, #7
200000e2:	7812      	ldrb	r2, [r2, #0]
200000e4:	701a      	strb	r2, [r3, #0]
    if ( c & 0x8 ) 
200000e6:	1dfb      	adds	r3, r7, #7
200000e8:	781b      	ldrb	r3, [r3, #0]
200000ea:	2208      	movs	r2, #8
200000ec:	4013      	ands	r3, r2
200000ee:	d001      	beq.n	200000f4 <ReadColumn+0x1c>
        return 0x4;
200000f0:	2304      	movs	r3, #4
200000f2:	e015      	b.n	20000120 <ReadColumn+0x48>
    if ( c & 0x4 ) 
200000f4:	1dfb      	adds	r3, r7, #7
200000f6:	781b      	ldrb	r3, [r3, #0]
200000f8:	2204      	movs	r2, #4
200000fa:	4013      	ands	r3, r2
200000fc:	d001      	beq.n	20000102 <ReadColumn+0x2a>
        return 0x3;
200000fe:	2303      	movs	r3, #3
20000100:	e00e      	b.n	20000120 <ReadColumn+0x48>
    if ( c & 0x2 ) 
20000102:	1dfb      	adds	r3, r7, #7
20000104:	781b      	ldrb	r3, [r3, #0]
20000106:	2202      	movs	r2, #2
20000108:	4013      	ands	r3, r2
2000010a:	d001      	beq.n	20000110 <ReadColumn+0x38>
        return 0x2;
2000010c:	2302      	movs	r3, #2
2000010e:	e007      	b.n	20000120 <ReadColumn+0x48>
    if ( c & 0x1 ) 
20000110:	1dfb      	adds	r3, r7, #7
20000112:	781b      	ldrb	r3, [r3, #0]
20000114:	2201      	movs	r2, #1
20000116:	4013      	ands	r3, r2
20000118:	d001      	beq.n	2000011e <ReadColumn+0x46>
        return 0x1;
2000011a:	2301      	movs	r3, #1
2000011c:	e000      	b.n	20000120 <ReadColumn+0x48>
    return 0;
2000011e:	2300      	movs	r3, #0
}      
20000120:	0018      	movs	r0, r3
20000122:	46bd      	mov	sp, r7
20000124:	b002      	add	sp, #8
20000126:	bd80      	pop	{r7, pc}
20000128:	40020c11 	andmi	r0, r2, r1, lsl ip

2000012c <keyb>:


unsigned char keyb(void){
2000012c:	b590      	push	{r4, r7, lr}
2000012e:	b087      	sub	sp, #28
20000130:	af00      	add	r7, sp, #0
    unsigned char key[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20000132:	003b      	movs	r3, r7
20000134:	4a16      	ldr	r2, [pc, #88]	; (20000190 <keyb+0x64>)
20000136:	ca13      	ldmia	r2!, {r0, r1, r4}
20000138:	c313      	stmia	r3!, {r0, r1, r4}
2000013a:	6812      	ldr	r2, [r2, #0]
2000013c:	601a      	str	r2, [r3, #0]
    unsigned int row, col;
    for (int row = 1; row <= 4; row++){
2000013e:	2301      	movs	r3, #1
20000140:	617b      	str	r3, [r7, #20]
20000142:	e01a      	b.n	2000017a <keyb+0x4e>
        ActivateRow(row);
20000144:	697b      	ldr	r3, [r7, #20]
20000146:	0018      	movs	r0, r3
20000148:	f7ff ff94 	bl	20000074 <ActivateRow>
        col = ReadColumn();
2000014c:	f7ff ffc4 	bl	200000d8 <ReadColumn>
20000150:	0003      	movs	r3, r0
20000152:	613b      	str	r3, [r7, #16]
        if  (col != 0 ){
20000154:	693b      	ldr	r3, [r7, #16]
20000156:	2b00      	cmp	r3, #0
20000158:	d00c      	beq.n	20000174 <keyb+0x48>
            ActivateRow(0);
2000015a:	2000      	movs	r0, #0
2000015c:	f7ff ff8a 	bl	20000074 <ActivateRow>
            return key [ 4 * (row-1) + (col-1) ];
20000160:	697b      	ldr	r3, [r7, #20]
20000162:	3b01      	subs	r3, #1
20000164:	009b      	lsls	r3, r3, #2
20000166:	001a      	movs	r2, r3
20000168:	693b      	ldr	r3, [r7, #16]
2000016a:	18d3      	adds	r3, r2, r3
2000016c:	3b01      	subs	r3, #1
2000016e:	003a      	movs	r2, r7
20000170:	5cd3      	ldrb	r3, [r2, r3]
20000172:	e009      	b.n	20000188 <keyb+0x5c>
    for (int row = 1; row <= 4; row++){
20000174:	697b      	ldr	r3, [r7, #20]
20000176:	3301      	adds	r3, #1
20000178:	617b      	str	r3, [r7, #20]
2000017a:	697b      	ldr	r3, [r7, #20]
2000017c:	2b04      	cmp	r3, #4
2000017e:	dde1      	ble.n	20000144 <keyb+0x18>
        }
    }
    ActivateRow(0);
20000180:	2000      	movs	r0, #0
20000182:	f7ff ff77 	bl	20000074 <ActivateRow>
    return 0xFF;
20000186:	23ff      	movs	r3, #255	; 0xff
}
20000188:	0018      	movs	r0, r3
2000018a:	46bd      	mov	sp, r7
2000018c:	b007      	add	sp, #28
2000018e:	bd90      	pop	{r4, r7, pc}
20000190:	20000334 	andcs	r0, r0, r4, lsr r3

20000194 <out7seg>:

void out7seg( unsigned char c ){
20000194:	b580      	push	{r7, lr}
20000196:	b082      	sub	sp, #8
20000198:	af00      	add	r7, sp, #0
2000019a:	0002      	movs	r2, r0
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	701a      	strb	r2, [r3, #0]
    static unsigned char segCode[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x67,0x77,0x7C,0x39,0x5E,0x79,0x71};
    if ( c > 15 ) {
200001a0:	1dfb      	adds	r3, r7, #7
200001a2:	781b      	ldrb	r3, [r3, #0]
200001a4:	2b0f      	cmp	r3, #15
200001a6:	d903      	bls.n	200001b0 <out7seg+0x1c>
        * GPIO_D_ODR_LOW = 0;
200001a8:	4b06      	ldr	r3, [pc, #24]	; (200001c4 <out7seg+0x30>)
200001aa:	2200      	movs	r2, #0
200001ac:	701a      	strb	r2, [r3, #0]
        return;
200001ae:	e005      	b.n	200001bc <out7seg+0x28>
    }
    * GPIO_D_ODR_LOW = segCode[c];
200001b0:	1dfb      	adds	r3, r7, #7
200001b2:	781b      	ldrb	r3, [r3, #0]
200001b4:	4903      	ldr	r1, [pc, #12]	; (200001c4 <out7seg+0x30>)
200001b6:	4a04      	ldr	r2, [pc, #16]	; (200001c8 <out7seg+0x34>)
200001b8:	5cd3      	ldrb	r3, [r2, r3]
200001ba:	700b      	strb	r3, [r1, #0]
}
200001bc:	46bd      	mov	sp, r7
200001be:	b002      	add	sp, #8
200001c0:	bd80      	pop	{r7, pc}
200001c2:	46c0      	nop			; (mov r8, r8)
200001c4:	40020c14 	andmi	r0, r2, r4, lsl ip
200001c8:	20000324 	andcs	r0, r0, r4, lsr #6

200001cc <keycode>:

    

char keycode( void )
{
200001cc:	b590      	push	{r4, r7, lr}
200001ce:	b083      	sub	sp, #12
200001d0:	af00      	add	r7, sp, #0
	char c;
	while( (c = keyb()) == 0xFF );
200001d2:	46c0      	nop			; (mov r8, r8)
200001d4:	1dfc      	adds	r4, r7, #7
200001d6:	f7ff ffa9 	bl	2000012c <keyb>
200001da:	0003      	movs	r3, r0
200001dc:	7023      	strb	r3, [r4, #0]
200001de:	1dfb      	adds	r3, r7, #7
200001e0:	781b      	ldrb	r3, [r3, #0]
200001e2:	2bff      	cmp	r3, #255	; 0xff
200001e4:	d0f6      	beq.n	200001d4 <keycode+0x8>
	char code = c;
200001e6:	1dbb      	adds	r3, r7, #6
200001e8:	1dfa      	adds	r2, r7, #7
200001ea:	7812      	ldrb	r2, [r2, #0]
200001ec:	701a      	strb	r2, [r3, #0]
	while( (c = keyb()) != 0xFF );
200001ee:	46c0      	nop			; (mov r8, r8)
200001f0:	1dfc      	adds	r4, r7, #7
200001f2:	f7ff ff9b 	bl	2000012c <keyb>
200001f6:	0003      	movs	r3, r0
200001f8:	7023      	strb	r3, [r4, #0]
200001fa:	1dfb      	adds	r3, r7, #7
200001fc:	781b      	ldrb	r3, [r3, #0]
200001fe:	2bff      	cmp	r3, #255	; 0xff
20000200:	d1f6      	bne.n	200001f0 <keycode+0x24>
	return code;
20000202:	1dbb      	adds	r3, r7, #6
20000204:	781b      	ldrb	r3, [r3, #0]
}
20000206:	0018      	movs	r0, r3
20000208:	46bd      	mov	sp, r7
2000020a:	b003      	add	sp, #12
2000020c:	bd90      	pop	{r4, r7, pc}

2000020e <get_valid_value>:

char get_valid_value( void )
{
2000020e:	b590      	push	{r4, r7, lr}
20000210:	b083      	sub	sp, #12
20000212:	af00      	add	r7, sp, #0
	char code1, code2;
	do{
		code1 = keycode();
20000214:	1dfc      	adds	r4, r7, #7
20000216:	f7ff ffd9 	bl	200001cc <keycode>
2000021a:	0003      	movs	r3, r0
2000021c:	7023      	strb	r3, [r4, #0]
	}while( code1 >= 10 );
2000021e:	1dfb      	adds	r3, r7, #7
20000220:	781b      	ldrb	r3, [r3, #0]
20000222:	2b09      	cmp	r3, #9
20000224:	d8f6      	bhi.n	20000214 <get_valid_value+0x6>
		
	do{
		code2 = keycode();
20000226:	1dbc      	adds	r4, r7, #6
20000228:	f7ff ffd0 	bl	200001cc <keycode>
2000022c:	0003      	movs	r3, r0
2000022e:	7023      	strb	r3, [r4, #0]
	}while( code1 >= 10 );
20000230:	1dfb      	adds	r3, r7, #7
20000232:	781b      	ldrb	r3, [r3, #0]
20000234:	2b09      	cmp	r3, #9
20000236:	d8f6      	bhi.n	20000226 <get_valid_value+0x18>
	
	return ((code1 << 4) | code1);
20000238:	1dfb      	adds	r3, r7, #7
2000023a:	781b      	ldrb	r3, [r3, #0]
2000023c:	011b      	lsls	r3, r3, #4
2000023e:	b25a      	sxtb	r2, r3
20000240:	1dfb      	adds	r3, r7, #7
20000242:	781b      	ldrb	r3, [r3, #0]
20000244:	b25b      	sxtb	r3, r3
20000246:	4313      	orrs	r3, r2
20000248:	b25b      	sxtb	r3, r3
2000024a:	b2db      	uxtb	r3, r3
}
2000024c:	0018      	movs	r0, r3
2000024e:	46bd      	mov	sp, r7
20000250:	b003      	add	sp, #12
20000252:	bd90      	pop	{r4, r7, pc}

20000254 <get_valid_method>:

char get_valid_method( void )
{
20000254:	b590      	push	{r4, r7, lr}
20000256:	b083      	sub	sp, #12
20000258:	af00      	add	r7, sp, #0
	char code;
	do{
		code = keycode();
2000025a:	1dfc      	adds	r4, r7, #7
2000025c:	f7ff ffb6 	bl	200001cc <keycode>
20000260:	0003      	movs	r3, r0
20000262:	7023      	strb	r3, [r4, #0]
	}while( code <= 10 || code == 14 || code == 15);
20000264:	1dfb      	adds	r3, r7, #7
20000266:	781b      	ldrb	r3, [r3, #0]
20000268:	2b0a      	cmp	r3, #10
2000026a:	d9f6      	bls.n	2000025a <get_valid_method+0x6>
2000026c:	1dfb      	adds	r3, r7, #7
2000026e:	781b      	ldrb	r3, [r3, #0]
20000270:	2b0e      	cmp	r3, #14
20000272:	d0f2      	beq.n	2000025a <get_valid_method+0x6>
20000274:	1dfb      	adds	r3, r7, #7
20000276:	781b      	ldrb	r3, [r3, #0]
20000278:	2b0f      	cmp	r3, #15
2000027a:	d0ee      	beq.n	2000025a <get_valid_method+0x6>
		
	return code;
2000027c:	1dfb      	adds	r3, r7, #7
2000027e:	781b      	ldrb	r3, [r3, #0]
}
20000280:	0018      	movs	r0, r3
20000282:	46bd      	mov	sp, r7
20000284:	b003      	add	sp, #12
20000286:	bd90      	pop	{r4, r7, pc}

20000288 <valconvert>:

char valconvert( char method, char value )
{
20000288:	b580      	push	{r7, lr}
2000028a:	b082      	sub	sp, #8
2000028c:	af00      	add	r7, sp, #0
2000028e:	0002      	movs	r2, r0
20000290:	1dfb      	adds	r3, r7, #7
20000292:	701a      	strb	r2, [r3, #0]
20000294:	1dbb      	adds	r3, r7, #6
20000296:	1c0a      	adds	r2, r1, #0
20000298:	701a      	strb	r2, [r3, #0]
	if( method == 0xA )
2000029a:	1dfb      	adds	r3, r7, #7
2000029c:	781b      	ldrb	r3, [r3, #0]
2000029e:	2b0a      	cmp	r3, #10
200002a0:	d102      	bne.n	200002a8 <valconvert+0x20>
		return value;
200002a2:	1dbb      	adds	r3, r7, #6
200002a4:	781b      	ldrb	r3, [r3, #0]
200002a6:	e01b      	b.n	200002e0 <valconvert+0x58>
	
	if( method == 0xB )
200002a8:	1dfb      	adds	r3, r7, #7
200002aa:	781b      	ldrb	r3, [r3, #0]
200002ac:	2b0b      	cmp	r3, #11
200002ae:	d104      	bne.n	200002ba <valconvert+0x32>
		return ~value;
200002b0:	1dbb      	adds	r3, r7, #6
200002b2:	781b      	ldrb	r3, [r3, #0]
200002b4:	43db      	mvns	r3, r3
200002b6:	b2db      	uxtb	r3, r3
200002b8:	e012      	b.n	200002e0 <valconvert+0x58>
	
	if( method == 0xC )
200002ba:	1dfb      	adds	r3, r7, #7
200002bc:	781b      	ldrb	r3, [r3, #0]
200002be:	2b0c      	cmp	r3, #12
200002c0:	d104      	bne.n	200002cc <valconvert+0x44>
		return ( value << 1 );
200002c2:	1dbb      	adds	r3, r7, #6
200002c4:	781b      	ldrb	r3, [r3, #0]
200002c6:	18db      	adds	r3, r3, r3
200002c8:	b2db      	uxtb	r3, r3
200002ca:	e009      	b.n	200002e0 <valconvert+0x58>
		
	if( method == 0xD ){
200002cc:	1dfb      	adds	r3, r7, #7
200002ce:	781b      	ldrb	r3, [r3, #0]
200002d0:	2b0d      	cmp	r3, #13
200002d2:	d104      	bne.n	200002de <valconvert+0x56>
		return ( value >> 1 );
200002d4:	1dbb      	adds	r3, r7, #6
200002d6:	781b      	ldrb	r3, [r3, #0]
200002d8:	085b      	lsrs	r3, r3, #1
200002da:	b2db      	uxtb	r3, r3
200002dc:	e000      	b.n	200002e0 <valconvert+0x58>
	}
	return 0;
200002de:	2300      	movs	r3, #0
}
200002e0:	0018      	movs	r0, r3
200002e2:	46bd      	mov	sp, r7
200002e4:	b002      	add	sp, #8
200002e6:	bd80      	pop	{r7, pc}

200002e8 <main>:
 
    
void main(void)
{
200002e8:	b590      	push	{r4, r7, lr}
200002ea:	b083      	sub	sp, #12
200002ec:	af00      	add	r7, sp, #0
    app_init();
200002ee:	f7ff fe8f 	bl	20000010 <app_init>
	
    
    while (1) {
        char value = get_valid_value();
200002f2:	1dfc      	adds	r4, r7, #7
200002f4:	f7ff ff8b 	bl	2000020e <get_valid_value>
200002f8:	0003      	movs	r3, r0
200002fa:	7023      	strb	r3, [r4, #0]
		char method = get_valid_method();
200002fc:	1dbc      	adds	r4, r7, #6
200002fe:	f7ff ffa9 	bl	20000254 <get_valid_method>
20000302:	0003      	movs	r3, r0
20000304:	7023      	strb	r3, [r4, #0]
		*GPIO_D_ODR_LOW = valconvert(method, value);
20000306:	4c06      	ldr	r4, [pc, #24]	; (20000320 <main+0x38>)
20000308:	1dfb      	adds	r3, r7, #7
2000030a:	781a      	ldrb	r2, [r3, #0]
2000030c:	1dbb      	adds	r3, r7, #6
2000030e:	781b      	ldrb	r3, [r3, #0]
20000310:	0011      	movs	r1, r2
20000312:	0018      	movs	r0, r3
20000314:	f7ff ffb8 	bl	20000288 <valconvert>
20000318:	0003      	movs	r3, r0
2000031a:	7023      	strb	r3, [r4, #0]
    while (1) {
2000031c:	e7e9      	b.n	200002f2 <main+0xa>
2000031e:	46c0      	nop			; (mov r8, r8)
20000320:	40020c14 	andmi	r0, r2, r4, lsl ip

20000324 <segCode.4000>:
20000324:	4f5b063f 	svcmi	0x005b063f
20000328:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
2000032c:	7c77677f 	ldclvc	7, cr6, [r7], #-508	; 0xfffffe04
20000330:	71795e39 	cmnvc	r9, r9, lsr lr
20000334:	0a030201 	beq	200c0b40 <segCode.4000+0xc081c>
20000338:	0b060504 	bleq	20181750 <segCode.4000+0x18142c>
2000033c:	0c090807 	stceq	8, cr0, [r9], {7}
20000340:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000310 <main+0x28>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000266 	andeq	r0, r0, r6, ror #4
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000023 	andeq	r0, r0, r3, lsr #32
  10:	0000d20c 	andeq	sp, r0, ip, lsl #4
  14:	00012d00 	andeq	r2, r1, r0, lsl #26
	...
  24:	00c70200 	sbceq	r0, r7, r0, lsl #4
  28:	8d010000 	stchi	0, cr0, [r1, #-0]
  2c:	0002e806 	andeq	lr, r2, r6, lsl #16
  30:	00003c20 	andeq	r3, r0, r0, lsr #24
  34:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
  38:	03000000 	movweq	r0, #0
  3c:	200002f2 	strdcs	r0, [r0], -r2
  40:	0000002a 	andeq	r0, r0, sl, lsr #32
  44:	00012704 	andeq	r2, r1, r4, lsl #14
  48:	0e930100 	fmleqs	f0, f3, f0
  4c:	00000064 	andeq	r0, r0, r4, rrx
  50:	046f9102 	strbteq	r9, [pc], #-258	; 58 <startup-0x1fffffa8>
  54:	00000017 	andeq	r0, r0, r7, lsl r0
  58:	64089401 	strvs	r9, [r8], #-1025	; 0xfffffbff
  5c:	02000000 	andeq	r0, r0, #0
  60:	00006e91 	muleq	r0, r1, lr
  64:	c2080105 	andgt	r0, r8, #1073741825	; 0x40000001
  68:	06000000 	streq	r0, [r0], -r0
  6c:	00000168 	andeq	r0, r0, r8, ror #2
  70:	64067b01 	strvs	r7, [r6], #-2817	; 0xfffff4ff
  74:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
  78:	60200002 	eorvs	r0, r0, r2
  7c:	01000000 	mrseq	r0, (UNDEF: 0)
  80:	0000a49c 	muleq	r0, ip, r4
  84:	00170700 	andseq	r0, r7, r0, lsl #14
  88:	7b010000 	blvc	40090 <startup-0x1ffbff70>
  8c:	00006417 	andeq	r6, r0, r7, lsl r4
  90:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  94:	00012707 	andeq	r2, r1, r7, lsl #14
  98:	247b0100 	ldrbtcs	r0, [fp], #-256	; 0xffffff00
  9c:	00000064 	andeq	r0, r0, r4, rrx
  a0:	00769102 	rsbseq	r9, r6, r2, lsl #2
  a4:	00000d08 	andeq	r0, r0, r8, lsl #26
  a8:	06710100 	ldrbteq	r0, [r1], -r0, lsl #2
  ac:	00000064 	andeq	r0, r0, r4, rrx
  b0:	20000254 	andcs	r0, r0, r4, asr r2
  b4:	00000034 	andeq	r0, r0, r4, lsr r0
  b8:	00ce9c01 	sbceq	r9, lr, r1, lsl #24
  bc:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
  c0:	01000000 	mrseq	r0, (UNDEF: 0)
  c4:	00640773 	rsbeq	r0, r4, r3, ror r7
  c8:	91020000 	mrsls	r0, (UNDEF: 2)
  cc:	1d08006f 	stcne	0, cr0, [r8, #-444]	; 0xfffffe44
  d0:	01000001 	tsteq	r0, r1
  d4:	00640663 	rsbeq	r0, r4, r3, ror #12
  d8:	020e0000 	andeq	r0, lr, #0
  dc:	00462000 	subeq	r2, r6, r0
  e0:	9c010000 	stcls	0, cr0, [r1], {-0}
  e4:	00000107 	andeq	r0, r0, r7, lsl #2
  e8:	0000cc04 	andeq	ip, r0, r4, lsl #24
  ec:	07650100 	strbeq	r0, [r5, -r0, lsl #2]!
  f0:	00000064 	andeq	r0, r0, r4, rrx
  f4:	046f9102 	strbteq	r9, [pc], #-258	; fc <startup-0x1fffff04>
  f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
  fc:	640e6501 	strvs	r6, [lr], #-1281	; 0xfffffaff
 100:	02000000 	andeq	r0, r0, #0
 104:	08006e91 	stmdaeq	r0, {r0, r4, r7, r9, sl, fp, sp, lr}
 108:	000000a5 	andeq	r0, r0, r5, lsr #1
 10c:	64065a01 	strvs	r5, [r6], #-2561	; 0xfffff5ff
 110:	cc000000 	stcgt	0, cr0, [r0], {-0}
 114:	42200001 	eormi	r0, r0, #1
 118:	01000000 	mrseq	r0, (UNDEF: 0)
 11c:	00013e9c 	muleq	r1, ip, lr
 120:	00630900 	rsbeq	r0, r3, r0, lsl #18
 124:	64075c01 	strvs	r5, [r7], #-3073	; 0xfffff3ff
 128:	02000000 	andeq	r0, r0, #0
 12c:	a8046f91 	stmdage	r4, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
 130:	01000000 	mrseq	r0, (UNDEF: 0)
 134:	0064075e 	rsbeq	r0, r4, lr, asr r7
 138:	91020000 	mrsls	r0, (UNDEF: 2)
 13c:	600a006e 	andvs	r0, sl, lr, rrx
 140:	01000001 	tsteq	r0, r1
 144:	0194064f 	orrseq	r0, r4, pc, asr #12
 148:	00382000 	eorseq	r2, r8, r0
 14c:	9c010000 	stcls	0, cr0, [r1], {-0}
 150:	00000174 	andeq	r0, r0, r4, ror r1
 154:	0100630b 	tsteq	r0, fp, lsl #6
 158:	01741d4f 	cmneq	r4, pc, asr #26
 15c:	91020000 	mrsls	r0, (UNDEF: 2)
 160:	01150477 	tsteq	r5, r7, ror r4
 164:	50010000 	andpl	r0, r1, r0
 168:	00017b1a 	andeq	r7, r1, sl, lsl fp
 16c:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
 170:	00200003 	eoreq	r0, r0, r3
 174:	b9080105 	stmdblt	r8, {r0, r2, r8}
 178:	0c000000 	stceq	0, cr0, [r0], {-0}
 17c:	00000174 	andeq	r0, r0, r4, ror r1
 180:	0000018b 	andeq	r0, r0, fp, lsl #3
 184:	00018b0d 	andeq	r8, r1, sp, lsl #22
 188:	05000f00 	streq	r0, [r0, #-3840]	; 0xfffff100
 18c:	00000704 	andeq	r0, r0, r4, lsl #14
 190:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
 194:	01000000 	mrseq	r0, (UNDEF: 0)
 198:	01740f40 	cmneq	r4, r0, asr #30
 19c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
 1a0:	00682000 	rsbeq	r2, r8, r0
 1a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 1a8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1ac:	79656b09 	stmdbvc	r5!, {r0, r3, r8, r9, fp, sp, lr}^
 1b0:	13410100 	movtne	r0, #4352	; 0x1100
 1b4:	0000017b 	andeq	r0, r0, fp, ror r1
 1b8:	0e589102 	logeqe	f1, f2
 1bc:	00776f72 	rsbseq	r6, r7, r2, ror pc
 1c0:	8b124201 	blhi	4909cc <startup-0x1fb6f634>
 1c4:	09000001 	stmdbeq	r0, {r0}
 1c8:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 1cc:	8b174201 	blhi	5d09d8 <startup-0x1fa2f628>
 1d0:	02000001 	andeq	r0, r0, #1
 1d4:	3e036891 	mcrcc	8, 0, r6, cr3, cr1, {4}
 1d8:	42200001 	eormi	r0, r0, #1
 1dc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 1e0:	00776f72 	rsbseq	r6, r7, r2, ror pc
 1e4:	f00e4301 			; <UNDEFINED> instruction: 0xf00e4301
 1e8:	02000001 	andeq	r0, r0, #1
 1ec:	00006c91 	muleq	r0, r1, ip
 1f0:	6905040f 	stmdbvs	r5, {r0, r1, r2, r3, sl}
 1f4:	0600746e 	streq	r7, [r0], -lr, ror #8
 1f8:	00000155 	andeq	r0, r0, r5, asr r1
 1fc:	f0053101 			; <UNDEFINED> instruction: 0xf0053101
 200:	d8000001 	stmdale	r0, {r0}
 204:	54200000 	strtpl	r0, [r0], #-0
 208:	01000000 	mrseq	r0, (UNDEF: 0)
 20c:	00021f9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
 210:	00630900 	rsbeq	r0, r3, r0, lsl #18
 214:	74133201 	ldrvc	r3, [r3], #-513	; 0xfffffdff
 218:	02000001 	andeq	r0, r0, #1
 21c:	0a007791 	beq	1e068 <startup-0x1ffe1f98>
 220:	000000ad 	andeq	r0, r0, sp, lsr #1
 224:	74062701 	strvc	r2, [r6], #-1793	; 0xfffff8ff
 228:	64200000 	strtvs	r0, [r0], #-0
 22c:	01000000 	mrseq	r0, (UNDEF: 0)
 230:	0002459c 	muleq	r2, ip, r5
 234:	6f720b00 	svcvs	0x00720b00
 238:	27010077 	smlsdxcs	r1, r7, r0, r0
 23c:	00018b1f 	andeq	r8, r1, pc, lsl fp
 240:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 244:	01041000 	mrseq	r1, (UNDEF: 4)
 248:	1a010000 	bne	40250 <startup-0x1ffbfdb0>
 24c:	00001006 	andeq	r1, r0, r6
 250:	00006420 	andeq	r6, r0, r0, lsr #8
 254:	109c0100 	addsne	r0, ip, r0, lsl #2
 258:	0000010d 	andeq	r0, r0, sp, lsl #2
 25c:	00060601 	andeq	r0, r6, r1, lsl #12
 260:	0c200000 	stceq	0, cr0, [r0], #-0
 264:	01000000 	mrseq	r0, (UNDEF: 0)
 268:	Address 0x00000268 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	0b390b3b 	bleq	e42d10 <startup-0x1f1bd2f0>
  20:	01111927 	tsteq	r1, r7, lsr #18
  24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  28:	01194296 			; <UNDEFINED> instruction: 0x01194296
  2c:	03000013 	movweq	r0, #19
  30:	0111010b 	tsteq	r1, fp, lsl #2
  34:	00000612 	andeq	r0, r0, r2, lsl r6
  38:	03003404 	movweq	r3, #1028	; 0x404
  3c:	3b0b3a0e 	blcc	2ce87c <startup-0x1fd31784>
  40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  44:	00180213 	andseq	r0, r8, r3, lsl r2
  48:	00240500 	eoreq	r0, r4, r0, lsl #10
  4c:	0b3e0b0b 	bleq	f82c80 <startup-0x1f07d380>
  50:	00000e03 	andeq	r0, r0, r3, lsl #28
  54:	3f012e06 	svccc	0x00012e06
  58:	3a0e0319 	bcc	380cc4 <startup-0x1fc7f33c>
  5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  60:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  64:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  68:	97184006 	ldrls	r4, [r8, -r6]
  6c:	13011942 	movwne	r1, #6466	; 0x1942
  70:	05070000 	streq	r0, [r7, #-0]
  74:	3a0e0300 	bcc	380c7c <startup-0x1fc7f384>
  78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  80:	08000018 	stmdaeq	r0, {r3, r4}
  84:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  88:	0b3a0e03 	bleq	e8389c <startup-0x1f17c764>
  8c:	0b390b3b 	bleq	e42d80 <startup-0x1f1bd280>
  90:	13491927 	movtne	r1, #39207	; 0x9927
  94:	06120111 			; <UNDEFINED> instruction: 0x06120111
  98:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  9c:	00130119 	andseq	r0, r3, r9, lsl r1
  a0:	00340900 	eorseq	r0, r4, r0, lsl #18
  a4:	0b3a0803 	bleq	e820b8 <startup-0x1f17df48>
  a8:	0b390b3b 	bleq	e42d9c <startup-0x1f1bd264>
  ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  b0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
  b4:	03193f01 	tsteq	r9, #1, 30
  b8:	3b0b3a0e 	blcc	2ce8f8 <startup-0x1fd31708>
  bc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  c4:	97184006 	ldrls	r4, [r8, -r6]
  c8:	13011942 	movwne	r1, #6466	; 0x1942
  cc:	050b0000 	streq	r0, [fp, #-0]
  d0:	3a080300 	bcc	200cd8 <startup-0x1fdff328>
  d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  dc:	0c000018 	stceq	0, cr0, [r0], {24}
  e0:	13490101 	movtne	r0, #37121	; 0x9101
  e4:	00001301 	andeq	r1, r0, r1, lsl #6
  e8:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
  ec:	000b2f13 	andeq	r2, fp, r3, lsl pc
  f0:	00340e00 	eorseq	r0, r4, r0, lsl #28
  f4:	0b3a0803 	bleq	e82108 <startup-0x1f17def8>
  f8:	0b390b3b 	bleq	e42dec <startup-0x1f1bd214>
  fc:	00001349 	andeq	r1, r0, r9, asr #6
 100:	0b00240f 	bleq	9144 <startup-0x1fff6ebc>
 104:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 108:	10000008 	andne	r0, r0, r8
 10c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 110:	0b3a0e03 	bleq	e83924 <startup-0x1f17c6dc>
 114:	0b390b3b 	bleq	e42e08 <startup-0x1f1bd1f8>
 118:	01111927 	tsteq	r1, r7, lsr #18
 11c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 120:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000314 	andeq	r0, r0, r4, lsl r3
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000324 	andcs	r0, r0, r4, lsr #6
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000020b 	andeq	r0, r0, fp, lsl #4
   4:	00480003 	subeq	r0, r8, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	44010000 	strmi	r0, [r1], #-0
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	616c2f70 	smcvs	49904	; 0xc2f0
  24:	61726f62 	cmnvs	r2, r2, ror #30
  28:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  2c:	322f7265 	eorcc	r7, pc, #1342177286	; 0x50000006
  30:	32383030 	eorscc	r3, r8, #48	; 0x30
  34:	70755f31 	rsbsvc	r5, r5, r1, lsr pc
  38:	5f326770 	svcpl	0x00326770
  3c:	7079656b 	rsbsvc	r6, r9, fp, ror #10
  40:	00006461 	andeq	r6, r0, r1, ror #8
  44:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  48:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  4c:	00010063 	andeq	r0, r1, r3, rrx
  50:	01050000 	mrseq	r0, (UNDEF: 5)
  54:	00020500 	andeq	r0, r2, r0, lsl #10
  58:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
  5c:	2f212113 	svccs	0x00212113
  60:	00030221 	andeq	r0, r3, r1, lsr #4
  64:	01050101 	tsteq	r5, r1, lsl #2
  68:	10020500 	andne	r0, r2, r0, lsl #10
  6c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  70:	1405011a 	strne	r0, [r5], #-282	; 0xfffffee6
  74:	6715052f 	ldrvs	r0, [r5, -pc, lsr #10]
  78:	67841405 	strvs	r1, [r4, r5, lsl #8]
  7c:	05770205 	ldrbeq	r0, [r7, #-517]!	; 0xfffffdfb
  80:	02052014 	andeq	r2, r5, #20
  84:	2013052f 	andscs	r0, r3, pc, lsr #10
  88:	052f0105 	streq	r0, [pc, #-261]!	; ffffff8b <segCode.4000+0xdffffc67>
  8c:	0505e623 	streq	lr, [r5, #-1571]	; 0xfffff9dd
  90:	0811054b 	ldmdaeq	r1, {r0, r1, r3, r6, r8, sl}
  94:	2023052f 	eorcs	r0, r3, pc, lsr #10
  98:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
  9c:	23052111 	movwcs	r2, #20753	; 0x5111
  a0:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
  a4:	05211105 	streq	r1, [r1, #-261]!	; 0xfffffefb
  a8:	09052023 	stmdbeq	r5, {r0, r1, r5, sp}
  ac:	2111052e 	tstcs	r1, lr, lsr #10
  b0:	05202305 	streq	r2, [r0, #-773]!	; 0xfffffcfb
  b4:	12052e09 	andne	r2, r5, #9, 28	; 0x90
  b8:	20230521 	eorcs	r0, r3, r1, lsr #10
  bc:	05300105 	ldreq	r0, [r0, #-261]!	; 0xfffffefb
  c0:	09058415 	stmdbeq	r5, {r0, r2, r4, sl, pc}
  c4:	2007053e 	andcs	r0, r7, lr, lsr r5
  c8:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
  cc:	10054a08 	andne	r4, r5, r8, lsl #20
  d0:	2f0c0521 	svccs	0x000c0521
  d4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
  d8:	0c052110 	stfeqs	f2, [r5], {16}
  dc:	4a08052f 	bmi	2015a0 <startup-0x1fdfea60>
  e0:	05211005 	streq	r1, [r1, #-5]!
  e4:	08052f0c 	stmdaeq	r5, {r2, r3, r8, r9, sl, fp, sp}
  e8:	2110054a 	tstcs	r0, sl, asr #10
  ec:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff4ef <segCode.4000+0xdffff1cb>
  f0:	19052101 	stmdbne	r5, {r0, r8, sp}
  f4:	3d130569 	cfldr32cc	mvfx0, [r3, #-420]	; 0xfffffe5c
  f8:	05680e05 	strbeq	r0, [r8, #-3589]!	; 0xfffff1fb
  fc:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 100:	4b0f0521 	blmi	3c158c <startup-0x1fc3ea74>
 104:	213c0d05 	teqcs	ip, r5, lsl #26
 108:	3d22053d 	cfstr32cc	mvfx0, [r2, #-244]!	; 0xffffff0c
 10c:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
 110:	18052026 	stmdane	r5, {r1, r2, r5, sp}
 114:	0024054a 	eoreq	r0, r4, sl, asr #10
 118:	37020402 	strcc	r0, [r2, -r2, lsl #8]
 11c:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 120:	443c0104 	ldrtmi	r0, [ip], #-260	; 0xfffffefc
 124:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
 128:	04020001 	streq	r0, [r2], #-1
 12c:	20052101 	andcs	r2, r5, r1, lsl #2
 130:	68080568 	stmdavs	r8, {r3, r5, r6, r8, sl}
 134:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
 138:	0905201a 	stmdbeq	r5, {r1, r3, r4, sp}
 13c:	221f052f 	andscs	r0, pc, #197132288	; 0xbc00000
 140:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 144:	1605201f 			; <UNDEFINED> instruction: 0x1605201f
 148:	2101052e 	tstcs	r1, lr, lsr #10
 14c:	3e070587 	cfsh32cc	mvfx0, mvfx7, #-57
 150:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
 154:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 158:	04020007 	streq	r0, [r2], #-7
 15c:	4b4b5801 	blmi	12d6168 <startup-0x1ed29e98>
 160:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
 164:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 168:	04020007 	streq	r0, [r2], #-7
 16c:	09055801 	stmdbeq	r5, {r0, fp, ip, lr}
 170:	2f01054b 	svccs	0x0001054b
 174:	000b054d 	andeq	r0, fp, sp, asr #10
 178:	3f010402 	svccc	0x00010402
 17c:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 180:	05590104 	ldrbeq	r0, [r9, #-260]	; 0xfffffefc
 184:	0402000b 	streq	r0, [r2], #-11
 188:	02054d01 	andeq	r4, r5, #1, 26	; 0x40
 18c:	01040200 	mrseq	r0, R12_usr
 190:	4c110559 	cfldr32mi	mvfx0, [r1], {89}	; 0x59
 194:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
 198:	054d7501 	strbeq	r7, [sp, #-1281]	; 0xfffffaff
 19c:	0402000a 	streq	r0, [r2], #-10
 1a0:	02053f05 	andeq	r3, r5, #5, 30
 1a4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 1a8:	00150559 	andseq	r0, r5, r9, asr r5
 1ac:	4a020402 	bmi	811bc <startup-0x1ff7ee44>
 1b0:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 1b4:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
 1b8:	01054c09 	tsteq	r5, r9, lsl #24
 1bc:	04054d2f 	streq	r4, [r5], #-3375	; 0xfffff2d1
 1c0:	4b0a0591 	blmi	28180c <startup-0x1fd7e7f4>
 1c4:	053e0405 	ldreq	r0, [lr, #-1029]!	; 0xfffffbfb
 1c8:	04054b0a 	streq	r4, [r5], #-2826	; 0xfffff4f6
 1cc:	4b12055a 	blmi	48173c <startup-0x1fb7e8c4>
 1d0:	055a0405 	ldrbeq	r0, [sl, #-1029]	; 0xfffffbfb
 1d4:	09054b12 	stmdbeq	r5, {r1, r4, r8, r9, fp, lr}
 1d8:	2101055a 	tstcs	r1, sl, asr r5
 1dc:	3d05054e 	cfstr32cc	mvfx0, [r5, #-312]	; 0xfffffec8
 1e0:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 1e4:	05320104 	ldreq	r0, [r2, #-260]!	; 0xfffffefc
 1e8:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 1ec:	03055901 	movweq	r5, #22785	; 0x5901
 1f0:	01040200 	mrseq	r0, R12_usr
 1f4:	00150559 	andseq	r0, r5, r9, asr r5
 1f8:	20010402 	andcs	r0, r1, r2, lsl #8
 1fc:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 200:	05900104 	ldreq	r0, [r0, #260]	; 0x104
 204:	0402000f 	streq	r0, [r2], #-15
 208:	04021d01 	streq	r1, [r2], #-3329	; 0xfffff2ff
 20c:	Address 0x0000020c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
   4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
   8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
   c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
  10:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
  14:	6d5f6469 	cfldrdvs	mvd6, [pc, #-420]	; fffffe78 <segCode.4000+0xdffffb54>
  18:	6f687465 	svcvs	0x00687465
  1c:	656b0064 	strbvs	r0, [fp, #-100]!	; 0xffffff9c
  20:	47006279 	smlsdxmi	r0, r9, r2, r6
  24:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  28:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
  2c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
  30:	31303220 	teqcc	r0, r0, lsr #4
  34:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
  38:	72282035 	eorvc	r2, r8, #53	; 0x35
  3c:	61656c65 	cmnvs	r5, r5, ror #24
  40:	20296573 	eorcs	r6, r9, r3, ror r5
  44:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  48:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  4c:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
  50:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  54:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  58:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  5c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  60:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
  64:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
  68:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  6c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  70:	6f6c666d 	svcvs	0x006c666d
  74:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  78:	733d6962 	teqvc	sp, #1605632	; 0x188000
  7c:	2074666f 	rsbscs	r6, r4, pc, ror #12
  80:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  84:	613d6863 	teqvs	sp, r3, ror #16
  88:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  8c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  90:	4f2d2067 	svcmi	0x002d2067
  94:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  98:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  9c:	63003939 	movwvs	r3, #2361	; 0x939
  a0:	3265646f 	rsbcc	r6, r5, #1862270976	; 0x6f000000
  a4:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
  a8:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  ac:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
  b0:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
  b4:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
  b8:	736e7500 	cmnvc	lr, #0, 10
  bc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  c0:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  c4:	6d007261 	sfmvs	f7, 4, [r0, #-388]	; 0xfffffe7c
  c8:	006e6961 	rsbeq	r6, lr, r1, ror #18
  cc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  d0:	3a440031 	bcc	110019c <startup-0x1eeffe64>
  d4:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
  d8:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
  dc:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
  e0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
  e4:	30322f72 	eorscc	r2, r2, r2, ror pc
  e8:	31323830 	teqcc	r2, r0, lsr r8
  ec:	7070755f 	rsbsvc	r7, r0, pc, asr r5
  f0:	6b5f3267 	blvs	17cca94 <startup-0x1e83356c>
  f4:	61707965 	cmnvs	r0, r5, ror #18
  f8:	74732f64 	ldrbtvc	r2, [r3], #-3940	; 0xfffff09c
  fc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 100:	00632e70 	rsbeq	r2, r3, r0, ror lr
 104:	5f707061 	svcpl	0x00707061
 108:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 10c:	61747300 	cmnvs	r4, r0, lsl #6
 110:	70757472 	rsbsvc	r7, r5, r2, ror r4
 114:	67657300 	strbvs	r7, [r5, -r0, lsl #6]!
 118:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 11c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 120:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 124:	765f6469 	ldrbvc	r6, [pc], -r9, ror #8
 128:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 12c:	5c3a4400 	cfldrspl	mvf4, [sl], #-0
 130:	5c706f6d 	ldclpl	15, cr6, [r0], #-436	; 0xfffffe4c
 134:	6f62616c 	svcvs	0x0062616c
 138:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 13c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 140:	3030325c 	eorscc	r3, r0, ip, asr r2
 144:	5f313238 	svcpl	0x00313238
 148:	67707075 			; <UNDEFINED> instruction: 0x67707075
 14c:	656b5f32 	strbvs	r5, [fp, #-3890]!	; 0xfffff0ce
 150:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 154:	61655200 	cmnvs	r5, r0, lsl #4
 158:	6c6f4364 	stclvs	3, cr4, [pc], #-400	; ffffffd0 <segCode.4000+0xdffffcac>
 15c:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 160:	3774756f 	ldrbcc	r7, [r4, -pc, ror #10]!
 164:	00676573 	rsbeq	r6, r7, r3, ror r5
 168:	636c6176 	cmnvs	ip, #-2147483619	; 0x8000001d
 16c:	65766e6f 	ldrbvs	r6, [r6, #-3695]!	; 0xfffff191
 170:	Address 0x00000170 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000064 	andeq	r0, r0, r4, rrx
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000074 	andcs	r0, r0, r4, ror r0
  48:	00000064 	andeq	r0, r0, r4, rrx
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	200000d8 	ldrdcs	r0, [r0], -r8
  68:	00000054 	andeq	r0, r0, r4, asr r0
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	2000012c 	andcs	r0, r0, ip, lsr #2
  88:	00000068 	andeq	r0, r0, r8, rrx
  8c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  90:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  94:	280e4101 	stmdacs	lr, {r0, r8, lr}
  98:	00070d41 	andeq	r0, r7, r1, asr #26
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	20000194 	mulcs	r0, r4, r1
  a8:	00000038 	andeq	r0, r0, r8, lsr r0
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  b8:	00000007 	andeq	r0, r0, r7
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	200001cc 	andcs	r0, r0, ip, asr #3
  c8:	00000042 	andeq	r0, r0, r2, asr #32
  cc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  d0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  d4:	180e4101 	stmdane	lr, {r0, r8, lr}
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	2000020e 	andcs	r0, r0, lr, lsl #4
  e8:	00000046 	andeq	r0, r0, r6, asr #32
  ec:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  f0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  f4:	180e4101 	stmdane	lr, {r0, r8, lr}
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	20000254 	andcs	r0, r0, r4, asr r2
 108:	00000034 	andeq	r0, r0, r4, lsr r0
 10c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 110:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 114:	180e4101 	stmdane	lr, {r0, r8, lr}
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	00000000 	andeq	r0, r0, r0
 124:	20000288 	andcs	r0, r0, r8, lsl #5
 128:	00000060 	andeq	r0, r0, r0, rrx
 12c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 130:	41018e02 	tstmi	r1, r2, lsl #28
 134:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 138:	00000007 	andeq	r0, r0, r7
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	200002e8 	andcs	r0, r0, r8, ror #5
 148:	0000003c 	andeq	r0, r0, ip, lsr r0
 14c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 150:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 154:	180e4101 	stmdane	lr, {r0, r8, lr}
 158:	00070d41 	andeq	r0, r7, r1, asr #26
