
Debug/1908_6_encrypt:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 *
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f848 	bl	20000098 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <encrypt>:
/* Krypterar (ändrar) en sträng på ett sådant sätt att
 * först biten (bit 0) i första tecknet inverteras
 * för det andra tecknet inverteras den andra biten etc.
 * Krypteringen är cirkulär så för åttonde tecknet är bit 7 vänd (?)*/
void encrypt( char *str )
{
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
	char *x = str;
20000018:	687b      	ldr	r3, [r7, #4]
2000001a:	60fb      	str	r3, [r7, #12]
	unsigned char mask = 0x1;
2000001c:	230b      	movs	r3, #11
2000001e:	18fb      	adds	r3, r7, r3
20000020:	2201      	movs	r2, #1
20000022:	701a      	strb	r2, [r3, #0]
	while( *x )
20000024:	e02f      	b.n	20000086 <encrypt+0x76>
	{
		if( *x & mask )
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	781b      	ldrb	r3, [r3, #0]
2000002a:	210b      	movs	r1, #11
2000002c:	187a      	adds	r2, r7, r1
2000002e:	7812      	ldrb	r2, [r2, #0]
20000030:	4013      	ands	r3, r2
20000032:	b2db      	uxtb	r3, r3
20000034:	2b00      	cmp	r3, #0
20000036:	d00d      	beq.n	20000054 <encrypt+0x44>
			*x = *x & (~mask);
20000038:	68fb      	ldr	r3, [r7, #12]
2000003a:	781b      	ldrb	r3, [r3, #0]
2000003c:	b25b      	sxtb	r3, r3
2000003e:	187a      	adds	r2, r7, r1
20000040:	7812      	ldrb	r2, [r2, #0]
20000042:	b252      	sxtb	r2, r2
20000044:	43d2      	mvns	r2, r2
20000046:	b252      	sxtb	r2, r2
20000048:	4013      	ands	r3, r2
2000004a:	b25b      	sxtb	r3, r3
2000004c:	b2da      	uxtb	r2, r3
2000004e:	68fb      	ldr	r3, [r7, #12]
20000050:	701a      	strb	r2, [r3, #0]
20000052:	e008      	b.n	20000066 <encrypt+0x56>
		else
			*x = *x | mask;
20000054:	68fb      	ldr	r3, [r7, #12]
20000056:	781a      	ldrb	r2, [r3, #0]
20000058:	230b      	movs	r3, #11
2000005a:	18fb      	adds	r3, r7, r3
2000005c:	781b      	ldrb	r3, [r3, #0]
2000005e:	4313      	orrs	r3, r2
20000060:	b2da      	uxtb	r2, r3
20000062:	68fb      	ldr	r3, [r7, #12]
20000064:	701a      	strb	r2, [r3, #0]
		mask = mask << 1;
20000066:	210b      	movs	r1, #11
20000068:	187a      	adds	r2, r7, r1
2000006a:	187b      	adds	r3, r7, r1
2000006c:	781b      	ldrb	r3, [r3, #0]
2000006e:	18db      	adds	r3, r3, r3
20000070:	7013      	strb	r3, [r2, #0]
		if( mask == 0 )
20000072:	187b      	adds	r3, r7, r1
20000074:	781b      	ldrb	r3, [r3, #0]
20000076:	2b00      	cmp	r3, #0
20000078:	d102      	bne.n	20000080 <encrypt+0x70>
			mask = 0x1;
2000007a:	187b      	adds	r3, r7, r1
2000007c:	2201      	movs	r2, #1
2000007e:	701a      	strb	r2, [r3, #0]
		x++;
20000080:	68fb      	ldr	r3, [r7, #12]
20000082:	3301      	adds	r3, #1
20000084:	60fb      	str	r3, [r7, #12]
	while( *x )
20000086:	68fb      	ldr	r3, [r7, #12]
20000088:	781b      	ldrb	r3, [r3, #0]
2000008a:	2b00      	cmp	r3, #0
2000008c:	d1cb      	bne.n	20000026 <encrypt+0x16>
	}
}
2000008e:	46c0      	nop			; (mov r8, r8)
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46bd      	mov	sp, r7
20000094:	b004      	add	sp, #16
20000096:	bd80      	pop	{r7, pc}

20000098 <main>:

void main(void)
{
20000098:	b580      	push	{r7, lr}
2000009a:	af00      	add	r7, sp, #0
}
2000009c:	46c0      	nop			; (mov r8, r8)
2000009e:	46bd      	mov	sp, r7
200000a0:	bd80      	pop	{r7, pc}
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000009c 	muleq	r0, ip, r0
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	00007c0c 	andeq	r7, r0, ip, lsl #24
  14:	0000a900 	andeq	sl, r0, r0, lsl #18
	...
  24:	00e20200 	rsceq	r0, r2, r0, lsl #4
  28:	23010000 	movwcs	r0, #4096	; 0x1000
  2c:	00009806 	andeq	r9, r0, r6, lsl #16
  30:	00000a20 	andeq	r0, r0, r0, lsr #20
  34:	039c0100 	orrseq	r0, ip, #0, 2
  38:	000000c4 	andeq	r0, r0, r4, asr #1
  3c:	10061201 	andne	r1, r6, r1, lsl #4
  40:	88200000 	stmdahi	r0!, {}	; <UNPREDICTABLE>
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	0000799c 	muleq	r0, ip, r9
  4c:	74730400 	ldrbtvc	r0, [r3], #-1024	; 0xfffffc00
  50:	12010072 	andne	r0, r1, #114	; 0x72
  54:	00007915 	andeq	r7, r0, r5, lsl r9
  58:	6c910200 	lfmvs	f0, 4, [r1], {0}
  5c:	01007805 	tsteq	r0, r5, lsl #16
  60:	00790814 	rsbseq	r0, r9, r4, lsl r8
  64:	91020000 	mrsls	r0, (UNDEF: 2)
  68:	00e70674 	rsceq	r0, r7, r4, ror r6
  6c:	15010000 	strne	r0, [r1, #-0]
  70:	00008610 	andeq	r8, r0, r0, lsl r6
  74:	73910200 	orrsvc	r0, r1, #0, 4
  78:	7f040700 	svcvc	0x00040700
  7c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  80:	00dd0801 	sbcseq	r0, sp, r1, lsl #16
  84:	01080000 	mrseq	r0, (UNDEF: 8)
  88:	0000d408 	andeq	sp, r0, r8, lsl #8
  8c:	00cc0200 	sbceq	r0, ip, r0, lsl #4
  90:	06010000 	streq	r0, [r1], -r0
  94:	00000006 	andeq	r0, r0, r6
  98:	00000c20 	andeq	r0, r0, r0, lsr #24
  9c:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	0b390b3b 	bleq	e42d10 <startup-0x1f1bd2f0>
  20:	01111927 	tsteq	r1, r7, lsr #18
  24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  28:	00194297 	mulseq	r9, r7, r2
  2c:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
  30:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  40:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  44:	00130119 	andseq	r0, r3, r9, lsl r1
  48:	00050400 	andeq	r0, r5, r0, lsl #8
  4c:	0b3a0803 	bleq	e82060 <startup-0x1f17dfa0>
  50:	0b390b3b 	bleq	e42d44 <startup-0x1f1bd2bc>
  54:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  58:	34050000 	strcc	r0, [r5], #-0
  5c:	3a080300 	bcc	200c64 <startup-0x1fdff39c>
  60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  64:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  68:	06000018 			; <UNDEFINED> instruction: 0x06000018
  6c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  70:	0b3b0b3a 	bleq	ec2d60 <startup-0x1f13d2a0>
  74:	13490b39 	movtne	r0, #39737	; 0x9b39
  78:	00001802 	andeq	r1, r0, r2, lsl #16
  7c:	0b000f07 	bleq	3ca0 <startup-0x1fffc360>
  80:	0013490b 	andseq	r4, r3, fp, lsl #18
  84:	00240800 	eoreq	r0, r4, r0, lsl #16
  88:	0b3e0b0b 	bleq	f82cbc <startup-0x1f07d344>
  8c:	00000e03 	andeq	r0, r0, r3, lsl #28
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000092 	muleq	r0, r2, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000a2 	andcs	r0, r0, r2, lsr #1
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000a5 	andeq	r0, r0, r5, lsr #1
   4:	00430003 	subeq	r0, r3, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	44010000 	strmi	r0, [r1], #-0
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	616c2f70 	smcvs	49904	; 0xc2f0
  24:	61726f62 	cmnvs	r2, r2, ror #30
  28:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  2c:	312f7265 			; <UNDEFINED> instruction: 0x312f7265
  30:	5f383039 	svcpl	0x00383039
  34:	6e655f36 	mcrvs	15, 3, r5, cr5, cr6, {1}
  38:	70797263 	rsbsvc	r7, r9, r3, ror #4
  3c:	73000074 	movwvc	r0, #116	; 0x74
  40:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  44:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  48:	00000100 	andeq	r0, r0, r0, lsl #2
  4c:	00010500 	andeq	r0, r1, r0, lsl #10
  50:	00000205 	andeq	r0, r0, r5, lsl #4
  54:	13182000 	tstne	r8, #0
  58:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  5c:	01000302 	tsteq	r0, r2, lsl #6
  60:	00010501 	andeq	r0, r1, r1, lsl #10
  64:	00100205 	andseq	r0, r0, r5, lsl #4
  68:	12032000 	andne	r2, r3, #0
  6c:	4b080501 	blmi	201478 <startup-0x1fdfeb88>
  70:	052f1005 	streq	r1, [pc, #-5]!	; 73 <startup-0x1fffff8d>
  74:	05224b07 	streq	r4, [r2, #-2823]!	; 0xfffff4f9
  78:	09057405 	stmdbeq	r5, {r0, r2, sl, ip, sp, lr}
  7c:	3c0c052f 	cfstr32cc	mvfx0, [ip], {47}	; 0x2f
  80:	05820705 	streq	r0, [r2, #1797]	; 0x705
  84:	07053e09 	streq	r3, [r5, -r9, lsl #28]
  88:	7508052e 	strvc	r0, [r8, #-1326]	; 0xfffffad2
  8c:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
  90:	04054b09 	streq	r4, [r5], #-2825	; 0xfffff4f7
  94:	0309053d 	movweq	r0, #38205	; 0x953d
  98:	07053c77 	smlsdxeq	r5, r7, ip, r3
  9c:	0301052e 	movweq	r0, #5422	; 0x152e
  a0:	2f5b2e0b 	svccs	0x005b2e0b
  a4:	01000302 	tsteq	r0, r2, lsl #6
  a8:	Address 0x000000a8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	20393943 	eorscs	r3, r9, r3, asr #18
   8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
   c:	30322031 	eorscc	r2, r2, r1, lsr r0
  10:	30313931 	eorscc	r3, r1, r1, lsr r9
  14:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
  18:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  1c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  24:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
  28:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
  2c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  30:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  34:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  38:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  3c:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
  40:	205d3939 	subscs	r3, sp, r9, lsr r9
  44:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  48:	20626d75 	rsbcs	r6, r2, r5, ror sp
  4c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  50:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  54:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  58:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  5c:	616d2d20 	cmnvs	sp, r0, lsr #26
  60:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  64:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  68:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  6c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  70:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  74:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  78:	00393963 	eorseq	r3, r9, r3, ror #18
  7c:	6d2f3a44 	vstmdbvs	pc!, {s6-s73}
  80:	6c2f706f 	stcvs	0, cr7, [pc], #-444	; fffffecc <main+0xdffffe34>
  84:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  88:	6f697461 	svcvs	0x00697461
  8c:	2f72656e 	svccs	0x0072656e
  90:	38303931 	ldmdacc	r0!, {r0, r4, r5, r8, fp, ip, sp}
  94:	655f365f 	ldrbvs	r3, [pc, #-1631]	; fffffa3d <main+0xdffff9a5>
  98:	7972636e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
  9c:	732f7470 			; <UNDEFINED> instruction: 0x732f7470
  a0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  a4:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  a8:	5c3a4400 	cfldrspl	mvf4, [sl], #-0
  ac:	5c706f6d 	ldclpl	15, cr6, [r0], #-436	; 0xfffffe4c
  b0:	6f62616c 	svcvs	0x0062616c
  b4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
  b8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
  bc:	3039315c 	eorscc	r3, r9, ip, asr r1
  c0:	5f365f38 	svcpl	0x00365f38
  c4:	72636e65 	rsbvc	r6, r3, #1616	; 0x650
  c8:	00747079 	rsbseq	r7, r4, r9, ror r0
  cc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  d0:	00707574 	rsbseq	r7, r0, r4, ror r5
  d4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  d8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  dc:	61686320 	cmnvs	r8, r0, lsr #6
  e0:	616d0072 	smcvs	53250	; 0xd002
  e4:	6d006e69 	stcvs	14, cr6, [r0, #-420]	; 0xfffffe5c
  e8:	006b7361 	rsbeq	r7, fp, r1, ror #6

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000088 	andeq	r0, r0, r8, lsl #1
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  3c:	00000007 	andeq	r0, r0, r7
  40:	00000018 	andeq	r0, r0, r8, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000098 	mulcs	r0, r8, r0
  4c:	0000000a 	andeq	r0, r0, sl
  50:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  54:	41018e02 	tstmi	r1, r2, lsl #28
  58:	0000070d 	andeq	r0, r0, sp, lsl #14
