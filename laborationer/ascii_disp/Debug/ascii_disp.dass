
Debug/ascii_disp:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 *
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f9e3 	bl	200003ce <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_ctrl_bit_set>:
#define B_RS 		1 		/* 0=Control, 1=Data */


/* Adressera ASCII-dispay och ettställ de bitar som är 1 i x */
void ascii_ctrl_bit_set( unsigned char x ) 
{
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	char c;
	c = *GPIO_E_ODR_LOW;	// c tilldelas det värde som GPIO_E_ODR_LOW pekar på
2000001c:	4a09      	ldr	r2, [pc, #36]	; (20000044 <ascii_ctrl_bit_set+0x34>)
2000001e:	210f      	movs	r1, #15
20000020:	187b      	adds	r3, r7, r1
20000022:	7812      	ldrb	r2, [r2, #0]
20000024:	701a      	strb	r2, [r3, #0]
	*GPIO_E_ODR_LOW = B_SELECT | x | c;	// 0100 | 0001 | 0010 = 0111 ??? vad händer???
20000026:	1dfa      	adds	r2, r7, #7
20000028:	187b      	adds	r3, r7, r1
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	781b      	ldrb	r3, [r3, #0]
2000002e:	4313      	orrs	r3, r2
20000030:	b2db      	uxtb	r3, r3
20000032:	4a04      	ldr	r2, [pc, #16]	; (20000044 <ascii_ctrl_bit_set+0x34>)
20000034:	2104      	movs	r1, #4
20000036:	430b      	orrs	r3, r1
20000038:	b2db      	uxtb	r3, r3
2000003a:	7013      	strb	r3, [r2, #0]
}
2000003c:	46c0      	nop			; (mov r8, r8)
2000003e:	46bd      	mov	sp, r7
20000040:	b004      	add	sp, #16
20000042:	bd80      	pop	{r7, pc}
20000044:	40021014 	andmi	r1, r2, r4, lsl r0

20000048 <ascii_ctrl_bit_clear>:

/* Adressera ASCII-display och nollställ de bitar som är 1 i x */
void ascii_ctrl_bit_clear( unsigned char x )
{
20000048:	b580      	push	{r7, lr}
2000004a:	b084      	sub	sp, #16
2000004c:	af00      	add	r7, sp, #0
2000004e:	0002      	movs	r2, r0
20000050:	1dfb      	adds	r3, r7, #7
20000052:	701a      	strb	r2, [r3, #0]
	char c;
	c = *GPIO_E_ODR_LOW;
20000054:	4a0d      	ldr	r2, [pc, #52]	; (2000008c <ascii_ctrl_bit_clear+0x44>)
20000056:	210f      	movs	r1, #15
20000058:	187b      	adds	r3, r7, r1
2000005a:	7812      	ldrb	r2, [r2, #0]
2000005c:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
2000005e:	1dfb      	adds	r3, r7, #7
20000060:	781b      	ldrb	r3, [r3, #0]
20000062:	b25b      	sxtb	r3, r3
20000064:	43db      	mvns	r3, r3
20000066:	b25b      	sxtb	r3, r3
20000068:	187a      	adds	r2, r7, r1
2000006a:	7812      	ldrb	r2, [r2, #0]
2000006c:	b252      	sxtb	r2, r2
2000006e:	4013      	ands	r3, r2
20000070:	b25a      	sxtb	r2, r3
20000072:	187b      	adds	r3, r7, r1
20000074:	701a      	strb	r2, [r3, #0]
	*GPIO_E_ODR_LOW = B_SELECT | c;
20000076:	4a05      	ldr	r2, [pc, #20]	; (2000008c <ascii_ctrl_bit_clear+0x44>)
20000078:	187b      	adds	r3, r7, r1
2000007a:	781b      	ldrb	r3, [r3, #0]
2000007c:	2104      	movs	r1, #4
2000007e:	430b      	orrs	r3, r1
20000080:	b2db      	uxtb	r3, r3
20000082:	7013      	strb	r3, [r2, #0]
}
20000084:	46c0      	nop			; (mov r8, r8)
20000086:	46bd      	mov	sp, r7
20000088:	b004      	add	sp, #16
2000008a:	bd80      	pop	{r7, pc}
2000008c:	40021014 	andmi	r1, r2, r4, lsl r0

20000090 <ascii_write_controller>:

void ascii_write_controller( unsigned char c )
{
20000090:	b580      	push	{r7, lr}
20000092:	b082      	sub	sp, #8
20000094:	af00      	add	r7, sp, #0
20000096:	0002      	movs	r2, r0
20000098:	1dfb      	adds	r3, r7, #7
2000009a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set( B_E ); 		// E=1
2000009c:	2040      	movs	r0, #64	; 0x40
2000009e:	f7ff ffb7 	bl	20000010 <ascii_ctrl_bit_set>
	*GPIO_E_ODR_HIGH = c;
200000a2:	4a06      	ldr	r2, [pc, #24]	; (200000bc <ascii_write_controller+0x2c>)
200000a4:	1dfb      	adds	r3, r7, #7
200000a6:	781b      	ldrb	r3, [r3, #0]
200000a8:	7013      	strb	r3, [r2, #0]
	ascii_ctrl_bit_clear( B_E );	// E=0
200000aa:	2040      	movs	r0, #64	; 0x40
200000ac:	f7ff ffcc 	bl	20000048 <ascii_ctrl_bit_clear>
	delay_250ns();
200000b0:	f000 f88a 	bl	200001c8 <delay_250ns>
}
200000b4:	46c0      	nop			; (mov r8, r8)
200000b6:	46bd      	mov	sp, r7
200000b8:	b002      	add	sp, #8
200000ba:	bd80      	pop	{r7, pc}
200000bc:	40021015 	andmi	r1, r2, r5, lsl r0

200000c0 <ascii_read_controller>:

char ascii_read_controller( void )
{
200000c0:	b580      	push	{r7, lr}
200000c2:	b082      	sub	sp, #8
200000c4:	af00      	add	r7, sp, #0
	char c;
	ascii_ctrl_bit_set( B_E );			// E=1
200000c6:	2040      	movs	r0, #64	; 0x40
200000c8:	f7ff ffa2 	bl	20000010 <ascii_ctrl_bit_set>
	delay_250ns();
200000cc:	f000 f87c 	bl	200001c8 <delay_250ns>
	delay_250ns();
200000d0:	f000 f87a 	bl	200001c8 <delay_250ns>
	c = *GPIO_E_IDR_HIGH;				// läs från inport
200000d4:	4a06      	ldr	r2, [pc, #24]	; (200000f0 <ascii_read_controller+0x30>)
200000d6:	1dfb      	adds	r3, r7, #7
200000d8:	7812      	ldrb	r2, [r2, #0]
200000da:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_E );		// E=0
200000dc:	2040      	movs	r0, #64	; 0x40
200000de:	f7ff ffb3 	bl	20000048 <ascii_ctrl_bit_clear>
	return c;
200000e2:	1dfb      	adds	r3, r7, #7
200000e4:	781b      	ldrb	r3, [r3, #0]
}
200000e6:	0018      	movs	r0, r3
200000e8:	46bd      	mov	sp, r7
200000ea:	b002      	add	sp, #8
200000ec:	bd80      	pop	{r7, pc}
200000ee:	46c0      	nop			; (mov r8, r8)
200000f0:	40021011 	andmi	r1, r2, r1, lsl r0

200000f4 <ascii_read_status>:

char ascii_read_status( void )
{
200000f4:	b590      	push	{r4, r7, lr}
200000f6:	b083      	sub	sp, #12
200000f8:	af00      	add	r7, sp, #0
	char c;
	*GPIO_E_MODER = 0x00005555;
200000fa:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <ascii_read_status+0x34>)
200000fc:	4a0b      	ldr	r2, [pc, #44]	; (2000012c <ascii_read_status+0x38>)
200000fe:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set( B_RW );		// RW = 1
20000100:	2002      	movs	r0, #2
20000102:	f7ff ff85 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear( B_RS );	// RS = 0
20000106:	2001      	movs	r0, #1
20000108:	f7ff ff9e 	bl	20000048 <ascii_ctrl_bit_clear>
	c = ascii_read_controller();
2000010c:	1dfc      	adds	r4, r7, #7
2000010e:	f7ff ffd7 	bl	200000c0 <ascii_read_controller>
20000112:	0003      	movs	r3, r0
20000114:	7023      	strb	r3, [r4, #0]
	*GPIO_E_MODER = 0x55555555;
20000116:	4b04      	ldr	r3, [pc, #16]	; (20000128 <ascii_read_status+0x34>)
20000118:	4a05      	ldr	r2, [pc, #20]	; (20000130 <ascii_read_status+0x3c>)
2000011a:	601a      	str	r2, [r3, #0]
	return c;
2000011c:	1dfb      	adds	r3, r7, #7
2000011e:	781b      	ldrb	r3, [r3, #0]
}
20000120:	0018      	movs	r0, r3
20000122:	46bd      	mov	sp, r7
20000124:	b003      	add	sp, #12
20000126:	bd90      	pop	{r4, r7, pc}
20000128:	40021000 	andmi	r1, r2, r0
2000012c:	00005555 	andeq	r5, r0, r5, asr r5
20000130:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000134 <ascii_read_data>:

char ascii_read_data( void )
{
20000134:	b590      	push	{r4, r7, lr}
20000136:	b083      	sub	sp, #12
20000138:	af00      	add	r7, sp, #0
	char c;
	*GPIO_E_MODER = 0x00005555;
2000013a:	4b0b      	ldr	r3, [pc, #44]	; (20000168 <ascii_read_data+0x34>)
2000013c:	4a0b      	ldr	r2, [pc, #44]	; (2000016c <ascii_read_data+0x38>)
2000013e:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set( B_RW );		// RW = 1
20000140:	2002      	movs	r0, #2
20000142:	f7ff ff65 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set( B_RS );		// RS = 1
20000146:	2001      	movs	r0, #1
20000148:	f7ff ff62 	bl	20000010 <ascii_ctrl_bit_set>
	c = ascii_read_controller();
2000014c:	1dfc      	adds	r4, r7, #7
2000014e:	f7ff ffb7 	bl	200000c0 <ascii_read_controller>
20000152:	0003      	movs	r3, r0
20000154:	7023      	strb	r3, [r4, #0]
	*GPIO_E_MODER = 0x55555555;
20000156:	4b04      	ldr	r3, [pc, #16]	; (20000168 <ascii_read_data+0x34>)
20000158:	4a05      	ldr	r2, [pc, #20]	; (20000170 <ascii_read_data+0x3c>)
2000015a:	601a      	str	r2, [r3, #0]
	return c;
2000015c:	1dfb      	adds	r3, r7, #7
2000015e:	781b      	ldrb	r3, [r3, #0]
}
20000160:	0018      	movs	r0, r3
20000162:	46bd      	mov	sp, r7
20000164:	b003      	add	sp, #12
20000166:	bd90      	pop	{r4, r7, pc}
20000168:	40021000 	andmi	r1, r2, r0
2000016c:	00005555 	andeq	r5, r0, r5, asr r5
20000170:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000174 <ascii_write_cmd>:

void ascii_write_cmd( unsigned char command )
{
20000174:	b580      	push	{r7, lr}
20000176:	b082      	sub	sp, #8
20000178:	af00      	add	r7, sp, #0
2000017a:	0002      	movs	r2, r0
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_RS );
20000180:	2001      	movs	r0, #1
20000182:	f7ff ff61 	bl	20000048 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear( B_RW );
20000186:	2002      	movs	r0, #2
20000188:	f7ff ff5e 	bl	20000048 <ascii_ctrl_bit_clear>
	ascii_write_controller( command );
2000018c:	1dfb      	adds	r3, r7, #7
2000018e:	781b      	ldrb	r3, [r3, #0]
20000190:	0018      	movs	r0, r3
20000192:	f7ff ff7d 	bl	20000090 <ascii_write_controller>
}
20000196:	46c0      	nop			; (mov r8, r8)
20000198:	46bd      	mov	sp, r7
2000019a:	b002      	add	sp, #8
2000019c:	bd80      	pop	{r7, pc}

2000019e <ascii_write_data>:

void ascii_write_data( unsigned char data )
{
2000019e:	b580      	push	{r7, lr}
200001a0:	b082      	sub	sp, #8
200001a2:	af00      	add	r7, sp, #0
200001a4:	0002      	movs	r2, r0
200001a6:	1dfb      	adds	r3, r7, #7
200001a8:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set( B_RS );
200001aa:	2001      	movs	r0, #1
200001ac:	f7ff ff30 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear( B_RW );
200001b0:	2002      	movs	r0, #2
200001b2:	f7ff ff49 	bl	20000048 <ascii_ctrl_bit_clear>
	ascii_write_controller( data );
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	781b      	ldrb	r3, [r3, #0]
200001ba:	0018      	movs	r0, r3
200001bc:	f7ff ff68 	bl	20000090 <ascii_write_controller>
}
200001c0:	46c0      	nop			; (mov r8, r8)
200001c2:	46bd      	mov	sp, r7
200001c4:	b002      	add	sp, #8
200001c6:	bd80      	pop	{r7, pc}

200001c8 <delay_250ns>:

void delay_250ns( void )
{
200001c8:	b580      	push	{r7, lr}
200001ca:	af00      	add	r7, sp, #0
    /* SystemCoreClock = 168000000 */
    *STK_CTRL = 0;
200001cc:	4b0c      	ldr	r3, [pc, #48]	; (20000200 <delay_250ns+0x38>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ( (168/4) -1 );
200001d2:	4b0c      	ldr	r3, [pc, #48]	; (20000204 <delay_250ns+0x3c>)
200001d4:	2229      	movs	r2, #41	; 0x29
200001d6:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
200001d8:	4b0b      	ldr	r3, [pc, #44]	; (20000208 <delay_250ns+0x40>)
200001da:	2200      	movs	r2, #0
200001dc:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;  //sätter enable och clksource
200001de:	4b08      	ldr	r3, [pc, #32]	; (20000200 <delay_250ns+0x38>)
200001e0:	2205      	movs	r2, #5
200001e2:	601a      	str	r2, [r3, #0]
    // börjar räkna
    while( (*STK_CTRL & 0x10000 )== 0 );    //vänta till countflag=1
200001e4:	46c0      	nop			; (mov r8, r8)
200001e6:	4b06      	ldr	r3, [pc, #24]	; (20000200 <delay_250ns+0x38>)
200001e8:	681a      	ldr	r2, [r3, #0]
200001ea:	2380      	movs	r3, #128	; 0x80
200001ec:	025b      	lsls	r3, r3, #9
200001ee:	4013      	ands	r3, r2
200001f0:	d0f9      	beq.n	200001e6 <delay_250ns+0x1e>
    *STK_CTRL = 0;
200001f2:	4b03      	ldr	r3, [pc, #12]	; (20000200 <delay_250ns+0x38>)
200001f4:	2200      	movs	r2, #0
200001f6:	601a      	str	r2, [r3, #0]
}
200001f8:	46c0      	nop			; (mov r8, r8)
200001fa:	46bd      	mov	sp, r7
200001fc:	bd80      	pop	{r7, pc}
200001fe:	46c0      	nop			; (mov r8, r8)
20000200:	e000e010 	and	lr, r0, r0, lsl r0
20000204:	e000e014 	and	lr, r0, r4, lsl r0
20000208:	e000e018 	and	lr, r0, r8, lsl r0

2000020c <delay_micro>:

void delay_micro(unsigned int us)
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	6078      	str	r0, [r7, #4]
/* Simulator value */
#ifdef SIMULATOR
    us = us / 1000;
20000214:	687b      	ldr	r3, [r7, #4]
20000216:	22fa      	movs	r2, #250	; 0xfa
20000218:	0091      	lsls	r1, r2, #2
2000021a:	0018      	movs	r0, r3
2000021c:	f000 f91e 	bl	2000045c <__udivsi3>
20000220:	0003      	movs	r3, r0
20000222:	607b      	str	r3, [r7, #4]
    us++;
20000224:	687b      	ldr	r3, [r7, #4]
20000226:	3301      	adds	r3, #1
20000228:	607b      	str	r3, [r7, #4]
#endif
    while( us > 0 )
2000022a:	e00a      	b.n	20000242 <delay_micro+0x36>
    {
        delay_250ns();
2000022c:	f7ff ffcc 	bl	200001c8 <delay_250ns>
        delay_250ns();
20000230:	f7ff ffca 	bl	200001c8 <delay_250ns>
        delay_250ns();
20000234:	f7ff ffc8 	bl	200001c8 <delay_250ns>
        delay_250ns();
20000238:	f7ff ffc6 	bl	200001c8 <delay_250ns>
        us--;
2000023c:	687b      	ldr	r3, [r7, #4]
2000023e:	3b01      	subs	r3, #1
20000240:	607b      	str	r3, [r7, #4]
    while( us > 0 )
20000242:	687b      	ldr	r3, [r7, #4]
20000244:	2b00      	cmp	r3, #0
20000246:	d1f1      	bne.n	2000022c <delay_micro+0x20>
    }
}
20000248:	46c0      	nop			; (mov r8, r8)
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	46bd      	mov	sp, r7
2000024e:	b002      	add	sp, #8
20000250:	bd80      	pop	{r7, pc}

20000252 <delay_milli>:

void delay_milli(unsigned int ms)
{
20000252:	b580      	push	{r7, lr}
20000254:	b082      	sub	sp, #8
20000256:	af00      	add	r7, sp, #0
20000258:	6078      	str	r0, [r7, #4]
	
	
#ifdef  SIMULATOR
    ms = ms / 1000;
2000025a:	687b      	ldr	r3, [r7, #4]
2000025c:	22fa      	movs	r2, #250	; 0xfa
2000025e:	0091      	lsls	r1, r2, #2
20000260:	0018      	movs	r0, r3
20000262:	f000 f8fb 	bl	2000045c <__udivsi3>
20000266:	0003      	movs	r3, r0
20000268:	607b      	str	r3, [r7, #4]
    ms++;
2000026a:	687b      	ldr	r3, [r7, #4]
2000026c:	3301      	adds	r3, #1
2000026e:	607b      	str	r3, [r7, #4]
#endif
    while(ms > 0)
20000270:	e007      	b.n	20000282 <delay_milli+0x30>
    {
        delay_micro(1000);
20000272:	23fa      	movs	r3, #250	; 0xfa
20000274:	009b      	lsls	r3, r3, #2
20000276:	0018      	movs	r0, r3
20000278:	f7ff ffc8 	bl	2000020c <delay_micro>
        ms--;
2000027c:	687b      	ldr	r3, [r7, #4]
2000027e:	3b01      	subs	r3, #1
20000280:	607b      	str	r3, [r7, #4]
    while(ms > 0)
20000282:	687b      	ldr	r3, [r7, #4]
20000284:	2b00      	cmp	r3, #0
20000286:	d1f4      	bne.n	20000272 <delay_milli+0x20>
    }
}
20000288:	46c0      	nop			; (mov r8, r8)
2000028a:	46c0      	nop			; (mov r8, r8)
2000028c:	46bd      	mov	sp, r7
2000028e:	b002      	add	sp, #8
20000290:	bd80      	pop	{r7, pc}

20000292 <ascii_gotoxy>:

void ascii_gotoxy( int x, int y)
{
20000292:	b580      	push	{r7, lr}
20000294:	b084      	sub	sp, #16
20000296:	af00      	add	r7, sp, #0
20000298:	6078      	str	r0, [r7, #4]
2000029a:	6039      	str	r1, [r7, #0]
	char adress = x - 1;
2000029c:	687b      	ldr	r3, [r7, #4]
2000029e:	b2da      	uxtb	r2, r3
200002a0:	210f      	movs	r1, #15
200002a2:	187b      	adds	r3, r7, r1
200002a4:	3a01      	subs	r2, #1
200002a6:	701a      	strb	r2, [r3, #0]
	if( y == 2)
200002a8:	683b      	ldr	r3, [r7, #0]
200002aa:	2b02      	cmp	r3, #2
200002ac:	d104      	bne.n	200002b8 <ascii_gotoxy+0x26>
		adress += 0x40;
200002ae:	187b      	adds	r3, r7, r1
200002b0:	187a      	adds	r2, r7, r1
200002b2:	7812      	ldrb	r2, [r2, #0]
200002b4:	3240      	adds	r2, #64	; 0x40
200002b6:	701a      	strb	r2, [r3, #0]
	ascii_write_cmd( 0x80 | adress );		 
200002b8:	230f      	movs	r3, #15
200002ba:	18fb      	adds	r3, r7, r3
200002bc:	781b      	ldrb	r3, [r3, #0]
200002be:	2280      	movs	r2, #128	; 0x80
200002c0:	4252      	negs	r2, r2
200002c2:	4313      	orrs	r3, r2
200002c4:	b2db      	uxtb	r3, r3
200002c6:	0018      	movs	r0, r3
200002c8:	f7ff ff54 	bl	20000174 <ascii_write_cmd>
}
200002cc:	46c0      	nop			; (mov r8, r8)
200002ce:	46bd      	mov	sp, r7
200002d0:	b004      	add	sp, #16
200002d2:	bd80      	pop	{r7, pc}

200002d4 <ascii_write_char>:

void ascii_write_char( unsigned char c )
{
200002d4:	b580      	push	{r7, lr}
200002d6:	b082      	sub	sp, #8
200002d8:	af00      	add	r7, sp, #0
200002da:	0002      	movs	r2, r0
200002dc:	1dfb      	adds	r3, r7, #7
200002de:	701a      	strb	r2, [r3, #0]
	while( ( ascii_read_status() & 0x80 ) == 0x80 );
200002e0:	46c0      	nop			; (mov r8, r8)
200002e2:	f7ff ff07 	bl	200000f4 <ascii_read_status>
200002e6:	0003      	movs	r3, r0
200002e8:	001a      	movs	r2, r3
200002ea:	2380      	movs	r3, #128	; 0x80
200002ec:	4013      	ands	r3, r2
200002ee:	2b80      	cmp	r3, #128	; 0x80
200002f0:	d0f7      	beq.n	200002e2 <ascii_write_char+0xe>
	delay_micro( 8 );
200002f2:	2008      	movs	r0, #8
200002f4:	f7ff ff8a 	bl	2000020c <delay_micro>
	ascii_write_data( c );
200002f8:	1dfb      	adds	r3, r7, #7
200002fa:	781b      	ldrb	r3, [r3, #0]
200002fc:	0018      	movs	r0, r3
200002fe:	f7ff ff4e 	bl	2000019e <ascii_write_data>
	delay_micro( 43 );
20000302:	202b      	movs	r0, #43	; 0x2b
20000304:	f7ff ff82 	bl	2000020c <delay_micro>
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b002      	add	sp, #8
2000030e:	bd80      	pop	{r7, pc}

20000310 <init_app>:

void init_app(void)
{
20000310:	b580      	push	{r7, lr}
20000312:	af00      	add	r7, sp, #0
    *GPIO_E_MODER = 0x55555555;  // GPIO_MODER initieras
20000314:	4b04      	ldr	r3, [pc, #16]	; (20000328 <init_app+0x18>)
20000316:	4a05      	ldr	r2, [pc, #20]	; (2000032c <init_app+0x1c>)
20000318:	601a      	str	r2, [r3, #0]
    *GPIO_E_ODR_LOW = 0x0;	// initierar utgången 
2000031a:	4b05      	ldr	r3, [pc, #20]	; (20000330 <init_app+0x20>)
2000031c:	2200      	movs	r2, #0
2000031e:	701a      	strb	r2, [r3, #0]
}
20000320:	46c0      	nop			; (mov r8, r8)
20000322:	46bd      	mov	sp, r7
20000324:	bd80      	pop	{r7, pc}
20000326:	46c0      	nop			; (mov r8, r8)
20000328:	40021000 	andmi	r1, r2, r0
2000032c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000330:	40021014 	andmi	r1, r2, r4, lsl r0

20000334 <ascii_init>:

void ascii_init( void )
{
20000334:	b580      	push	{r7, lr}
20000336:	af00      	add	r7, sp, #0
	// Function set RS RW 0 0 1 1 N F X X		(N=0 -> 1rad, N=1 -> 2 rader) (F=0 -> 5x8 punkter, F=1 -> 5x11 punkter)
	while( ( ascii_read_status() & 0x80 ) == 0x80 );
20000338:	46c0      	nop			; (mov r8, r8)
2000033a:	f7ff fedb 	bl	200000f4 <ascii_read_status>
2000033e:	0003      	movs	r3, r0
20000340:	001a      	movs	r2, r3
20000342:	2380      	movs	r3, #128	; 0x80
20000344:	4013      	ands	r3, r2
20000346:	2b80      	cmp	r3, #128	; 0x80
20000348:	d0f7      	beq.n	2000033a <ascii_init+0x6>
	delay_micro( 8 );
2000034a:	2008      	movs	r0, #8
2000034c:	f7ff ff5e 	bl	2000020c <delay_micro>
	ascii_write_cmd( 0x38 );
20000350:	2038      	movs	r0, #56	; 0x38
20000352:	f7ff ff0f 	bl	20000174 <ascii_write_cmd>
	delay_micro( 39 );
20000356:	2027      	movs	r0, #39	; 0x27
20000358:	f7ff ff58 	bl	2000020c <delay_micro>
	
	while( ( ascii_read_status() & 0x80 ) == 0x80 );
2000035c:	46c0      	nop			; (mov r8, r8)
2000035e:	f7ff fec9 	bl	200000f4 <ascii_read_status>
20000362:	0003      	movs	r3, r0
20000364:	001a      	movs	r2, r3
20000366:	2380      	movs	r3, #128	; 0x80
20000368:	4013      	ands	r3, r2
2000036a:	2b80      	cmp	r3, #128	; 0x80
2000036c:	d0f7      	beq.n	2000035e <ascii_init+0x2a>
	delay_micro( 8 );
2000036e:	2008      	movs	r0, #8
20000370:	f7ff ff4c 	bl	2000020c <delay_micro>
	ascii_write_cmd( 0xE ); /*00001110*/
20000374:	200e      	movs	r0, #14
20000376:	f7ff fefd 	bl	20000174 <ascii_write_cmd>
	delay_micro( 39 );
2000037a:	2027      	movs	r0, #39	; 0x27
2000037c:	f7ff ff46 	bl	2000020c <delay_micro>
	
	while( ( ascii_read_status() & 0x80 ) == 0x80 );
20000380:	46c0      	nop			; (mov r8, r8)
20000382:	f7ff feb7 	bl	200000f4 <ascii_read_status>
20000386:	0003      	movs	r3, r0
20000388:	001a      	movs	r2, r3
2000038a:	2380      	movs	r3, #128	; 0x80
2000038c:	4013      	ands	r3, r2
2000038e:	2b80      	cmp	r3, #128	; 0x80
20000390:	d0f7      	beq.n	20000382 <ascii_init+0x4e>
	delay_micro( 8 );
20000392:	2008      	movs	r0, #8
20000394:	f7ff ff3a 	bl	2000020c <delay_micro>
	ascii_write_cmd( 1 );
20000398:	2001      	movs	r0, #1
2000039a:	f7ff feeb 	bl	20000174 <ascii_write_cmd>
	delay_milli( 2 );
2000039e:	2002      	movs	r0, #2
200003a0:	f7ff ff57 	bl	20000252 <delay_milli>
	
	while( ( ascii_read_status() & 0x80 ) == 0x80 );
200003a4:	46c0      	nop			; (mov r8, r8)
200003a6:	f7ff fea5 	bl	200000f4 <ascii_read_status>
200003aa:	0003      	movs	r3, r0
200003ac:	001a      	movs	r2, r3
200003ae:	2380      	movs	r3, #128	; 0x80
200003b0:	4013      	ands	r3, r2
200003b2:	2b80      	cmp	r3, #128	; 0x80
200003b4:	d0f7      	beq.n	200003a6 <ascii_init+0x72>
	delay_micro( 8 );
200003b6:	2008      	movs	r0, #8
200003b8:	f7ff ff28 	bl	2000020c <delay_micro>
	ascii_write_cmd( 0x6 );
200003bc:	2006      	movs	r0, #6
200003be:	f7ff fed9 	bl	20000174 <ascii_write_cmd>
	delay_micro( 39 );
200003c2:	2027      	movs	r0, #39	; 0x27
200003c4:	f7ff ff22 	bl	2000020c <delay_micro>
}
200003c8:	46c0      	nop			; (mov r8, r8)
200003ca:	46bd      	mov	sp, r7
200003cc:	bd80      	pop	{r7, pc}

200003ce <main>:

int main( int argc, char **argv)
{
200003ce:	b5b0      	push	{r4, r5, r7, lr}
200003d0:	b08c      	sub	sp, #48	; 0x30
200003d2:	af00      	add	r7, sp, #0
200003d4:	6078      	str	r0, [r7, #4]
200003d6:	6039      	str	r1, [r7, #0]
	char *s ;
	char test1[] = "Alfanumerisk ";
200003d8:	241c      	movs	r4, #28
200003da:	193b      	adds	r3, r7, r4
200003dc:	4a1d      	ldr	r2, [pc, #116]	; (20000454 <main+0x86>)
200003de:	ca23      	ldmia	r2!, {r0, r1, r5}
200003e0:	c323      	stmia	r3!, {r0, r1, r5}
200003e2:	8812      	ldrh	r2, [r2, #0]
200003e4:	801a      	strh	r2, [r3, #0]
	char test2[] = "Display - test";
200003e6:	230c      	movs	r3, #12
200003e8:	18fb      	adds	r3, r7, r3
200003ea:	4a1b      	ldr	r2, [pc, #108]	; (20000458 <main+0x8a>)
200003ec:	ca23      	ldmia	r2!, {r0, r1, r5}
200003ee:	c323      	stmia	r3!, {r0, r1, r5}
200003f0:	8811      	ldrh	r1, [r2, #0]
200003f2:	8019      	strh	r1, [r3, #0]
200003f4:	7892      	ldrb	r2, [r2, #2]
200003f6:	709a      	strb	r2, [r3, #2]
	
	init_app();
200003f8:	f7ff ff8a 	bl	20000310 <init_app>
	ascii_init();
200003fc:	f7ff ff9a 	bl	20000334 <ascii_init>
	ascii_gotoxy(1,1);
20000400:	2101      	movs	r1, #1
20000402:	2001      	movs	r0, #1
20000404:	f7ff ff45 	bl	20000292 <ascii_gotoxy>
	s = test1;
20000408:	193b      	adds	r3, r7, r4
2000040a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while( *s )
2000040c:	e006      	b.n	2000041c <main+0x4e>
		ascii_write_char( *s++ );
2000040e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000410:	1c5a      	adds	r2, r3, #1
20000412:	62fa      	str	r2, [r7, #44]	; 0x2c
20000414:	781b      	ldrb	r3, [r3, #0]
20000416:	0018      	movs	r0, r3
20000418:	f7ff ff5c 	bl	200002d4 <ascii_write_char>
	while( *s )
2000041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000041e:	781b      	ldrb	r3, [r3, #0]
20000420:	2b00      	cmp	r3, #0
20000422:	d1f4      	bne.n	2000040e <main+0x40>
	ascii_gotoxy(1,2);
20000424:	2102      	movs	r1, #2
20000426:	2001      	movs	r0, #1
20000428:	f7ff ff33 	bl	20000292 <ascii_gotoxy>
	s = test2;
2000042c:	230c      	movs	r3, #12
2000042e:	18fb      	adds	r3, r7, r3
20000430:	62fb      	str	r3, [r7, #44]	; 0x2c
	while( *s )
20000432:	e006      	b.n	20000442 <main+0x74>
		ascii_write_char( *s++ );
20000434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000436:	1c5a      	adds	r2, r3, #1
20000438:	62fa      	str	r2, [r7, #44]	; 0x2c
2000043a:	781b      	ldrb	r3, [r3, #0]
2000043c:	0018      	movs	r0, r3
2000043e:	f7ff ff49 	bl	200002d4 <ascii_write_char>
	while( *s )
20000442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000444:	781b      	ldrb	r3, [r3, #0]
20000446:	2b00      	cmp	r3, #0
20000448:	d1f4      	bne.n	20000434 <main+0x66>
	return 0;	
2000044a:	2300      	movs	r3, #0
	
}
2000044c:	0018      	movs	r0, r3
2000044e:	46bd      	mov	sp, r7
20000450:	b00c      	add	sp, #48	; 0x30
20000452:	bdb0      	pop	{r4, r5, r7, pc}
20000454:	20000574 	andcs	r0, r0, r4, ror r5
20000458:	20000584 	andcs	r0, r0, r4, lsl #11

2000045c <__udivsi3>:
2000045c:	2200      	movs	r2, #0
2000045e:	0843      	lsrs	r3, r0, #1
20000460:	428b      	cmp	r3, r1
20000462:	d374      	bcc.n	2000054e <__udivsi3+0xf2>
20000464:	0903      	lsrs	r3, r0, #4
20000466:	428b      	cmp	r3, r1
20000468:	d35f      	bcc.n	2000052a <__udivsi3+0xce>
2000046a:	0a03      	lsrs	r3, r0, #8
2000046c:	428b      	cmp	r3, r1
2000046e:	d344      	bcc.n	200004fa <__udivsi3+0x9e>
20000470:	0b03      	lsrs	r3, r0, #12
20000472:	428b      	cmp	r3, r1
20000474:	d328      	bcc.n	200004c8 <__udivsi3+0x6c>
20000476:	0c03      	lsrs	r3, r0, #16
20000478:	428b      	cmp	r3, r1
2000047a:	d30d      	bcc.n	20000498 <__udivsi3+0x3c>
2000047c:	22ff      	movs	r2, #255	; 0xff
2000047e:	0209      	lsls	r1, r1, #8
20000480:	ba12      	rev	r2, r2
20000482:	0c03      	lsrs	r3, r0, #16
20000484:	428b      	cmp	r3, r1
20000486:	d302      	bcc.n	2000048e <__udivsi3+0x32>
20000488:	1212      	asrs	r2, r2, #8
2000048a:	0209      	lsls	r1, r1, #8
2000048c:	d065      	beq.n	2000055a <__udivsi3+0xfe>
2000048e:	0b03      	lsrs	r3, r0, #12
20000490:	428b      	cmp	r3, r1
20000492:	d319      	bcc.n	200004c8 <__udivsi3+0x6c>
20000494:	e000      	b.n	20000498 <__udivsi3+0x3c>
20000496:	0a09      	lsrs	r1, r1, #8
20000498:	0bc3      	lsrs	r3, r0, #15
2000049a:	428b      	cmp	r3, r1
2000049c:	d301      	bcc.n	200004a2 <__udivsi3+0x46>
2000049e:	03cb      	lsls	r3, r1, #15
200004a0:	1ac0      	subs	r0, r0, r3
200004a2:	4152      	adcs	r2, r2
200004a4:	0b83      	lsrs	r3, r0, #14
200004a6:	428b      	cmp	r3, r1
200004a8:	d301      	bcc.n	200004ae <__udivsi3+0x52>
200004aa:	038b      	lsls	r3, r1, #14
200004ac:	1ac0      	subs	r0, r0, r3
200004ae:	4152      	adcs	r2, r2
200004b0:	0b43      	lsrs	r3, r0, #13
200004b2:	428b      	cmp	r3, r1
200004b4:	d301      	bcc.n	200004ba <__udivsi3+0x5e>
200004b6:	034b      	lsls	r3, r1, #13
200004b8:	1ac0      	subs	r0, r0, r3
200004ba:	4152      	adcs	r2, r2
200004bc:	0b03      	lsrs	r3, r0, #12
200004be:	428b      	cmp	r3, r1
200004c0:	d301      	bcc.n	200004c6 <__udivsi3+0x6a>
200004c2:	030b      	lsls	r3, r1, #12
200004c4:	1ac0      	subs	r0, r0, r3
200004c6:	4152      	adcs	r2, r2
200004c8:	0ac3      	lsrs	r3, r0, #11
200004ca:	428b      	cmp	r3, r1
200004cc:	d301      	bcc.n	200004d2 <__udivsi3+0x76>
200004ce:	02cb      	lsls	r3, r1, #11
200004d0:	1ac0      	subs	r0, r0, r3
200004d2:	4152      	adcs	r2, r2
200004d4:	0a83      	lsrs	r3, r0, #10
200004d6:	428b      	cmp	r3, r1
200004d8:	d301      	bcc.n	200004de <__udivsi3+0x82>
200004da:	028b      	lsls	r3, r1, #10
200004dc:	1ac0      	subs	r0, r0, r3
200004de:	4152      	adcs	r2, r2
200004e0:	0a43      	lsrs	r3, r0, #9
200004e2:	428b      	cmp	r3, r1
200004e4:	d301      	bcc.n	200004ea <__udivsi3+0x8e>
200004e6:	024b      	lsls	r3, r1, #9
200004e8:	1ac0      	subs	r0, r0, r3
200004ea:	4152      	adcs	r2, r2
200004ec:	0a03      	lsrs	r3, r0, #8
200004ee:	428b      	cmp	r3, r1
200004f0:	d301      	bcc.n	200004f6 <__udivsi3+0x9a>
200004f2:	020b      	lsls	r3, r1, #8
200004f4:	1ac0      	subs	r0, r0, r3
200004f6:	4152      	adcs	r2, r2
200004f8:	d2cd      	bcs.n	20000496 <__udivsi3+0x3a>
200004fa:	09c3      	lsrs	r3, r0, #7
200004fc:	428b      	cmp	r3, r1
200004fe:	d301      	bcc.n	20000504 <__udivsi3+0xa8>
20000500:	01cb      	lsls	r3, r1, #7
20000502:	1ac0      	subs	r0, r0, r3
20000504:	4152      	adcs	r2, r2
20000506:	0983      	lsrs	r3, r0, #6
20000508:	428b      	cmp	r3, r1
2000050a:	d301      	bcc.n	20000510 <__udivsi3+0xb4>
2000050c:	018b      	lsls	r3, r1, #6
2000050e:	1ac0      	subs	r0, r0, r3
20000510:	4152      	adcs	r2, r2
20000512:	0943      	lsrs	r3, r0, #5
20000514:	428b      	cmp	r3, r1
20000516:	d301      	bcc.n	2000051c <__udivsi3+0xc0>
20000518:	014b      	lsls	r3, r1, #5
2000051a:	1ac0      	subs	r0, r0, r3
2000051c:	4152      	adcs	r2, r2
2000051e:	0903      	lsrs	r3, r0, #4
20000520:	428b      	cmp	r3, r1
20000522:	d301      	bcc.n	20000528 <__udivsi3+0xcc>
20000524:	010b      	lsls	r3, r1, #4
20000526:	1ac0      	subs	r0, r0, r3
20000528:	4152      	adcs	r2, r2
2000052a:	08c3      	lsrs	r3, r0, #3
2000052c:	428b      	cmp	r3, r1
2000052e:	d301      	bcc.n	20000534 <__udivsi3+0xd8>
20000530:	00cb      	lsls	r3, r1, #3
20000532:	1ac0      	subs	r0, r0, r3
20000534:	4152      	adcs	r2, r2
20000536:	0883      	lsrs	r3, r0, #2
20000538:	428b      	cmp	r3, r1
2000053a:	d301      	bcc.n	20000540 <__udivsi3+0xe4>
2000053c:	008b      	lsls	r3, r1, #2
2000053e:	1ac0      	subs	r0, r0, r3
20000540:	4152      	adcs	r2, r2
20000542:	0843      	lsrs	r3, r0, #1
20000544:	428b      	cmp	r3, r1
20000546:	d301      	bcc.n	2000054c <__udivsi3+0xf0>
20000548:	004b      	lsls	r3, r1, #1
2000054a:	1ac0      	subs	r0, r0, r3
2000054c:	4152      	adcs	r2, r2
2000054e:	1a41      	subs	r1, r0, r1
20000550:	d200      	bcs.n	20000554 <__udivsi3+0xf8>
20000552:	4601      	mov	r1, r0
20000554:	4152      	adcs	r2, r2
20000556:	4610      	mov	r0, r2
20000558:	4770      	bx	lr
2000055a:	e7ff      	b.n	2000055c <__udivsi3+0x100>
2000055c:	b501      	push	{r0, lr}
2000055e:	2000      	movs	r0, #0
20000560:	f000 f806 	bl	20000570 <__aeabi_idiv0>
20000564:	bd02      	pop	{r1, pc}
20000566:	46c0      	nop			; (mov r8, r8)

20000568 <__aeabi_uidivmod>:
20000568:	2900      	cmp	r1, #0
2000056a:	d0f7      	beq.n	2000055c <__udivsi3+0x100>
2000056c:	e776      	b.n	2000045c <__udivsi3>
2000056e:	4770      	bx	lr

20000570 <__aeabi_idiv0>:
20000570:	4770      	bx	lr
20000572:	46c0      	nop			; (mov r8, r8)
20000574:	61666c41 	cmnvs	r6, r1, asr #24
20000578:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
2000057c:	6b736972 	blvs	21cdab4c <__aeabi_idiv0+0x1cda5dc>
20000580:	00000020 	andeq	r0, r0, r0, lsr #32
20000584:	70736944 	rsbsvc	r6, r3, r4, asr #18
20000588:	2079616c 	rsbscs	r6, r9, ip, ror #2
2000058c:	6574202d 	ldrbvs	r2, [r4, #-45]!	; 0xffffffd3
20000590:	00007473 	andeq	r7, r0, r3, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000032a 	andeq	r0, r0, sl, lsr #6
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000073 	andeq	r0, r0, r3, ror r0
  10:	00000c0c 	andeq	r0, r0, ip, lsl #24
  14:	00016500 	andeq	r6, r1, r0, lsl #10
	...
  24:	00570200 	subseq	r0, r7, r0, lsl #4
  28:	ca010000 	bgt	40030 <startup-0x1ffbffd0>
  2c:	00008905 	andeq	r8, r0, r5, lsl #18
  30:	0003ce00 	andeq	ip, r3, r0, lsl #28
  34:	00008e20 	andeq	r8, r0, r0, lsr #28
  38:	899c0100 	ldmibhi	ip, {r8}
  3c:	03000000 	movweq	r0, #0
  40:	000001aa 	andeq	r0, r0, sl, lsr #3
  44:	890fca01 	stmdbhi	pc, {r0, r9, fp, lr, pc}	; <UNPREDICTABLE>
  48:	02000000 	andeq	r0, r0, #0
  4c:	ef034491 	svc	0x00034491
  50:	01000001 	tsteq	r0, r1
  54:	00901cca 	addseq	r1, r0, sl, asr #25
  58:	91020000 	mrsls	r0, (UNDEF: 2)
  5c:	00730440 	rsbseq	r0, r3, r0, asr #8
  60:	9608cc01 	strls	ip, [r8], -r1, lsl #24
  64:	02000000 	andeq	r0, r0, #0
  68:	af056c91 	svcge	0x00056c91
  6c:	01000001 	tsteq	r0, r1
  70:	00a307cd 	adceq	r0, r3, sp, asr #15
  74:	91020000 	mrsls	r0, (UNDEF: 2)
  78:	01b5055c 			; <UNDEFINED> instruction: 0x01b5055c
  7c:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
  80:	0000ba07 	andeq	fp, r0, r7, lsl #20
  84:	4c910200 	lfmmi	f0, 4, [r1], {0}
  88:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
  8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
  90:	00960407 	addseq	r0, r6, r7, lsl #8
  94:	04070000 	streq	r0, [r7], #-0
  98:	0000009c 	muleq	r0, ip, r0
  9c:	60080108 	andvs	r0, r8, r8, lsl #2
  a0:	09000001 	stmdbeq	r0, {r0}
  a4:	0000009c 	muleq	r0, ip, r0
  a8:	000000b3 	strheq	r0, [r0], -r3
  ac:	0000b30a 	andeq	fp, r0, sl, lsl #6
  b0:	08000d00 	stmdaeq	r0, {r8, sl, fp}
  b4:	00350704 	eorseq	r0, r5, r4, lsl #14
  b8:	9c090000 	stcls	0, cr0, [r9], {-0}
  bc:	ca000000 	bgt	c4 <startup-0x1fffff3c>
  c0:	0a000000 	beq	c8 <startup-0x1fffff38>
  c4:	000000b3 	strheq	r0, [r0], -r3
  c8:	f40b000e 	vst4.8	{d0-d3}, [fp], lr
  cc:	01000001 	tsteq	r0, r1
  d0:	033406b2 	teqeq	r4, #186646528	; 0xb200000
  d4:	009a2000 	addseq	r2, sl, r0
  d8:	9c010000 	stcls	0, cr0, [r1], {-0}
  dc:	0001910c 	andeq	r9, r1, ip, lsl #2
  e0:	06ac0100 	strteq	r0, [ip], r0, lsl #2
  e4:	20000310 	andcs	r0, r0, r0, lsl r3
  e8:	00000024 	andeq	r0, r0, r4, lsr #32
  ec:	cb0d9c01 	blgt	3670f8 <startup-0x1fc98f08>
  f0:	01000001 	tsteq	r0, r1
  f4:	02d406a4 	sbcseq	r0, r4, #164, 12	; 0xa400000
  f8:	003c2000 	eorseq	r2, ip, r0
  fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 100:	00000112 	andeq	r0, r0, r2, lsl r1
 104:	0100630e 	tsteq	r0, lr, lsl #6
 108:	011226a4 	tsteq	r2, r4, lsr #13
 10c:	91020000 	mrsls	r0, (UNDEF: 2)
 110:	01080077 	tsteq	r8, r7, ror r0
 114:	00015708 	andeq	r5, r1, r8, lsl #14
 118:	01840d00 	orreq	r0, r4, r0, lsl #26
 11c:	9c010000 	stcls	0, cr0, [r1], {-0}
 120:	00029206 	andeq	r9, r2, r6, lsl #4
 124:	00004220 	andeq	r4, r0, r0, lsr #4
 128:	599c0100 	ldmibpl	ip, {r8}
 12c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 130:	9c010078 	stcls	0, cr0, [r1], {120}	; 0x78
 134:	00008918 	andeq	r8, r0, r8, lsl r9
 138:	6c910200 	lfmvs	f0, 4, [r1], {0}
 13c:	0100790e 	tsteq	r0, lr, lsl #18
 140:	00891f9c 	umulleq	r1, r9, ip, pc	; <UNPREDICTABLE>
 144:	91020000 	mrsls	r0, (UNDEF: 2)
 148:	01120568 	tsteq	r2, r8, ror #10
 14c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
 150:	00009c07 	andeq	r9, r0, r7, lsl #24
 154:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 158:	00000d00 	andeq	r0, r0, r0, lsl #26
 15c:	8d010000 	stchi	0, cr0, [r1, #-0]
 160:	00025206 	andeq	r5, r2, r6, lsl #4
 164:	00004020 	andeq	r4, r0, r0, lsr #32
 168:	7e9c0100 	fmlvce	f0, f4, f0
 16c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 170:	0100736d 	tsteq	r0, sp, ror #6
 174:	00b31f8d 	adcseq	r1, r3, sp, lsl #31
 178:	91020000 	mrsls	r0, (UNDEF: 2)
 17c:	250d0074 	strcs	r0, [sp, #-116]	; 0xffffff8c
 180:	01000001 	tsteq	r0, r1
 184:	020c067c 	andeq	r0, ip, #124, 12	; 0x7c00000
 188:	00462000 	subeq	r2, r6, r0
 18c:	9c010000 	stcls	0, cr0, [r1], {-0}
 190:	000001a3 	andeq	r0, r0, r3, lsr #3
 194:	0073750e 	rsbseq	r7, r3, lr, lsl #10
 198:	b31f7c01 	tstlt	pc, #256	; 0x100
 19c:	02000000 	andeq	r0, r0, #0
 1a0:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
 1a4:	00000119 	andeq	r0, r0, r9, lsl r1
 1a8:	c8067001 	stmdagt	r6, {r0, ip, sp, lr}
 1ac:	44200001 	strtmi	r0, [r0], #-1
 1b0:	01000000 	mrseq	r0, (UNDEF: 0)
 1b4:	01010d9c 			; <UNDEFINED> instruction: 0x01010d9c
 1b8:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
 1bc:	00019e06 	andeq	r9, r1, r6, lsl #28
 1c0:	00002a20 	andeq	r2, r0, r0, lsr #20
 1c4:	db9c0100 	blle	fe7005cc <__aeabi_idiv0+0xde70005c>
 1c8:	03000001 	movweq	r0, #1
 1cc:	00000152 	andeq	r0, r0, r2, asr r1
 1d0:	12266901 	eorne	r6, r6, #16384	; 0x4000
 1d4:	02000001 	andeq	r0, r0, #1
 1d8:	0d007791 	stceq	7, cr7, [r0, #-580]	; 0xfffffdbc
 1dc:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
 1e0:	74066201 	strvc	r6, [r6], #-513	; 0xfffffdff
 1e4:	2a200001 	bcs	8001f0 <startup-0x1f7ffe10>
 1e8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ec:	0002019c 	muleq	r2, ip, r1
 1f0:	019a0300 	orrseq	r0, sl, r0, lsl #6
 1f4:	62010000 	andvs	r0, r1, #0
 1f8:	00011225 	andeq	r1, r1, r5, lsr #4
 1fc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 200:	01470200 	mrseq	r0, (UNDEF: 103)
 204:	57010000 	strpl	r0, [r1, -r0]
 208:	00009c06 	andeq	r9, r0, r6, lsl #24
 20c:	00013400 	andeq	r3, r1, r0, lsl #8
 210:	00004020 	andeq	r4, r0, r0, lsr #32
 214:	299c0100 	ldmibcs	ip, {r8}
 218:	04000002 	streq	r0, [r0], #-2
 21c:	59010063 	stmdbpl	r1, {r0, r1, r5, r6}
 220:	00009c07 	andeq	r9, r0, r7, lsl #24
 224:	6f910200 	svcvs	0x00910200
 228:	00ef0200 	rsceq	r0, pc, r0, lsl #4
 22c:	4c010000 	stcmi	0, cr0, [r1], {-0}
 230:	00009c06 	andeq	r9, r0, r6, lsl #24
 234:	0000f400 	andeq	pc, r0, r0, lsl #8
 238:	00004020 	andeq	r4, r0, r0, lsr #32
 23c:	519c0100 	orrspl	r0, ip, r0, lsl #2
 240:	04000002 	streq	r0, [r0], #-2
 244:	4e010063 	cdpmi	0, 0, cr0, cr1, cr3, {3}
 248:	00009c07 	andeq	r9, r0, r7, lsl #24
 24c:	6f910200 	svcvs	0x00910200
 250:	01310200 	teqeq	r1, r0, lsl #4
 254:	41010000 	mrsmi	r0, (UNDEF: 1)
 258:	00009c06 	andeq	r9, r0, r6, lsl #24
 25c:	0000c000 	andeq	ip, r0, r0
 260:	00003420 	andeq	r3, r0, r0, lsr #8
 264:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
 268:	04000002 	streq	r0, [r0], #-2
 26c:	43010063 	movwmi	r0, #4195	; 0x1063
 270:	00009c07 	andeq	r9, r0, r7, lsl #24
 274:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 278:	0001190f 	andeq	r1, r1, pc, lsl #18
 27c:	023e0100 	eorseq	r0, lr, #0, 2
 280:	00000089 	andeq	r0, r0, r9, lsl #1
 284:	0d000010 	stceq	0, cr0, [r0, #-64]	; 0xffffffc0
 288:	0000005c 	andeq	r0, r0, ip, asr r0
 28c:	90063901 	andls	r3, r6, r1, lsl #18
 290:	30200000 	eorcc	r0, r0, r0
 294:	01000000 	mrseq	r0, (UNDEF: 0)
 298:	0002b99c 	muleq	r2, ip, r9
 29c:	00630e00 	rsbeq	r0, r3, r0, lsl #28
 2a0:	122c3901 	eorne	r3, ip, #16384	; 0x4000
 2a4:	02000001 	andeq	r0, r0, #1
 2a8:	190f7791 	stmdbne	pc, {r0, r4, r7, r8, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
 2ac:	01000001 	tsteq	r0, r1
 2b0:	0089023e 	addeq	r0, r9, lr, lsr r2
 2b4:	00100000 	andseq	r0, r0, r0
 2b8:	00421100 	subeq	r1, r2, r0, lsl #2
 2bc:	31010000 	mrscc	r0, (UNDEF: 1)
 2c0:	00004806 	andeq	r4, r0, r6, lsl #16
 2c4:	00004820 	andeq	r4, r0, r0, lsr #16
 2c8:	ea9c0100 	b	fe7006d0 <__aeabi_idiv0+0xde700160>
 2cc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 2d0:	31010078 	tstcc	r1, r8, ror r0
 2d4:	0001122a 	andeq	r1, r1, sl, lsr #4
 2d8:	6f910200 	svcvs	0x00910200
 2dc:	01006304 	tsteq	r0, r4, lsl #6
 2e0:	009c0733 	addseq	r0, ip, r3, lsr r7
 2e4:	91020000 	mrsls	r0, (UNDEF: 2)
 2e8:	dc110077 	ldcle	0, cr0, [r1], {119}	; 0x77
 2ec:	01000001 	tsteq	r0, r1
 2f0:	00100629 	andseq	r0, r0, r9, lsr #12
 2f4:	00382000 	eorseq	r2, r8, r0
 2f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 2fc:	0000031b 	andeq	r0, r0, fp, lsl r3
 300:	0100780e 	tsteq	r0, lr, lsl #16
 304:	01122829 	tsteq	r2, r9, lsr #16
 308:	91020000 	mrsls	r0, (UNDEF: 2)
 30c:	0063046f 	rsbeq	r0, r3, pc, ror #8
 310:	9c072b01 			; <UNDEFINED> instruction: 0x9c072b01
 314:	02000000 	andeq	r0, r0, #0
 318:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
 31c:	000001a2 	andeq	r0, r0, r2, lsr #3
 320:	00060601 	andeq	r0, r6, r1, lsl #12
 324:	0c200000 	stceq	0, cr0, [r0], #-0
 328:	01000000 	mrseq	r0, (UNDEF: 0)
 32c:	Address 0x0000032c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	0b390b3b 	bleq	e42d10 <startup-0x1f1bd2f0>
  20:	13491927 	movtne	r1, #39207	; 0x9927
  24:	06120111 			; <UNDEFINED> instruction: 0x06120111
  28:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  2c:	00130119 	andseq	r0, r3, r9, lsl r1
  30:	00050300 	andeq	r0, r5, r0, lsl #6
  34:	0b3a0e03 	bleq	e83848 <startup-0x1f17c7b8>
  38:	0b390b3b 	bleq	e42d2c <startup-0x1f1bd2d4>
  3c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  40:	34040000 	strcc	r0, [r4], #-0
  44:	3a080300 	bcc	200c4c <startup-0x1fdff3b4>
  48:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  50:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  58:	0b3b0b3a 	bleq	ec2d48 <startup-0x1f13d2b8>
  5c:	13490b39 	movtne	r0, #39737	; 0x9b39
  60:	00001802 	andeq	r1, r0, r2, lsl #16
  64:	0b002406 	bleq	9084 <startup-0x1fff6f7c>
  68:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  6c:	07000008 	streq	r0, [r0, -r8]
  70:	0b0b000f 	bleq	2c00b4 <startup-0x1fd3ff4c>
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	0b002408 	bleq	90a0 <startup-0x1fff6f60>
  7c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  80:	0900000e 	stmdbeq	r0, {r1, r2, r3}
  84:	13490101 	movtne	r0, #37121	; 0x9101
  88:	00001301 	andeq	r1, r0, r1, lsl #6
  8c:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
  90:	000b2f13 	andeq	r2, fp, r3, lsl pc
  94:	002e0b00 	eoreq	r0, lr, r0, lsl #22
  98:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  9c:	0b3b0b3a 	bleq	ec2d8c <startup-0x1f13d274>
  a0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  ac:	0c000019 	stceq	0, cr0, [r0], {25}
  b0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  b4:	0b3a0e03 	bleq	e838c8 <startup-0x1f17c738>
  b8:	0b390b3b 	bleq	e42dac <startup-0x1f1bd254>
  bc:	01111927 	tsteq	r1, r7, lsr #18
  c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  c4:	00194297 	mulseq	r9, r7, r2
  c8:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
  cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  d0:	0b3b0b3a 	bleq	ec2dc0 <startup-0x1f13d240>
  d4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  dc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  e0:	00130119 	andseq	r0, r3, r9, lsl r1
  e4:	00050e00 	andeq	r0, r5, r0, lsl #28
  e8:	0b3a0803 	bleq	e820fc <startup-0x1f17df04>
  ec:	0b390b3b 	bleq	e42de0 <startup-0x1f1bd220>
  f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  f4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  f8:	03193f01 	tsteq	r9, #1, 30
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 104:	00193c13 	andseq	r3, r9, r3, lsl ip
 108:	00181000 	andseq	r1, r8, r0
 10c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 110:	03193f01 	tsteq	r9, #1, 30
 114:	3b0b3a0e 	blcc	2ce954 <startup-0x1fd316ac>
 118:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 11c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 120:	97184006 	ldrls	r4, [r8, -r6]
 124:	13011942 	movwne	r1, #6466	; 0x1942
 128:	Address 0x00000128 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000044c 	andeq	r0, r0, ip, asr #8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000045c 	andcs	r0, r0, ip, asr r4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000025a 	andeq	r0, r0, sl, asr r2
   4:	003f0003 	eorseq	r0, pc, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	44010000 	strmi	r0, [r1], #-0
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	616c2f70 	smcvs	49904	; 0xc2f0
  24:	61726f62 	cmnvs	r2, r2, ror #30
  28:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  2c:	612f7265 			; <UNDEFINED> instruction: 0x612f7265
  30:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  34:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  38:	73000070 	movwvc	r0, #112	; 0x70
  3c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  40:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  44:	00000100 	andeq	r0, r0, r0, lsl #2
  48:	00010500 	andeq	r0, r1, r0, lsl #10
  4c:	00000205 	andeq	r0, r0, r5, lsl #4
  50:	13182000 	tstne	r8, #0
  54:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  58:	01000302 	tsteq	r0, r2, lsl #6
  5c:	00010501 	andeq	r0, r1, r1, lsl #10
  60:	00100205 	andseq	r0, r0, r5, lsl #4
  64:	29032000 	stmdbcs	r3, {sp}
  68:	68060501 	stmdavs	r6, {r0, r8, sl}
  6c:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
  70:	02054b12 	andeq	r4, r5, #18432	; 0x4800
  74:	20120566 	andscs	r0, r2, r6, ror #10
  78:	6a4b0105 	bvs	12c0494 <startup-0x1ed3fb6c>
  7c:	05680605 	strbeq	r0, [r8, #-1541]!	; 0xfffff9fb
  80:	08052004 	stmdaeq	r5, {r2, sp}
  84:	9e04054b 	cfsh32ls	mvfx0, mvfx4, #43
  88:	052f0205 	streq	r0, [pc, #-517]!	; fffffe8b <__aeabi_idiv0+0xdffff91b>
  8c:	01052012 	tsteq	r5, r2, lsl r0
  90:	02056967 	andeq	r6, r5, #1687552	; 0x19c000
  94:	13053d67 	movwne	r3, #23911	; 0x5d67
  98:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
  9c:	2f01053d 	svccs	0x0001053d
  a0:	3e020569 	cfsh32cc	mvfx0, mvfx2, #57
  a4:	06052f3d 			; <UNDEFINED> instruction: 0x06052f3d
  a8:	2004052f 	andcs	r0, r4, pc, lsr #10
  ac:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
  b0:	01053d09 	tsteq	r5, r9, lsl #26
  b4:	0205772f 	andeq	r7, r5, #12320768	; 0xbc0000
  b8:	2010053e 	andscs	r0, r0, lr, lsr r5
  bc:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; b0 <startup-0x1fffff50>
  c0:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
  c4:	10055902 	andne	r5, r5, r2, lsl #18
  c8:	2f090520 	svccs	0x00090520
  cc:	a12f0105 			; <UNDEFINED> instruction: 0xa12f0105
  d0:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
  d4:	02052010 	andeq	r2, r5, #16
  d8:	06053d2f 	streq	r3, [r5], -pc, lsr #26
  dc:	5902053d 	stmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
  e0:	05201005 	streq	r1, [r0, #-5]!
  e4:	01052f09 	tsteq	r5, r9, lsl #30
  e8:	0205a12f 	andeq	sl, r5, #-1073741813	; 0xc000000b
  ec:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
  f0:	054d5901 	strbeq	r5, [sp, #-2305]	; 0xfffff6ff
  f4:	3d3d6702 	ldccc	7, cr6, [sp, #-8]!
  f8:	4d590105 	ldfmie	f0, [r9, #-20]	; 0xffffffec
  fc:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 100:	0505200f 	streq	r2, [r5, #-15]
 104:	200f052f 	andcs	r0, pc, pc, lsr #10
 108:	052f0505 	streq	r0, [pc, #-1285]!	; fffffc0b <__aeabi_idiv0+0xdffff69b>
 10c:	0505200e 	streq	r2, [r5, #-14]
 110:	200f052f 	andcs	r0, pc, pc, lsr #10
 114:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
 118:	0402000d 	streq	r0, [r2], #-13
 11c:	17052001 	strne	r2, [r5, -r1]
 120:	01040200 	mrseq	r0, R12_usr
 124:	000a052e 	andeq	r0, sl, lr, lsr #10
 128:	3c010402 	cfstrscc	mvf0, [r1], {2}
 12c:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
 130:	0105200f 	tsteq	r5, pc
 134:	0805a12f 	stmdaeq	r5, {r0, r1, r2, r3, r5, r8, sp, pc}
 138:	8307054d 	movwhi	r0, #30029	; 0x754d
 13c:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 140:	2f2f2209 	svccs	0x002f2209
 144:	2f0b052f 	svccs	0x000b052f
 148:	7a030a05 	bvc	c2964 <startup-0x1ff3d69c>
 14c:	4401053c 	strmi	r0, [r1], #-1340	; 0xfffffac4
 150:	4e08055b 	cfrshl32mi	mvfx8, mvfx11, r0
 154:	05830705 	streq	r0, [r3, #1797]	; 0x705
 158:	09053e0a 	stmdbeq	r5, {r1, r3, r9, sl, fp, ip, sp}
 15c:	590b0522 	stmdbpl	fp, {r1, r5, r8, sl}
 160:	05390a05 	ldreq	r0, [r9, #-2565]!	; 0xfffff5fb
 164:	055b4101 	ldrbeq	r4, [fp, #-257]	; 0xfffffeff
 168:	07055912 	smladeq	r5, r2, r9, r5
 16c:	4b04052e 	blmi	10162c <startup-0x1fefe9d4>
 170:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 174:	01055902 	tsteq	r5, r2, lsl #18
 178:	07054d9f 			; <UNDEFINED> instruction: 0x07054d9f
 17c:	000b0567 	andeq	r0, fp, r7, ror #10
 180:	20010402 	andcs	r0, r1, r2, lsl #8
 184:	02001f05 	andeq	r1, r0, #5, 30
 188:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 18c:	04020007 	streq	r0, [r2], #-7
 190:	02053c01 	andeq	r3, r5, #256	; 0x100
 194:	05593d2f 	ldrbeq	r3, [r9, #-3375]	; 0xfffff2d1
 198:	054d3d01 	strbeq	r3, [sp, #-3329]	; 0xfffff2ff
 19c:	13052f05 	movwne	r2, #24325	; 0x5f05
 1a0:	2f050520 	svccs	0x00050520
 1a4:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
 1a8:	05a12f01 	streq	r2, [r1, #3841]!	; 0xf01
 1ac:	0b053007 	bleq	14c1d0 <startup-0x1feb3e30>
 1b0:	01040200 	mrseq	r0, R12_usr
 1b4:	001f0520 	andseq	r0, pc, r0, lsr #10
 1b8:	3c010402 	cfstrscc	mvf0, [r1], {2}
 1bc:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 1c0:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 1c4:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 1c8:	053e0705 	ldreq	r0, [lr, #-1797]!	; 0xfffff8fb
 1cc:	0402000b 	streq	r0, [r2], #-11
 1d0:	1f052001 	svcne	0x00052001
 1d4:	01040200 	mrseq	r0, R12_usr
 1d8:	0007053c 	andeq	r0, r7, ip, lsr r5
 1dc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 1e0:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1d4 <startup-0x1ffffe2c>
 1e4:	3e07053d 	mcrcc	5, 0, r0, cr7, cr13, {1}
 1e8:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 1ec:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 1f0:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 1f4:	07053c01 	streq	r3, [r5, -r1, lsl #24]
 1f8:	01040200 	mrseq	r0, R12_usr
 1fc:	2f02053c 	svccs	0x0002053c
 200:	07053d3d 	smladxeq	r5, sp, sp, r3
 204:	000b053e 	andeq	r0, fp, lr, lsr r5
 208:	20010402 	andcs	r0, r1, r2, lsl #8
 20c:	02001f05 	andeq	r1, r0, #5, 30
 210:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 214:	04020007 	streq	r0, [r2], #-7
 218:	02053c01 	andeq	r3, r5, #256	; 0x100
 21c:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 220:	053f3d01 	ldreq	r3, [pc, #-3329]!	; fffff527 <__aeabi_idiv0+0xdfffefb7>
 224:	05755a07 	ldrbeq	r5, [r5, #-2567]!	; 0xfffff5f9
 228:	2f2f9202 	svccs	0x002f9202
 22c:	054b0405 	strbeq	r0, [fp, #-1029]	; 0xfffffbfb
 230:	17052f07 	strne	r2, [r5, -r7, lsl #30]
 234:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
 238:	05490905 	strbeq	r0, [r9, #-2309]	; 0xfffff6fb
 23c:	02052e07 	andeq	r2, r5, #7, 28	; 0x70
 240:	4b040530 	blmi	101708 <startup-0x1fefe8f8>
 244:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
 248:	03052117 	movweq	r2, #20759	; 0x5117
 24c:	4909053c 	stmdbmi	r9, {r2, r3, r4, r5, r8, sl}
 250:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 254:	01053009 	tsteq	r5, r9
 258:	00080222 	andeq	r0, r8, r2, lsr #4
 25c:	Address 0x0000025c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	6d2f3a44 	vstmdbvs	pc!, {s6-s73}
  10:	6c2f706f 	stcvs	0, cr7, [pc], #-444	; fffffe5c <__aeabi_idiv0+0xdffff8ec>
  14:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  18:	6f697461 	svcvs	0x00697461
  1c:	2f72656e 	svccs	0x0072656e
  20:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  24:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
  28:	732f7073 			; <UNDEFINED> instruction: 0x732f7073
  2c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  30:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  34:	736e7500 	cmnvc	lr, #0, 10
  38:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  3c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  40:	73610074 	cmnvc	r1, #116	; 0x74
  44:	5f696963 	svcpl	0x00696963
  48:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  4c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  50:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  54:	6d007261 	sfmvs	f7, 4, [r0, #-388]	; 0xfffffe7c
  58:	006e6961 	rsbeq	r6, lr, r1, ror #18
  5c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  60:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  64:	5f657469 	svcpl	0x00657469
  68:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  6c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  70:	47007265 	strmi	r7, [r0, -r5, ror #4]
  74:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  78:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
  7c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
  80:	31303220 	teqcc	r0, r0, lsr #4
  84:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
  88:	72282035 	eorvc	r2, r8, #53	; 0x35
  8c:	61656c65 	cmnvs	r5, r5, ror #24
  90:	20296573 	eorcs	r6, r9, r3, ror r5
  94:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  98:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  9c:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
  a0:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  a4:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  a8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  ac:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  b0:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
  b4:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
  b8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  bc:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  c0:	6f6c666d 	svcvs	0x006c666d
  c4:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  c8:	733d6962 	teqvc	sp, #1605632	; 0x188000
  cc:	2074666f 	rsbscs	r6, r4, pc, ror #12
  d0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  d4:	613d6863 	teqvs	sp, r3, ror #16
  d8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  dc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  e0:	4f2d2067 	svcmi	0x002d2067
  e4:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  e8:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  ec:	61003939 	tstvs	r0, r9, lsr r9
  f0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  f4:	6165725f 	cmnvs	r5, pc, asr r2
  f8:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
  fc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 100:	63736100 	cmnvs	r3, #0, 2
 104:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 108:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 10c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 110:	64610061 	strbtvs	r0, [r1], #-97	; 0xffffff9f
 114:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 118:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 11c:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 120:	736e3035 	cmnvc	lr, #53	; 0x35
 124:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 128:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 6e <startup-0x1fffff92>	; <UNPREDICTABLE>
 12c:	6f726369 	svcvs	0x00726369
 130:	63736100 	cmnvs	r3, #0, 2
 134:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 138:	5f646165 	svcpl	0x00646165
 13c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 140:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 144:	61007265 	tstvs	r0, r5, ror #4
 148:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 14c:	6165725f 	cmnvs	r5, pc, asr r2
 150:	61645f64 	cmnvs	r4, r4, ror #30
 154:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
 158:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 15c:	2064656e 	rsbcs	r6, r4, lr, ror #10
 160:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 164:	5c3a4400 	cfldrspl	mvf4, [sl], #-0
 168:	5c706f6d 	ldclpl	15, cr6, [r0], #-436	; 0xfffffe4c
 16c:	6f62616c 	svcvs	0x0062616c
 170:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 174:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 178:	6373615c 	cmnvs	r3, #92, 2
 17c:	645f6969 	ldrbvs	r6, [pc], #-2409	; 184 <startup-0x1ffffe7c>
 180:	00707369 	rsbseq	r7, r0, r9, ror #6
 184:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 188:	6f675f69 	svcvs	0x00675f69
 18c:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 190:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 194:	70615f74 	rsbvc	r5, r1, r4, ror pc
 198:	6f630070 	svcvs	0x00630070
 19c:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 1a0:	74730064 	ldrbtvc	r0, [r3], #-100	; 0xffffff9c
 1a4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 1a8:	72610070 	rsbvc	r0, r1, #112	; 0x70
 1ac:	74006367 	strvc	r6, [r0], #-871	; 0xfffffc99
 1b0:	31747365 	cmncc	r4, r5, ror #6
 1b4:	73657400 	cmnvc	r5, #0, 8
 1b8:	61003274 	tstvs	r0, r4, ror r2
 1bc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1c0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1c4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 1c8:	6100646d 	tstvs	r0, sp, ror #8
 1cc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1d0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1d4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 1d8:	00726168 	rsbseq	r6, r2, r8, ror #2
 1dc:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1e0:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 1e4:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 1e8:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 1ec:	61007465 	tstvs	r0, r5, ror #8
 1f0:	00766772 	rsbseq	r6, r6, r2, ror r7
 1f4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1f8:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 1fc:	Address 0x000001fc is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000038 	andeq	r0, r0, r8, lsr r0
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  3c:	00000007 	andeq	r0, r0, r7
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000048 	andcs	r0, r0, r8, asr #32
  4c:	00000048 	andeq	r0, r0, r8, asr #32
  50:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  54:	41018e02 	tstmi	r1, r2, lsl #28
  58:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  5c:	00000007 	andeq	r0, r0, r7
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	20000090 	mulcs	r0, r0, r0
  6c:	00000030 	andeq	r0, r0, r0, lsr r0
  70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  74:	41018e02 	tstmi	r1, r2, lsl #28
  78:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  7c:	00000007 	andeq	r0, r0, r7
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200000c0 	andcs	r0, r0, r0, asr #1
  8c:	00000034 	andeq	r0, r0, r4, lsr r0
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  9c:	00000007 	andeq	r0, r0, r7
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	200000f4 	strdcs	r0, [r0], -r4
  ac:	00000040 	andeq	r0, r0, r0, asr #32
  b0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  b4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  b8:	180e4101 	stmdane	lr, {r0, r8, lr}
  bc:	00070d41 	andeq	r0, r7, r1, asr #26
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000000 	andeq	r0, r0, r0
  c8:	20000134 	andcs	r0, r0, r4, lsr r1
  cc:	00000040 	andeq	r0, r0, r0, asr #32
  d0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  d4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  d8:	180e4101 	stmdane	lr, {r0, r8, lr}
  dc:	00070d41 	andeq	r0, r7, r1, asr #26
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	20000174 	andcs	r0, r0, r4, ror r1
  ec:	0000002a 	andeq	r0, r0, sl, lsr #32
  f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f4:	41018e02 	tstmi	r1, r2, lsl #28
  f8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  fc:	00000007 	andeq	r0, r0, r7
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	00000000 	andeq	r0, r0, r0
 108:	2000019e 	mulcs	r0, lr, r1
 10c:	0000002a 	andeq	r0, r0, sl, lsr #32
 110:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 114:	41018e02 	tstmi	r1, r2, lsl #28
 118:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 11c:	00000007 	andeq	r0, r0, r7
 120:	00000018 	andeq	r0, r0, r8, lsl r0
 124:	00000000 	andeq	r0, r0, r0
 128:	200001c8 	andcs	r0, r0, r8, asr #3
 12c:	00000044 	andeq	r0, r0, r4, asr #32
 130:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 134:	41018e02 	tstmi	r1, r2, lsl #28
 138:	0000070d 	andeq	r0, r0, sp, lsl #14
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	2000020c 	andcs	r0, r0, ip, lsl #4
 148:	00000046 	andeq	r0, r0, r6, asr #32
 14c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 150:	41018e02 	tstmi	r1, r2, lsl #28
 154:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 158:	00000007 	andeq	r0, r0, r7
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	20000252 	andcs	r0, r0, r2, asr r2
 168:	00000040 	andeq	r0, r0, r0, asr #32
 16c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 170:	41018e02 	tstmi	r1, r2, lsl #28
 174:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 178:	00000007 	andeq	r0, r0, r7
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	00000000 	andeq	r0, r0, r0
 184:	20000292 	mulcs	r0, r2, r2
 188:	00000042 	andeq	r0, r0, r2, asr #32
 18c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 190:	41018e02 	tstmi	r1, r2, lsl #28
 194:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 198:	00000007 	andeq	r0, r0, r7
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	200002d4 	ldrdcs	r0, [r0], -r4
 1a8:	0000003c 	andeq	r0, r0, ip, lsr r0
 1ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b0:	41018e02 	tstmi	r1, r2, lsl #28
 1b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b8:	00000007 	andeq	r0, r0, r7
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	20000310 	andcs	r0, r0, r0, lsl r3
 1c8:	00000024 	andeq	r0, r0, r4, lsr #32
 1cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d0:	41018e02 	tstmi	r1, r2, lsl #28
 1d4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d8:	00000018 	andeq	r0, r0, r8, lsl r0
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	20000334 	andcs	r0, r0, r4, lsr r3
 1e4:	0000009a 	muleq	r0, sl, r0
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	200003ce 	andcs	r0, r0, lr, asr #7
 200:	0000008e 	andeq	r0, r0, lr, lsl #1
 204:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 208:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41400e 	stcleq	0, cr4, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000000c 	andeq	r0, r0, ip
 21c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 220:	7c010001 	stcvc	0, cr0, [r1], {1}
 224:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 228:	0000000c 	andeq	r0, r0, ip
 22c:	00000218 	andeq	r0, r0, r8, lsl r2
 230:	2000045d 	andcs	r0, r0, sp, asr r4
 234:	0000010a 	andeq	r0, r0, sl, lsl #2
