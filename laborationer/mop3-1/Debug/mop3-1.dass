
Debug/mop3-1:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 *
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f930 	bl	20000268 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
#define STK_LOAD 	((volatile unsigned int *)(0xE000E014))
#define STK_VAL 	((volatile unsigned int *)(0xE000E018))
#define SIMULATOR 

void delay_250ns( void )
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    /* SystemCoreClock = 168000000 */
    *STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ( (168/4) -1 );
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;  //sätter enable och clksource
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    // börjar räkna
    while( (*STK_CTRL & 0x10000 )== 0 );    //vänta till countflag=1
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
    *STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_micro>:

void delay_micro(unsigned int us)
{
20000054:	b580      	push	{r7, lr}
20000056:	b082      	sub	sp, #8
20000058:	af00      	add	r7, sp, #0
2000005a:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    us = us / 1000;
2000005c:	687b      	ldr	r3, [r7, #4]
2000005e:	22fa      	movs	r2, #250	; 0xfa
20000060:	0091      	lsls	r1, r2, #2
20000062:	0018      	movs	r0, r3
20000064:	f000 f922 	bl	200002ac <__udivsi3>
20000068:	0003      	movs	r3, r0
2000006a:	607b      	str	r3, [r7, #4]
    us++;
2000006c:	687b      	ldr	r3, [r7, #4]
2000006e:	3301      	adds	r3, #1
20000070:	607b      	str	r3, [r7, #4]
#endif
    while( us > 0 )
20000072:	e00a      	b.n	2000008a <delay_micro+0x36>
    {
        delay_250ns();
20000074:	f7ff ffcc 	bl	20000010 <delay_250ns>
        delay_250ns();
20000078:	f7ff ffca 	bl	20000010 <delay_250ns>
        delay_250ns();
2000007c:	f7ff ffc8 	bl	20000010 <delay_250ns>
        delay_250ns();
20000080:	f7ff ffc6 	bl	20000010 <delay_250ns>
        us--;
20000084:	687b      	ldr	r3, [r7, #4]
20000086:	3b01      	subs	r3, #1
20000088:	607b      	str	r3, [r7, #4]
    while( us > 0 )
2000008a:	687b      	ldr	r3, [r7, #4]
2000008c:	2b00      	cmp	r3, #0
2000008e:	d1f1      	bne.n	20000074 <delay_micro+0x20>
    }
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	46bd      	mov	sp, r7
20000096:	b002      	add	sp, #8
20000098:	bd80      	pop	{r7, pc}

2000009a <delay_milli>:

void delay_milli(unsigned int ms)
{
2000009a:	b580      	push	{r7, lr}
2000009c:	b082      	sub	sp, #8
2000009e:	af00      	add	r7, sp, #0
200000a0:	6078      	str	r0, [r7, #4]
#ifdef  SIMULATOR
    ms = ms / 1000;
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	22fa      	movs	r2, #250	; 0xfa
200000a6:	0091      	lsls	r1, r2, #2
200000a8:	0018      	movs	r0, r3
200000aa:	f000 f8ff 	bl	200002ac <__udivsi3>
200000ae:	0003      	movs	r3, r0
200000b0:	607b      	str	r3, [r7, #4]
    ms++;
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	3301      	adds	r3, #1
200000b6:	607b      	str	r3, [r7, #4]
#endif
    while(ms > 0)
200000b8:	e007      	b.n	200000ca <delay_milli+0x30>
    {
        delay_micro(1000);
200000ba:	23fa      	movs	r3, #250	; 0xfa
200000bc:	009b      	lsls	r3, r3, #2
200000be:	0018      	movs	r0, r3
200000c0:	f7ff ffc8 	bl	20000054 <delay_micro>
        ms--;
200000c4:	687b      	ldr	r3, [r7, #4]
200000c6:	3b01      	subs	r3, #1
200000c8:	607b      	str	r3, [r7, #4]
    while(ms > 0)
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	2b00      	cmp	r3, #0
200000ce:	d1f4      	bne.n	200000ba <delay_milli+0x20>
    }
}
200000d0:	46c0      	nop			; (mov r8, r8)
200000d2:	46c0      	nop			; (mov r8, r8)
200000d4:	46bd      	mov	sp, r7
200000d6:	b002      	add	sp, #8
200000d8:	bd80      	pop	{r7, pc}

200000da <graphic_initalize>:
__attribute__((naked))
void graphic_initalize(void)
{
200000da:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile (" .HWORD 0xDFF0\n");
	__asm volatile (" BX LR\n");
}
200000de:	46c0      	nop			; (mov r8, r8)

200000e0 <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void)
{
200000e0:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile (" .HWORD 0xDFF1\n");
	__asm volatile (" BX LR\n");
}
200000e4:	46c0      	nop			; (mov r8, r8)

200000e6 <graphic_pixel_set>:


__attribute__((naked))
void graphic_pixel_set( int x, int y)
{
200000e6:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile (" .HWORD 0xDFF2\n");
	__asm volatile (" BX LR\n");
}
200000ea:	46c0      	nop			; (mov r8, r8)

200000ec <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear( int x, int y)
{
200000ec:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile (" .HWORD 0xDFF3\n");
	__asm volatile (" BX LR\n");
}
200000f0:	46c0      	nop			; (mov r8, r8)

200000f2 <swap>:
	POINT p1;
	
} LINE, *PLINE;

void swap(int *a, int *b)
{
200000f2:	b580      	push	{r7, lr}
200000f4:	b084      	sub	sp, #16
200000f6:	af00      	add	r7, sp, #0
200000f8:	6078      	str	r0, [r7, #4]
200000fa:	6039      	str	r1, [r7, #0]
	int temp;
	temp = *a;
200000fc:	687b      	ldr	r3, [r7, #4]
200000fe:	681b      	ldr	r3, [r3, #0]
20000100:	60fb      	str	r3, [r7, #12]
	*a = *b;
20000102:	683b      	ldr	r3, [r7, #0]
20000104:	681a      	ldr	r2, [r3, #0]
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	601a      	str	r2, [r3, #0]
	*b = temp;
2000010a:	683b      	ldr	r3, [r7, #0]
2000010c:	68fa      	ldr	r2, [r7, #12]
2000010e:	601a      	str	r2, [r3, #0]
	return;
20000110:	46c0      	nop			; (mov r8, r8)
}
20000112:	46bd      	mov	sp, r7
20000114:	b004      	add	sp, #16
20000116:	bd80      	pop	{r7, pc}

20000118 <draw_line>:


int draw_line( PLINE l )
{
20000118:	b5b0      	push	{r4, r5, r7, lr}
2000011a:	b090      	sub	sp, #64	; 0x40
2000011c:	af00      	add	r7, sp, #0
2000011e:	6078      	str	r0, [r7, #4]
	
	POINT start = l->p0;
20000120:	2420      	movs	r4, #32
20000122:	193a      	adds	r2, r7, r4
20000124:	687b      	ldr	r3, [r7, #4]
20000126:	0010      	movs	r0, r2
20000128:	0019      	movs	r1, r3
2000012a:	2302      	movs	r3, #2
2000012c:	001a      	movs	r2, r3
2000012e:	f000 f949 	bl	200003c4 <memcpy>
	POINT end = l->p1;
20000132:	251c      	movs	r5, #28
20000134:	1979      	adds	r1, r7, r5
20000136:	687b      	ldr	r3, [r7, #4]
20000138:	2202      	movs	r2, #2
2000013a:	0008      	movs	r0, r1
2000013c:	189b      	adds	r3, r3, r2
2000013e:	2202      	movs	r2, #2
20000140:	0019      	movs	r1, r3
20000142:	f000 f93f 	bl	200003c4 <memcpy>
	
	int x0 = start.x;
20000146:	0022      	movs	r2, r4
20000148:	18bb      	adds	r3, r7, r2
2000014a:	781b      	ldrb	r3, [r3, #0]
2000014c:	61bb      	str	r3, [r7, #24]
	int x1 = end.x;
2000014e:	0029      	movs	r1, r5
20000150:	187b      	adds	r3, r7, r1
20000152:	781b      	ldrb	r3, [r3, #0]
20000154:	617b      	str	r3, [r7, #20]
	int y0 = start.y;
20000156:	18bb      	adds	r3, r7, r2
20000158:	785b      	ldrb	r3, [r3, #1]
2000015a:	613b      	str	r3, [r7, #16]
	int y1 = end.y;
2000015c:	187b      	adds	r3, r7, r1
2000015e:	785b      	ldrb	r3, [r3, #1]
20000160:	60fb      	str	r3, [r7, #12]
	
	int steep;
	
	if(abs(y1 - y0) > abs(x1 - x0))
20000162:	68fa      	ldr	r2, [r7, #12]
20000164:	693b      	ldr	r3, [r7, #16]
20000166:	1ad3      	subs	r3, r2, r3
20000168:	17d9      	asrs	r1, r3, #31
2000016a:	185a      	adds	r2, r3, r1
2000016c:	404a      	eors	r2, r1
2000016e:	6979      	ldr	r1, [r7, #20]
20000170:	69bb      	ldr	r3, [r7, #24]
20000172:	1acb      	subs	r3, r1, r3
20000174:	17d9      	asrs	r1, r3, #31
20000176:	185b      	adds	r3, r3, r1
20000178:	404b      	eors	r3, r1
2000017a:	429a      	cmp	r2, r3
2000017c:	dd02      	ble.n	20000184 <draw_line+0x6c>
		steep = 1;
2000017e:	2301      	movs	r3, #1
20000180:	63fb      	str	r3, [r7, #60]	; 0x3c
20000182:	e001      	b.n	20000188 <draw_line+0x70>
	else
		steep = 0;
20000184:	2300      	movs	r3, #0
20000186:	63fb      	str	r3, [r7, #60]	; 0x3c
	
	if(steep)
20000188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
2000018a:	2b00      	cmp	r3, #0
2000018c:	d00f      	beq.n	200001ae <draw_line+0x96>
	{
		swap(&x0, &y0);
2000018e:	2310      	movs	r3, #16
20000190:	18fa      	adds	r2, r7, r3
20000192:	2318      	movs	r3, #24
20000194:	18fb      	adds	r3, r7, r3
20000196:	0011      	movs	r1, r2
20000198:	0018      	movs	r0, r3
2000019a:	f7ff ffaa 	bl	200000f2 <swap>
		swap(&x1, &y1);
2000019e:	230c      	movs	r3, #12
200001a0:	18fa      	adds	r2, r7, r3
200001a2:	2314      	movs	r3, #20
200001a4:	18fb      	adds	r3, r7, r3
200001a6:	0011      	movs	r1, r2
200001a8:	0018      	movs	r0, r3
200001aa:	f7ff ffa2 	bl	200000f2 <swap>
	}
	
	if(x0 > x1)
200001ae:	69ba      	ldr	r2, [r7, #24]
200001b0:	697b      	ldr	r3, [r7, #20]
200001b2:	429a      	cmp	r2, r3
200001b4:	dd0f      	ble.n	200001d6 <draw_line+0xbe>
	{
		swap(&x0, &x1);
200001b6:	2314      	movs	r3, #20
200001b8:	18fa      	adds	r2, r7, r3
200001ba:	2318      	movs	r3, #24
200001bc:	18fb      	adds	r3, r7, r3
200001be:	0011      	movs	r1, r2
200001c0:	0018      	movs	r0, r3
200001c2:	f7ff ff96 	bl	200000f2 <swap>
		swap(&y0, &y1);
200001c6:	230c      	movs	r3, #12
200001c8:	18fa      	adds	r2, r7, r3
200001ca:	2310      	movs	r3, #16
200001cc:	18fb      	adds	r3, r7, r3
200001ce:	0011      	movs	r1, r2
200001d0:	0018      	movs	r0, r3
200001d2:	f7ff ff8e 	bl	200000f2 <swap>
	}
	
	int error = 0;
200001d6:	2300      	movs	r3, #0
200001d8:	63bb      	str	r3, [r7, #56]	; 0x38
	int ystep;
	int y = y0;
200001da:	693b      	ldr	r3, [r7, #16]
200001dc:	633b      	str	r3, [r7, #48]	; 0x30
	int deltax = x1 - x0;
200001de:	697a      	ldr	r2, [r7, #20]
200001e0:	69bb      	ldr	r3, [r7, #24]
200001e2:	1ad3      	subs	r3, r2, r3
200001e4:	62bb      	str	r3, [r7, #40]	; 0x28
	int deltay = abs(y1 - y0);
200001e6:	68fa      	ldr	r2, [r7, #12]
200001e8:	693b      	ldr	r3, [r7, #16]
200001ea:	1ad3      	subs	r3, r2, r3
200001ec:	17da      	asrs	r2, r3, #31
200001ee:	189b      	adds	r3, r3, r2
200001f0:	4053      	eors	r3, r2
200001f2:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(y0 < y1)
200001f4:	693a      	ldr	r2, [r7, #16]
200001f6:	68fb      	ldr	r3, [r7, #12]
200001f8:	429a      	cmp	r2, r3
200001fa:	da02      	bge.n	20000202 <draw_line+0xea>
		ystep = 1;
200001fc:	2301      	movs	r3, #1
200001fe:	637b      	str	r3, [r7, #52]	; 0x34
20000200:	e002      	b.n	20000208 <draw_line+0xf0>
	else
		ystep = -1;
20000202:	2301      	movs	r3, #1
20000204:	425b      	negs	r3, r3
20000206:	637b      	str	r3, [r7, #52]	; 0x34
	
	for(int x = x0; x < x1; x++)
20000208:	69bb      	ldr	r3, [r7, #24]
2000020a:	62fb      	str	r3, [r7, #44]	; 0x2c
2000020c:	e023      	b.n	20000256 <draw_line+0x13e>
	{
		if(steep)
2000020e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000210:	2b00      	cmp	r3, #0
20000212:	d006      	beq.n	20000222 <draw_line+0x10a>
			graphic_pixel_set(y,x);
20000214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000218:	0011      	movs	r1, r2
2000021a:	0018      	movs	r0, r3
2000021c:	f7ff ff63 	bl	200000e6 <graphic_pixel_set>
20000220:	e005      	b.n	2000022e <draw_line+0x116>
		else
			graphic_pixel_set(x,y);
20000222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20000224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000226:	0011      	movs	r1, r2
20000228:	0018      	movs	r0, r3
2000022a:	f7ff ff5c 	bl	200000e6 <graphic_pixel_set>
			
		error = error + deltay;
2000022e:	6bba      	ldr	r2, [r7, #56]	; 0x38
20000230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000232:	18d3      	adds	r3, r2, r3
20000234:	63bb      	str	r3, [r7, #56]	; 0x38
		
		if(2 * error >= deltax)
20000236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000238:	005b      	lsls	r3, r3, #1
2000023a:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000023c:	429a      	cmp	r2, r3
2000023e:	dc07      	bgt.n	20000250 <draw_line+0x138>
		{
			y = y + ystep;
20000240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20000242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000244:	18d3      	adds	r3, r2, r3
20000246:	633b      	str	r3, [r7, #48]	; 0x30
			error = error - deltax;
20000248:	6bba      	ldr	r2, [r7, #56]	; 0x38
2000024a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000024c:	1ad3      	subs	r3, r2, r3
2000024e:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int x = x0; x < x1; x++)
20000250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000252:	3301      	adds	r3, #1
20000254:	62fb      	str	r3, [r7, #44]	; 0x2c
20000256:	697b      	ldr	r3, [r7, #20]
20000258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000025a:	429a      	cmp	r2, r3
2000025c:	dbd7      	blt.n	2000020e <draw_line+0xf6>
		}
	}
	
}
2000025e:	46c0      	nop			; (mov r8, r8)
20000260:	0018      	movs	r0, r3
20000262:	46bd      	mov	sp, r7
20000264:	b010      	add	sp, #64	; 0x40
20000266:	bdb0      	pop	{r4, r5, r7, pc}

20000268 <main>:
{40,10, 40,60}
}; 


void main(void)
{
20000268:	b580      	push	{r7, lr}
2000026a:	b082      	sub	sp, #8
2000026c:	af00      	add	r7, sp, #0
	graphic_initalize();
2000026e:	f7ff ff34 	bl	200000da <graphic_initalize>
	graphic_clear_screen();
20000272:	f7ff ff35 	bl	200000e0 <graphic_clear_screen>

	while( 1 )
	{
		for( int i = 0; i < sizeof(lines)/sizeof( LINE ); i++)
20000276:	2300      	movs	r3, #0
20000278:	607b      	str	r3, [r7, #4]
2000027a:	e00e      	b.n	2000029a <main+0x32>
		{
			draw_line( &lines[i] );
2000027c:	687b      	ldr	r3, [r7, #4]
2000027e:	009a      	lsls	r2, r3, #2
20000280:	4b09      	ldr	r3, [pc, #36]	; (200002a8 <main+0x40>)
20000282:	18d3      	adds	r3, r2, r3
20000284:	0018      	movs	r0, r3
20000286:	f7ff ff47 	bl	20000118 <draw_line>
			delay_milli( 500 );
2000028a:	23fa      	movs	r3, #250	; 0xfa
2000028c:	005b      	lsls	r3, r3, #1
2000028e:	0018      	movs	r0, r3
20000290:	f7ff ff03 	bl	2000009a <delay_milli>
		for( int i = 0; i < sizeof(lines)/sizeof( LINE ); i++)
20000294:	687b      	ldr	r3, [r7, #4]
20000296:	3301      	adds	r3, #1
20000298:	607b      	str	r3, [r7, #4]
2000029a:	687b      	ldr	r3, [r7, #4]
2000029c:	2b0b      	cmp	r3, #11
2000029e:	d9ed      	bls.n	2000027c <main+0x14>
		}
		graphic_clear_screen();
200002a0:	f7ff ff1e 	bl	200000e0 <graphic_clear_screen>
		for( int i = 0; i < sizeof(lines)/sizeof( LINE ); i++)
200002a4:	e7e7      	b.n	20000276 <main+0xe>
200002a6:	46c0      	nop			; (mov r8, r8)
200002a8:	200003d8 	ldrdcs	r0, [r0], -r8

200002ac <__udivsi3>:
200002ac:	2200      	movs	r2, #0
200002ae:	0843      	lsrs	r3, r0, #1
200002b0:	428b      	cmp	r3, r1
200002b2:	d374      	bcc.n	2000039e <__udivsi3+0xf2>
200002b4:	0903      	lsrs	r3, r0, #4
200002b6:	428b      	cmp	r3, r1
200002b8:	d35f      	bcc.n	2000037a <__udivsi3+0xce>
200002ba:	0a03      	lsrs	r3, r0, #8
200002bc:	428b      	cmp	r3, r1
200002be:	d344      	bcc.n	2000034a <__udivsi3+0x9e>
200002c0:	0b03      	lsrs	r3, r0, #12
200002c2:	428b      	cmp	r3, r1
200002c4:	d328      	bcc.n	20000318 <__udivsi3+0x6c>
200002c6:	0c03      	lsrs	r3, r0, #16
200002c8:	428b      	cmp	r3, r1
200002ca:	d30d      	bcc.n	200002e8 <__udivsi3+0x3c>
200002cc:	22ff      	movs	r2, #255	; 0xff
200002ce:	0209      	lsls	r1, r1, #8
200002d0:	ba12      	rev	r2, r2
200002d2:	0c03      	lsrs	r3, r0, #16
200002d4:	428b      	cmp	r3, r1
200002d6:	d302      	bcc.n	200002de <__udivsi3+0x32>
200002d8:	1212      	asrs	r2, r2, #8
200002da:	0209      	lsls	r1, r1, #8
200002dc:	d065      	beq.n	200003aa <__udivsi3+0xfe>
200002de:	0b03      	lsrs	r3, r0, #12
200002e0:	428b      	cmp	r3, r1
200002e2:	d319      	bcc.n	20000318 <__udivsi3+0x6c>
200002e4:	e000      	b.n	200002e8 <__udivsi3+0x3c>
200002e6:	0a09      	lsrs	r1, r1, #8
200002e8:	0bc3      	lsrs	r3, r0, #15
200002ea:	428b      	cmp	r3, r1
200002ec:	d301      	bcc.n	200002f2 <__udivsi3+0x46>
200002ee:	03cb      	lsls	r3, r1, #15
200002f0:	1ac0      	subs	r0, r0, r3
200002f2:	4152      	adcs	r2, r2
200002f4:	0b83      	lsrs	r3, r0, #14
200002f6:	428b      	cmp	r3, r1
200002f8:	d301      	bcc.n	200002fe <__udivsi3+0x52>
200002fa:	038b      	lsls	r3, r1, #14
200002fc:	1ac0      	subs	r0, r0, r3
200002fe:	4152      	adcs	r2, r2
20000300:	0b43      	lsrs	r3, r0, #13
20000302:	428b      	cmp	r3, r1
20000304:	d301      	bcc.n	2000030a <__udivsi3+0x5e>
20000306:	034b      	lsls	r3, r1, #13
20000308:	1ac0      	subs	r0, r0, r3
2000030a:	4152      	adcs	r2, r2
2000030c:	0b03      	lsrs	r3, r0, #12
2000030e:	428b      	cmp	r3, r1
20000310:	d301      	bcc.n	20000316 <__udivsi3+0x6a>
20000312:	030b      	lsls	r3, r1, #12
20000314:	1ac0      	subs	r0, r0, r3
20000316:	4152      	adcs	r2, r2
20000318:	0ac3      	lsrs	r3, r0, #11
2000031a:	428b      	cmp	r3, r1
2000031c:	d301      	bcc.n	20000322 <__udivsi3+0x76>
2000031e:	02cb      	lsls	r3, r1, #11
20000320:	1ac0      	subs	r0, r0, r3
20000322:	4152      	adcs	r2, r2
20000324:	0a83      	lsrs	r3, r0, #10
20000326:	428b      	cmp	r3, r1
20000328:	d301      	bcc.n	2000032e <__udivsi3+0x82>
2000032a:	028b      	lsls	r3, r1, #10
2000032c:	1ac0      	subs	r0, r0, r3
2000032e:	4152      	adcs	r2, r2
20000330:	0a43      	lsrs	r3, r0, #9
20000332:	428b      	cmp	r3, r1
20000334:	d301      	bcc.n	2000033a <__udivsi3+0x8e>
20000336:	024b      	lsls	r3, r1, #9
20000338:	1ac0      	subs	r0, r0, r3
2000033a:	4152      	adcs	r2, r2
2000033c:	0a03      	lsrs	r3, r0, #8
2000033e:	428b      	cmp	r3, r1
20000340:	d301      	bcc.n	20000346 <__udivsi3+0x9a>
20000342:	020b      	lsls	r3, r1, #8
20000344:	1ac0      	subs	r0, r0, r3
20000346:	4152      	adcs	r2, r2
20000348:	d2cd      	bcs.n	200002e6 <__udivsi3+0x3a>
2000034a:	09c3      	lsrs	r3, r0, #7
2000034c:	428b      	cmp	r3, r1
2000034e:	d301      	bcc.n	20000354 <__udivsi3+0xa8>
20000350:	01cb      	lsls	r3, r1, #7
20000352:	1ac0      	subs	r0, r0, r3
20000354:	4152      	adcs	r2, r2
20000356:	0983      	lsrs	r3, r0, #6
20000358:	428b      	cmp	r3, r1
2000035a:	d301      	bcc.n	20000360 <__udivsi3+0xb4>
2000035c:	018b      	lsls	r3, r1, #6
2000035e:	1ac0      	subs	r0, r0, r3
20000360:	4152      	adcs	r2, r2
20000362:	0943      	lsrs	r3, r0, #5
20000364:	428b      	cmp	r3, r1
20000366:	d301      	bcc.n	2000036c <__udivsi3+0xc0>
20000368:	014b      	lsls	r3, r1, #5
2000036a:	1ac0      	subs	r0, r0, r3
2000036c:	4152      	adcs	r2, r2
2000036e:	0903      	lsrs	r3, r0, #4
20000370:	428b      	cmp	r3, r1
20000372:	d301      	bcc.n	20000378 <__udivsi3+0xcc>
20000374:	010b      	lsls	r3, r1, #4
20000376:	1ac0      	subs	r0, r0, r3
20000378:	4152      	adcs	r2, r2
2000037a:	08c3      	lsrs	r3, r0, #3
2000037c:	428b      	cmp	r3, r1
2000037e:	d301      	bcc.n	20000384 <__udivsi3+0xd8>
20000380:	00cb      	lsls	r3, r1, #3
20000382:	1ac0      	subs	r0, r0, r3
20000384:	4152      	adcs	r2, r2
20000386:	0883      	lsrs	r3, r0, #2
20000388:	428b      	cmp	r3, r1
2000038a:	d301      	bcc.n	20000390 <__udivsi3+0xe4>
2000038c:	008b      	lsls	r3, r1, #2
2000038e:	1ac0      	subs	r0, r0, r3
20000390:	4152      	adcs	r2, r2
20000392:	0843      	lsrs	r3, r0, #1
20000394:	428b      	cmp	r3, r1
20000396:	d301      	bcc.n	2000039c <__udivsi3+0xf0>
20000398:	004b      	lsls	r3, r1, #1
2000039a:	1ac0      	subs	r0, r0, r3
2000039c:	4152      	adcs	r2, r2
2000039e:	1a41      	subs	r1, r0, r1
200003a0:	d200      	bcs.n	200003a4 <__udivsi3+0xf8>
200003a2:	4601      	mov	r1, r0
200003a4:	4152      	adcs	r2, r2
200003a6:	4610      	mov	r0, r2
200003a8:	4770      	bx	lr
200003aa:	e7ff      	b.n	200003ac <__udivsi3+0x100>
200003ac:	b501      	push	{r0, lr}
200003ae:	2000      	movs	r0, #0
200003b0:	f000 f806 	bl	200003c0 <__aeabi_idiv0>
200003b4:	bd02      	pop	{r1, pc}
200003b6:	46c0      	nop			; (mov r8, r8)

200003b8 <__aeabi_uidivmod>:
200003b8:	2900      	cmp	r1, #0
200003ba:	d0f7      	beq.n	200003ac <__udivsi3+0x100>
200003bc:	e776      	b.n	200002ac <__udivsi3>
200003be:	4770      	bx	lr

200003c0 <__aeabi_idiv0>:
200003c0:	4770      	bx	lr
200003c2:	46c0      	nop			; (mov r8, r8)

200003c4 <memcpy>:
200003c4:	2300      	movs	r3, #0
200003c6:	b510      	push	{r4, lr}
200003c8:	429a      	cmp	r2, r3
200003ca:	d100      	bne.n	200003ce <memcpy+0xa>
200003cc:	bd10      	pop	{r4, pc}
200003ce:	5ccc      	ldrb	r4, [r1, r3]
200003d0:	54c4      	strb	r4, [r0, r3]
200003d2:	3301      	adds	r3, #1
200003d4:	e7f8      	b.n	200003c8 <memcpy+0x4>
	...

200003d8 <lines>:
200003d8:	0a640a28 	beq	21902c80 <lines+0x19028a8>
200003dc:	14640a28 	strbtne	r0, [r4], #-2600	; 0xfffff5d8
200003e0:	1e640a28 	vmulne.f32	s1, s8, s17
200003e4:	28640a28 	stmdacs	r4!, {r3, r5, r9, fp}^
200003e8:	32640a28 	rsbcc	r0, r4, #40, 20	; 0x28000
200003ec:	3c640a28 			; <UNDEFINED> instruction: 0x3c640a28
200003f0:	3c5a0a28 	mrrccc	10, 2, r0, sl, cr8
200003f4:	3c500a28 	mrrccc	10, 2, r0, r0, cr8	; <UNPREDICTABLE>
200003f8:	3c460a28 	mcrrcc	10, 2, r0, r6, cr8
200003fc:	3c3c0a28 			; <UNDEFINED> instruction: 0x3c3c0a28
20000400:	3c320a28 			; <UNDEFINED> instruction: 0x3c320a28
20000404:	3c280a28 			; <UNDEFINED> instruction: 0x3c280a28

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000344 	andeq	r0, r0, r4, asr #6
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000078 	andeq	r0, r0, r8, ror r0
  10:	00001f0c 	andeq	r1, r0, ip, lsl #30
  14:	00014800 	andeq	r4, r1, r0, lsl #16
	...
  24:	01020200 	mrseq	r0, R10_usr
  28:	00450958 	subeq	r0, r5, r8, asr r9
  2c:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
  30:	075a0100 	ldrbeq	r0, [sl, -r0, lsl #2]
  34:	00000045 	andeq	r0, r0, r5, asr #32
  38:	00790300 	rsbseq	r0, r9, r0, lsl #6
  3c:	45095a01 	strmi	r5, [r9, #-2561]	; 0xfffff5ff
  40:	01000000 	mrseq	r0, (UNDEF: 0)
  44:	08010400 	stmdaeq	r1, {sl}
  48:	00000139 	andeq	r0, r0, r9, lsr r1
  4c:	00018605 	andeq	r8, r1, r5, lsl #12
  50:	035b0100 	cmpeq	fp, #0, 2
  54:	00000025 	andeq	r0, r0, r5, lsr #32
  58:	5d010402 	cfstrspl	mvf0, [r1, #-8]
  5c:	00007a09 	andeq	r7, r0, r9, lsl #20
  60:	30700300 	rsbscc	r0, r0, r0, lsl #6
  64:	085f0100 	ldmdaeq	pc, {r8}^	; <UNPREDICTABLE>
  68:	0000004c 	andeq	r0, r0, ip, asr #32
  6c:	31700300 	cmncc	r0, r0, lsl #6
  70:	08600100 	stmdaeq	r0!, {r8}^
  74:	0000004c 	andeq	r0, r0, ip, asr #32
  78:	0d050002 	stceq	0, cr0, [r5, #-8]
  7c:	01000000 	mrseq	r0, (UNDEF: 0)
  80:	00580362 	subseq	r0, r8, r2, ror #6
  84:	0c050000 	stceq	0, cr0, [r5], {-0}
  88:	01000000 	mrseq	r0, (UNDEF: 0)
  8c:	00920a62 	addseq	r0, r2, r2, ror #20
  90:	04060000 	streq	r0, [r6], #-0
  94:	00000058 	andeq	r0, r0, r8, asr r0
  98:	00007a07 	andeq	r7, r0, r7, lsl #20
  9c:	0000a800 	andeq	sl, r0, r0, lsl #16
  a0:	00a80800 	adceq	r0, r8, r0, lsl #16
  a4:	000b0000 	andeq	r0, fp, r0
  a8:	12070404 	andne	r0, r7, #4, 8	; 0x4000000
  ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  b0:	00000133 	andeq	r0, r0, r3, lsr r1
  b4:	9806a901 	stmdals	r6, {r0, r8, fp, sp, pc}
  b8:	05000000 	streq	r0, [r0, #-0]
  bc:	0003d803 	andeq	sp, r3, r3, lsl #16
  c0:	01630a20 	cmneq	r3, r0, lsr #20
  c4:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
  c8:	00026806 	andeq	r6, r2, r6, lsl #16
  cc:	00004420 	andeq	r4, r0, r0, lsr #8
  d0:	ef9c0100 	svc	0x009c0100
  d4:	0b000000 	bleq	dc <startup-0x1fffff24>
  d8:	20000276 	andcs	r0, r0, r6, ror r2
  dc:	0000002a 	andeq	r0, r0, sl, lsr #32
  e0:	0100690c 	tsteq	r0, ip, lsl #18
  e4:	00ef0cc0 	rsceq	r0, pc, r0, asr #25
  e8:	91020000 	mrsls	r0, (UNDEF: 2)
  ec:	0d000074 	stceq	0, cr0, [r0, #-464]	; 0xfffffe30
  f0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  f4:	000e0074 	andeq	r0, lr, r4, ror r0
  f8:	01000001 	tsteq	r0, r1
  fc:	00ef056e 	rsceq	r0, pc, lr, ror #10
 100:	01180000 	tsteq	r8, r0
 104:	01502000 	cmpeq	r0, r0
 108:	9c010000 	stcls	0, cr0, [r1], {-0}
 10c:	00000211 	andeq	r0, r0, r1, lsl r2
 110:	01006c0f 	tsteq	r0, pc, lsl #24
 114:	0086166e 	addeq	r1, r6, lr, ror #12
 118:	91030000 	mrsls	r0, (UNDEF: 3)
 11c:	68107fb4 	ldmdavs	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 120:	01000001 	tsteq	r0, r1
 124:	004c0871 	subeq	r0, ip, r1, ror r8
 128:	91020000 	mrsls	r0, (UNDEF: 2)
 12c:	6e650c50 	mcrvs	12, 3, r0, cr5, cr0, {2}
 130:	72010064 	andvc	r0, r1, #100	; 0x64
 134:	00004c08 	andeq	r4, r0, r8, lsl #24
 138:	4c910200 	lfmmi	f0, 4, [r1], {0}
 13c:	0030780c 	eorseq	r7, r0, ip, lsl #16
 140:	ef067401 	svc	0x00067401
 144:	02000000 	andeq	r0, r0, #0
 148:	780c4891 	stmdavc	ip, {r0, r4, r7, fp, lr}
 14c:	75010031 	strvc	r0, [r1, #-49]	; 0xffffffcf
 150:	0000ef06 	andeq	lr, r0, r6, lsl #30
 154:	44910200 	ldrmi	r0, [r1], #512	; 0x200
 158:	0030790c 	eorseq	r7, r0, ip, lsl #18
 15c:	ef067601 	svc	0x00067601
 160:	02000000 	andeq	r0, r0, #0
 164:	790c4091 	stmdbvc	ip, {r0, r4, r7, lr}
 168:	77010031 	smladxvc	r1, r1, r0, r0
 16c:	0000ef06 	andeq	lr, r0, r6, lsl #30
 170:	bc910300 	ldclt	3, cr0, [r1], {0}
 174:	016e107f 	smceq	57615	; 0xe10f
 178:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
 17c:	0000ef06 	andeq	lr, r0, r6, lsl #30
 180:	6c910200 	lfmvs	f0, 4, [r1], {0}
 184:	00018c10 	andeq	r8, r1, r0, lsl ip
 188:	068c0100 	streq	r0, [ip], r0, lsl #2
 18c:	000000ef 	andeq	r0, r0, pc, ror #1
 190:	10689102 	rsbne	r9, r8, r2, lsl #2
 194:	00000192 	muleq	r0, r2, r1
 198:	ef068d01 	svc	0x00068d01
 19c:	02000000 	andeq	r0, r0, #0
 1a0:	790c6491 	stmdbvc	ip, {r0, r4, r7, sl, sp, lr}
 1a4:	068e0100 	streq	r0, [lr], r0, lsl #2
 1a8:	000000ef 	andeq	r0, r0, pc, ror #1
 1ac:	10609102 	rsbne	r9, r0, r2, lsl #2
 1b0:	00000044 	andeq	r0, r0, r4, asr #32
 1b4:	ef068f01 	svc	0x00068f01
 1b8:	02000000 	andeq	r0, r0, #0
 1bc:	5d105891 	ldcpl	8, cr5, [r0, #-580]	; 0xfffffdbc
 1c0:	01000000 	mrseq	r0, (UNDEF: 0)
 1c4:	00ef0690 	smlaleq	r0, pc, r0, r6	; <UNPREDICTABLE>
 1c8:	91020000 	mrsls	r0, (UNDEF: 2)
 1cc:	62611154 	rsbvs	r1, r1, #84, 2
 1d0:	00020073 	andeq	r0, r2, r3, ror r0
 1d4:	000000ef 	andeq	r0, r0, pc, ror #1
 1d8:	000001de 	ldrdeq	r0, [r0], -lr
 1dc:	62130012 	andsvs	r0, r3, #18
 1e0:	26200001 	strtcs	r0, [r0], -r1
 1e4:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
 1e8:	14000001 	strne	r0, [r0], #-1
 1ec:	00736261 	rsbseq	r6, r3, r1, ror #4
 1f0:	00ef0002 	rsceq	r0, pc, r2
 1f4:	00120000 	andseq	r0, r2, r0
 1f8:	02080b00 	andeq	r0, r8, #0, 22
 1fc:	00562000 	subseq	r2, r6, r0
 200:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
 204:	0a970100 	beq	fe5c060c <lines+0xde5c0234>
 208:	000000ef 	andeq	r0, r0, pc, ror #1
 20c:	005c9102 	subseq	r9, ip, r2, lsl #2
 210:	01431500 	cmpeq	r3, r0, lsl #10
 214:	64010000 	strvs	r0, [r1], #-0
 218:	0000f206 	andeq	pc, r0, r6, lsl #4
 21c:	00002620 	andeq	r2, r0, r0, lsr #12
 220:	519c0100 	orrspl	r0, ip, r0, lsl #2
 224:	0f000002 	svceq	0x00000002
 228:	64010061 	strvs	r0, [r1], #-97	; 0xffffff9f
 22c:	00025110 	andeq	r5, r2, r0, lsl r1
 230:	6c910200 	lfmvs	f0, 4, [r1], {0}
 234:	0100620f 	tsteq	r0, pc, lsl #4
 238:	02511864 	subseq	r1, r1, #100, 16	; 0x640000
 23c:	91020000 	mrsls	r0, (UNDEF: 2)
 240:	013e1068 	teqeq	lr, r8, rrx
 244:	66010000 	strvs	r0, [r1], -r0
 248:	0000ef06 	andeq	lr, r0, r6, lsl #30
 24c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 250:	ef040600 	svc	0x00040600
 254:	15000000 	strne	r0, [r0, #-0]
 258:	00000064 	andeq	r0, r0, r4, rrx
 25c:	ec065201 	sfm	f5, 4, [r6], {1}
 260:	06200000 	strteq	r0, [r0], -r0
 264:	01000000 	mrseq	r0, (UNDEF: 0)
 268:	0002869c 	muleq	r2, ip, r6
 26c:	00780f00 	rsbseq	r0, r8, r0, lsl #30
 270:	ef1f5201 	svc	0x001f5201
 274:	01000000 	mrseq	r0, (UNDEF: 0)
 278:	00790f50 	rsbseq	r0, r9, r0, asr pc
 27c:	ef265201 	svc	0x00265201
 280:	01000000 	mrseq	r0, (UNDEF: 0)
 284:	74150051 	ldrvc	r0, [r5], #-81	; 0xffffffaf
 288:	01000001 	tsteq	r0, r1
 28c:	00e6064b 	rsceq	r0, r6, fp, asr #12
 290:	00062000 	andeq	r2, r6, r0
 294:	9c010000 	stcls	0, cr0, [r1], {-0}
 298:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
 29c:	0100780f 	tsteq	r0, pc, lsl #16
 2a0:	00ef1d4b 	rsceq	r1, pc, fp, asr #26
 2a4:	50010000 	andpl	r0, r1, r0
 2a8:	0100790f 	tsteq	r0, pc, lsl #18
 2ac:	00ef244b 	rsceq	r2, pc, fp, asr #8
 2b0:	51010000 	mrspl	r0, (UNDEF: 1)
 2b4:	011e1600 	tsteq	lr, r0, lsl #12
 2b8:	43010000 	movwmi	r0, #4096	; 0x1000
 2bc:	0000e006 	andeq	lr, r0, r6
 2c0:	00000620 	andeq	r0, r0, r0, lsr #12
 2c4:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 2c8:	0000004b 	andeq	r0, r0, fp, asr #32
 2cc:	da063c01 	ble	18f2d8 <startup-0x1fe70d28>
 2d0:	06200000 	strteq	r0, [r0], -r0
 2d4:	01000000 	mrseq	r0, (UNDEF: 0)
 2d8:	00000a9c 	muleq	r0, ip, sl
 2dc:	2f010000 	svccs	0x00010000
 2e0:	00009a06 	andeq	r9, r0, r6, lsl #20
 2e4:	00004020 	andeq	r4, r0, r0, lsr #32
 2e8:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
 2ec:	0f000002 	svceq	0x00000002
 2f0:	0100736d 	tsteq	r0, sp, ror #6
 2f4:	00a81f2f 	adceq	r1, r8, pc, lsr #30
 2f8:	91020000 	mrsls	r0, (UNDEF: 2)
 2fc:	0a0a0074 	beq	2804d4 <startup-0x1fd7fb2c>
 300:	01000001 	tsteq	r0, r1
 304:	0054061f 	subseq	r0, r4, pc, lsl r6
 308:	00462000 	subeq	r2, r6, r0
 30c:	9c010000 	stcls	0, cr0, [r1], {-0}
 310:	00000323 	andeq	r0, r0, r3, lsr #6
 314:	0073750f 	rsbseq	r7, r3, pc, lsl #10
 318:	a81f1f01 	ldmdage	pc, {r0, r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
 31c:	02000000 	andeq	r0, r0, #0
 320:	16007491 			; <UNDEFINED> instruction: 0x16007491
 324:	000000f4 	strdeq	r0, [r0], -r4
 328:	10061301 	andne	r1, r6, r1, lsl #6
 32c:	44200000 	strtmi	r0, [r0], #-0
 330:	01000000 	mrseq	r0, (UNDEF: 0)
 334:	0116169c 			; <UNDEFINED> instruction: 0x0116169c
 338:	06010000 	streq	r0, [r1], -r0
 33c:	00000006 	andeq	r0, r0, r6
 340:	00000c20 	andeq	r0, r0, r0, lsr #24
 344:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0113 	bleq	2c0468 <startup-0x1fd3fb98>
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13010b39 	movwne	r0, #6969	; 0x1b39
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a080300 	bcc	200c2c <startup-0x1fdff3d4>
  28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  30:	0400000b 	streq	r0, [r0], #-11
  34:	0b0b0024 	bleq	2c00cc <startup-0x1fd3ff34>
  38:	0e030b3e 	vmoveq.16	d3[0], r0
  3c:	16050000 	strne	r0, [r5], -r0
  40:	3a0e0300 	bcc	380c48 <startup-0x1fc7f3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	0013490b 	andseq	r4, r3, fp, lsl #18
  4c:	000f0600 	andeq	r0, pc, r0, lsl #12
  50:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  54:	01070000 	mrseq	r0, (UNDEF: 7)
  58:	01134901 	tsteq	r3, r1, lsl #18
  5c:	08000013 	stmdaeq	r0, {r0, r1, r4}
  60:	13490021 	movtne	r0, #36897	; 0x9021
  64:	00000b2f 	andeq	r0, r0, pc, lsr #22
  68:	03003409 	movweq	r3, #1033	; 0x409
  6c:	3b0b3a0e 	blcc	2ce8ac <startup-0x1fd31754>
  70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  74:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  78:	0a000018 	beq	e0 <startup-0x1fffff20>
  7c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  80:	0b3a0e03 	bleq	e83894 <startup-0x1f17c76c>
  84:	0b390b3b 	bleq	e42d78 <startup-0x1f1bd288>
  88:	01111927 	tsteq	r1, r7, lsr #18
  8c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  90:	01194296 			; <UNDEFINED> instruction: 0x01194296
  94:	0b000013 	bleq	e8 <startup-0x1fffff18>
  98:	0111010b 	tsteq	r1, fp, lsl #2
  9c:	00000612 	andeq	r0, r0, r2, lsl r6
  a0:	0300340c 	movweq	r3, #1036	; 0x40c
  a4:	3b0b3a08 	blcc	2ce8cc <startup-0x1fd31734>
  a8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  ac:	00180213 	andseq	r0, r8, r3, lsl r2
  b0:	00240d00 	eoreq	r0, r4, r0, lsl #26
  b4:	0b3e0b0b 	bleq	f82ce8 <startup-0x1f07d318>
  b8:	00000803 	andeq	r0, r0, r3, lsl #16
  bc:	3f012e0e 	svccc	0x00012e0e
  c0:	3a0e0319 	bcc	380d2c <startup-0x1fc7f2d4>
  c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  cc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  d0:	96184006 	ldrls	r4, [r8], -r6
  d4:	13011942 	movwne	r1, #6466	; 0x1942
  d8:	050f0000 	streq	r0, [pc, #-0]	; e0 <startup-0x1fffff20>
  dc:	3a080300 	bcc	200ce4 <startup-0x1fdff31c>
  e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  e8:	10000018 	andne	r0, r0, r8, lsl r0
  ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  f0:	0b3b0b3a 	bleq	ec2de0 <startup-0x1f13d220>
  f4:	13490b39 	movtne	r0, #39737	; 0x9b39
  f8:	00001802 	andeq	r1, r0, r2, lsl #16
  fc:	3f012e11 	svccc	0x00012e11
 100:	3a080319 	bcc	200d6c <startup-0x1fdff294>
 104:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 108:	01193c13 	tsteq	r9, r3, lsl ip
 10c:	12000013 	andne	r0, r0, #19
 110:	00000018 	andeq	r0, r0, r8, lsl r0
 114:	11010b13 	tstne	r1, r3, lsl fp
 118:	01061201 	tsteq	r6, r1, lsl #4
 11c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 120:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 124:	0b3a0803 	bleq	e82138 <startup-0x1f17dec8>
 128:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 12c:	0000193c 	andeq	r1, r0, ip, lsr r9
 130:	3f012e15 	svccc	0x00012e15
 134:	3a0e0319 	bcc	380da0 <startup-0x1fc7f260>
 138:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 13c:	1119270b 	tstne	r9, fp, lsl #14
 140:	40061201 	andmi	r1, r6, r1, lsl #4
 144:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 148:	00001301 	andeq	r1, r0, r1, lsl #6
 14c:	3f002e16 	svccc	0x00002e16
 150:	3a0e0319 	bcc	380dbc <startup-0x1fc7f244>
 154:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 158:	1119270b 	tstne	r9, fp, lsl #14
 15c:	40061201 	andmi	r1, r6, r1, lsl #4
 160:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 164:	Address 0x00000164 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000029c 	muleq	r0, ip, r2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200002ac 	andcs	r0, r0, ip, lsr #5
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001d9 	ldrdeq	r0, [r0], -r9
   4:	00490003 	subeq	r0, r9, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	44010000 	strmi	r0, [r1], #-0
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	616c2f70 	smcvs	49904	; 0xc2f0
  24:	61726f62 	cmnvs	r2, r2, ror #30
  28:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  2c:	6d2f7265 	sfmvs	f7, 4, [pc, #-404]!	; fffffea0 <lines+0xdffffac8>
  30:	2d33706f 	ldccs	0, cr7, [r3, #-444]!	; 0xfffffe44
  34:	73000031 	movwvc	r0, #49	; 0x31
  38:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  3c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  40:	00000100 	andeq	r0, r0, r0, lsl #2
  44:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
  48:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
  4c:	00003e6e 	andeq	r3, r0, lr, ror #28
  50:	05000000 	streq	r0, [r0, #-0]
  54:	02050001 	andeq	r0, r5, #1
  58:	20000000 	andcs	r0, r0, r0
  5c:	21211318 			; <UNDEFINED> instruction: 0x21211318
  60:	0302212f 	movweq	r2, #8495	; 0x212f
  64:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
  68:	02050001 	andeq	r0, r5, #1
  6c:	20000010 	andcs	r0, r0, r0, lsl r0
  70:	05011303 	streq	r1, [r1, #-771]	; 0xfffffcfd
  74:	0f053005 	svceq	0x00053005
  78:	2f050520 	svccs	0x00050520
  7c:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
  80:	0e052f05 	cdpeq	15, 0, cr2, cr5, cr5, {0}
  84:	2f050520 	svccs	0x00050520
  88:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
  8c:	0d05300a 	stceq	0, cr3, [r5, #-40]	; 0xffffffd8
  90:	01040200 	mrseq	r0, R12_usr
  94:	00170520 	andseq	r0, r7, r0, lsr #10
  98:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
  9c:	02000a05 	andeq	r0, r0, #20480	; 0x5000
  a0:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
  a4:	0f052105 	svceq	0x00052105
  a8:	2f010520 	svccs	0x00010520
  ac:	4c0805a1 	cfstr32mi	mvfx0, [r8], {161}	; 0xa1
  b0:	05830705 	streq	r0, [r3, #1797]	; 0x705
  b4:	09053e0a 	stmdbeq	r5, {r1, r3, r9, sl, fp, ip, sp}
  b8:	2f2f2f22 	svccs	0x002f2f22
  bc:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff5bf <lines+0xdffff1e7>
  c0:	3c7a030a 	ldclcc	3, cr0, [sl], #-40	; 0xffffffd8
  c4:	5b440105 	blpl	11004e0 <startup-0x1eeffb20>
  c8:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
  cc:	0a058307 	beq	160cf0 <startup-0x1fe9f310>
  d0:	2209053e 	andcs	r0, r9, #260046848	; 0xf800000
  d4:	05590b05 	ldrbeq	r0, [r9, #-2821]	; 0xfffff4fb
  d8:	0105390a 	tsteq	r5, sl, lsl #18
  dc:	02055b41 	andeq	r5, r5, #66560	; 0x10400
  e0:	01051321 	tsteq	r5, r1, lsr #6
  e4:	02052421 	andeq	r2, r5, #553648128	; 0x21000000
  e8:	01051321 	tsteq	r5, r1, lsr #6
  ec:	02052521 	andeq	r2, r5, #138412032	; 0x8400000
  f0:	01051321 	tsteq	r5, r1, lsr #6
  f4:	02052421 	andeq	r2, r5, #553648128	; 0x21000000
  f8:	01051321 	tsteq	r5, r1, lsr #6
  fc:	200f0321 	andcs	r0, pc, r1, lsr #6
 100:	3d5a0705 	ldclcc	7, cr0, [sl, #-20]	; 0xffffffec
 104:	2f2e0505 	svccs	0x002e0505
 108:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 10c:	05402101 	strbeq	r2, [r0, #-257]	; 0xfffffeff
 110:	05914c08 	ldreq	r4, [r1, #3080]	; 0xc08
 114:	0605a010 			; <UNDEFINED> instruction: 0x0605a010
 118:	210e053c 	tstcs	lr, ip, lsr r5
 11c:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
 120:	06052110 			; <UNDEFINED> instruction: 0x06052110
 124:	210e052e 	tstcs	lr, lr, lsr #10
 128:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 12c:	0505240c 	streq	r2, [r5, #-1036]	; 0xfffffbf4
 130:	3c1b053c 	cfldr32cc	mvfx0, [fp], {60}	; 0x3c
 134:	053c1405 	ldreq	r1, [ip, #-1029]!	; 0xfffffbfb
 138:	09053c04 	stmdbeq	r5, {r2, sl, fp, ip, sp}
 13c:	04053e2f 	streq	r3, [r5], #-3631	; 0xfffff1d1
 140:	3e030530 	cfmv64hrcc	mvdx3, r0
 144:	85080583 	strhi	r0, [r8, #-1411]	; 0xfffffa7d
 148:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
 14c:	05833003 	streq	r3, [r3, #3]
 150:	05308506 	ldreq	r8, [r0, #-1286]!	; 0xfffffafa
 154:	06052f12 			; <UNDEFINED> instruction: 0x06052f12
 158:	2f16052e 	svccs	0x0016052e
 15c:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
 160:	04054c08 	streq	r4, [r5], #-3080	; 0xfffff3f8
 164:	2f09052e 	svccs	0x0009052e
 168:	3e0a053e 	mcrcc	5, 0, r0, cr10, cr14, {1}
 16c:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 170:	04052205 	streq	r2, [r5], #-517	; 0xfffffdfb
 174:	0905763d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r9, sl, ip, sp, lr}
 178:	4c080568 	cfstr32mi	mvfx0, [r8], {104}	; 0x68
 17c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 180:	0a053e06 	beq	14f9a0 <startup-0x1feb0660>
 184:	001b054b 	andseq	r0, fp, fp, asr #10
 188:	03020402 	movweq	r0, #9218	; 0x2402
 18c:	14054a74 	strne	r4, [r5], #-2676	; 0xfffff58c
 190:	01040200 	mrseq	r0, R12_usr
 194:	0002053c 	andeq	r0, r2, ip, lsr r5
 198:	20010402 	andcs	r0, r1, r2, lsl #8
 19c:	10030105 	andne	r0, r3, r5, lsl #2
 1a0:	5813033c 	ldmdapl	r3, {r2, r3, r4, r5, r8, r9}
 1a4:	2f3d0205 	svccs	0x003d0205
 1a8:	05320c05 	ldreq	r0, [r2, #-3077]!	; 0xfffff3fb
 1ac:	0f052e03 	svceq	0x00052e03
 1b0:	03040200 	movweq	r0, #16896	; 0x4200
 1b4:	00040522 	andeq	r0, r4, r2, lsr #10
 1b8:	4a030402 	bmi	c11c8 <startup-0x1ff3ee38>
 1bc:	03040200 	movweq	r0, #16896	; 0x4200
 1c0:	0036053d 	eorseq	r0, r6, sp, lsr r5
 1c4:	55030402 	strpl	r0, [r3, #-1026]	; 0xfffffbfe
 1c8:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 1cc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 1d0:	04020003 	streq	r0, [r2], #-3
 1d4:	29332001 	ldmdbcs	r3!, {r0, sp}
 1d8:	01000402 	tsteq	r0, r2, lsl #8
 1dc:	Address 0x000001dc is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	4e494c50 	mcrmi	12, 2, r4, cr9, cr0, {2}
  10:	6e750045 	cdpvs	0, 7, cr0, cr5, cr5, {2}
  14:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  18:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  1c:	4400746e 	strmi	r7, [r0], #-1134	; 0xfffffb92
  20:	6f6d2f3a 	svcvs	0x006d2f3a
  24:	616c2f70 	smcvs	49904	; 0xc2f0
  28:	61726f62 	cmnvs	r2, r2, ror #30
  2c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  30:	6d2f7265 	sfmvs	f7, 4, [pc, #-404]!	; fffffea4 <lines+0xdffffacc>
  34:	2d33706f 	ldccs	0, cr7, [r3, #-444]!	; 0xfffffe44
  38:	74732f31 	ldrbtvc	r2, [r3], #-3889	; 0xfffff0cf
  3c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  40:	00632e70 	rsbeq	r2, r3, r0, ror lr
  44:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
  48:	67007861 	strvs	r7, [r0, -r1, ror #16]
  4c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  50:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
  54:	6174696e 	cmnvs	r4, lr, ror #18
  58:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
  5c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  60:	00796174 	rsbseq	r6, r9, r4, ror r1
  64:	70617267 	rsbvc	r7, r1, r7, ror #4
  68:	5f636968 	svcpl	0x00636968
  6c:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  70:	6c635f6c 	stclvs	15, cr5, [r3], #-432	; 0xfffffe50
  74:	00726165 	rsbseq	r6, r2, r5, ror #2
  78:	20554e47 	subscs	r4, r5, r7, asr #28
  7c:	20393943 	eorscs	r3, r9, r3, asr #18
  80:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
  84:	30322031 	eorscc	r2, r2, r1, lsr r0
  88:	30313931 	eorscc	r3, r1, r1, lsr r9
  8c:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
  90:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  94:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  98:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  9c:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
  a0:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
  a4:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  a8:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  ac:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  b0:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  b4:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
  b8:	205d3939 	subscs	r3, sp, r9, lsr r9
  bc:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  c0:	20626d75 	rsbcs	r6, r2, r5, ror sp
  c4:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  c8:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  cc:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  d0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  d4:	616d2d20 	cmnvs	sp, r0, lsr #26
  d8:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  dc:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  e0:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  e4:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  e8:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  ec:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  f0:	00393963 	eorseq	r3, r9, r3, ror #18
  f4:	616c6564 	cmnvs	ip, r4, ror #10
  f8:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
  fc:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 100:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 104:	6e696c5f 	mcrvs	12, 3, r6, cr9, cr15, {2}
 108:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
 10c:	5f79616c 	svcpl	0x0079616c
 110:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 114:	7473006f 	ldrbtvc	r0, [r3], #-111	; 0xffffff91
 118:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 11c:	72670070 	rsbvc	r0, r7, #112	; 0x70
 120:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 124:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 128:	5f726165 	svcpl	0x00726165
 12c:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 130:	6c006e65 	stcvs	14, cr6, [r0], {101}	; 0x65
 134:	73656e69 	cmnvc	r5, #1680	; 0x690
 138:	61686300 	cmnvs	r8, r0, lsl #6
 13c:	65740072 	ldrbvs	r0, [r4, #-114]!	; 0xffffff8e
 140:	7300706d 	movwvc	r7, #109	; 0x6d
 144:	00706177 	rsbseq	r6, r0, r7, ror r1
 148:	6d5c3a44 	vldrvs	s7, [ip, #-272]	; 0xfffffef0
 14c:	6c5c706f 	mrrcvs	0, 6, r7, ip, cr15
 150:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 154:	6f697461 	svcvs	0x00697461
 158:	5c72656e 	cfldr64pl	mvdx6, [r2], #-440	; 0xfffffe48
 15c:	33706f6d 	cmncc	r0, #436	; 0x1b4
 160:	6d00312d 	stfvss	f3, [r0, #-180]	; 0xffffff4c
 164:	006e6961 	rsbeq	r6, lr, r1, ror #18
 168:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 16c:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
 170:	00706565 	rsbseq	r6, r0, r5, ror #10
 174:	70617267 	rsbvc	r7, r1, r7, ror #4
 178:	5f636968 	svcpl	0x00636968
 17c:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 180:	65735f6c 	ldrbvs	r5, [r3, #-3948]!	; 0xfffff094
 184:	4f500074 	svcmi	0x00500074
 188:	00544e49 	subseq	r4, r4, r9, asr #28
 18c:	6f727265 	svcvs	0x00727265
 190:	73790072 	cmnvc	r9, #114	; 0x72
 194:	00706574 	rsbseq	r6, r0, r4, ror r5

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	00000046 	andeq	r0, r0, r6, asr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	2000009a 	mulcs	r0, sl, r0
  68:	00000040 	andeq	r0, r0, r0, asr #32
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	0000000c 	andeq	r0, r0, ip
  80:	00000000 	andeq	r0, r0, r0
  84:	200000da 	ldrdcs	r0, [r0], -sl
  88:	00000006 	andeq	r0, r0, r6
  8c:	0000000c 	andeq	r0, r0, ip
  90:	00000000 	andeq	r0, r0, r0
  94:	200000e0 	andcs	r0, r0, r0, ror #1
  98:	00000006 	andeq	r0, r0, r6
  9c:	0000000c 	andeq	r0, r0, ip
  a0:	00000000 	andeq	r0, r0, r0
  a4:	200000e6 	andcs	r0, r0, r6, ror #1
  a8:	00000006 	andeq	r0, r0, r6
  ac:	0000000c 	andeq	r0, r0, ip
  b0:	00000000 	andeq	r0, r0, r0
  b4:	200000ec 	andcs	r0, r0, ip, ror #1
  b8:	00000006 	andeq	r0, r0, r6
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	200000f2 	strdcs	r0, [r0], -r2
  c8:	00000026 	andeq	r0, r0, r6, lsr #32
  cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d0:	41018e02 	tstmi	r1, r2, lsl #28
  d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d8:	00000007 	andeq	r0, r0, r7
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	00000000 	andeq	r0, r0, r0
  e4:	20000118 	andcs	r0, r0, r8, lsl r1
  e8:	00000150 	andeq	r0, r0, r0, asr r1
  ec:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  f0:	87038504 	strhi	r8, [r3, -r4, lsl #10]
  f4:	41018e02 	tstmi	r1, r2, lsl #28
  f8:	0d41500e 	stcleq	0, cr5, [r1, #-56]	; 0xffffffc8
  fc:	00000007 	andeq	r0, r0, r7
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	00000000 	andeq	r0, r0, r0
 108:	20000268 	andcs	r0, r0, r8, ror #4
 10c:	00000044 	andeq	r0, r0, r4, asr #32
 110:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 114:	41018e02 	tstmi	r1, r2, lsl #28
 118:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 11c:	00000007 	andeq	r0, r0, r7
 120:	0000000c 	andeq	r0, r0, ip
 124:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 128:	7c010001 	stcvc	0, cr0, [r1], {1}
 12c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 130:	0000000c 	andeq	r0, r0, ip
 134:	00000120 	andeq	r0, r0, r0, lsr #2
 138:	200002ad 	andcs	r0, r0, sp, lsr #5
 13c:	0000010a 	andeq	r0, r0, sl, lsl #2
 140:	0000000c 	andeq	r0, r0, ip
 144:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 148:	7c020001 	stcvc	0, cr0, [r2], {1}
 14c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 150:	00000014 	andeq	r0, r0, r4, lsl r0
 154:	00000140 	andeq	r0, r0, r0, asr #2
 158:	200003c4 	andcs	r0, r0, r4, asr #7
 15c:	00000012 	andeq	r0, r0, r2, lsl r0
 160:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 164:	00018e02 	andeq	r8, r1, r2, lsl #28
